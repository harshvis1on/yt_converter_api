{"ast":null,"code":"import{supabase}from'./supabase';export class EpisodeService{// Get episodes from Supabase (episodes table)\nasync getEpisodesFromSupabase(podcastId){try{console.log('📺 Fetching episodes from Supabase for podcast:',podcastId);const{data,error}=await supabase.from('episodes').select('*').eq('podcast_id',podcastId).order('published_at',{ascending:false});if(error){throw new Error(`Supabase error: ${error.message}`);}console.log(`✅ Found ${data.length} episodes in Supabase`);return{success:true,episodes:data||[],totalCount:(data===null||data===void 0?void 0:data.length)||0};}catch(error){console.error('❌ Failed to fetch episodes from Supabase:',error);return{success:false,error:error.message,episodes:[]};}}// Get podcast ID from Megaphone ID\nasync getPodcastIdFromMegaphoneId(megaphoneId){try{const{data,error}=await supabase.from('podcasts').select('id').eq('megaphone_id',megaphoneId).single();if(error){throw new Error(`Failed to find podcast: ${error.message}`);}return data===null||data===void 0?void 0:data.id;}catch(error){console.error('❌ Failed to get podcast ID:',error);return null;}}// Transform Supabase episode data for frontend\ntransformEpisodeData(episodes){return episodes.map(episode=>({id:`supabase_${episode.id}`,title:episode.title||\"Untitled Episode\",status:episode.status==='published'?\"Published\":episode.status==='scheduled'?\"Scheduled\":episode.status==='draft'?\"Draft\":episode.status==='created'?\"Created\":\"Unknown\",publishedDate:episode.published_at?new Date(episode.published_at).toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric'}):\"Unknown\",format:\"Audio\",preRolls:1,midRolls:1,postRolls:1,duration:episode.duration?`${Math.floor(episode.duration/60)}:${String(episode.duration%60).padStart(2,'0')}`:\"Unknown\",plays:episode.play_count||0,downloads:episode.download_count||0,fileUrl:episode.file_url,downloadUrl:episode.file_url,// For compatibility with n8n data format\nmegaphoneEpisodeId:episode.megaphone_episode_id,megaphoneUid:episode.megaphone_uid,videoId:episode.video_id,// If available\nerror:episode.error||null,source:'supabase',rawData:episode// Keep raw data for debugging\n}));}// Transform n8n workflow episode data for immediate display\ntransformN8nEpisodeData(results){let originalVideoData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!results||!Array.isArray(results)){console.warn('Invalid n8n episode results:',results);return[];}// Create a lookup map for original video data by videoId\nconst videoLookup={};if(originalVideoData&&Array.isArray(originalVideoData)){originalVideoData.forEach(video=>{const videoId=video.id||video.videoId;if(videoId){videoLookup[videoId]=video;}});}return results.map(episode=>{// Try to get original video title if available\nconst originalVideo=videoLookup[episode.videoId];const episodeTitle=(originalVideo===null||originalVideo===void 0?void 0:originalVideo.title)||episode.title||\"Untitled Episode\";return{id:`n8n_${episode.episodeId||episode.supabaseId}`,title:episodeTitle,status:episode.status==='created'?\"Created\":episode.status==='published'?\"Published\":episode.status==='processing'?\"Processing\":episode.error&&episode.error!=='null'?\"Failed\":\"Unknown\",publishedDate:episode.publishedAt?new Date(episode.publishedAt).toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric'}):episode.processedAt?new Date(episode.processedAt).toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric'}):\"Unknown\",format:\"Audio\",preRolls:1,midRolls:1,postRolls:1,duration:episode.duration||\"Unknown\",plays:0,// New episodes don't have plays yet\ndownloads:0,// New episodes don't have downloads yet\nfileUrl:episode.downloadUrl,downloadUrl:episode.downloadUrl,megaphoneEpisodeId:episode.megaphoneEpisodeId,megaphoneUid:episode.megaphoneUid,videoId:episode.videoId,error:episode.error&&episode.error!=='null'?episode.error:null,source:'n8n',rawData:episode,// Keep raw data for debugging\nisNew:true// Flag to indicate this is a newly created episode\n};});}}export const episodeService=new EpisodeService();","map":{"version":3,"names":["supabase","EpisodeService","getEpisodesFromSupabase","podcastId","console","log","data","error","from","select","eq","order","ascending","Error","message","length","success","episodes","totalCount","getPodcastIdFromMegaphoneId","megaphoneId","single","id","transformEpisodeData","map","episode","title","status","publishedDate","published_at","Date","toLocaleDateString","year","month","day","format","preRolls","midRolls","postRolls","duration","Math","floor","String","padStart","plays","play_count","downloads","download_count","fileUrl","file_url","downloadUrl","megaphoneEpisodeId","megaphone_episode_id","megaphoneUid","megaphone_uid","videoId","video_id","source","rawData","transformN8nEpisodeData","results","originalVideoData","arguments","undefined","Array","isArray","warn","videoLookup","forEach","video","originalVideo","episodeTitle","episodeId","supabaseId","publishedAt","processedAt","isNew","episodeService"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/episodeService.js"],"sourcesContent":["import { supabase } from './supabase';\n\nexport class EpisodeService {\n  // Get episodes from Supabase (episodes table)\n  async getEpisodesFromSupabase(podcastId) {\n    try {\n      console.log('📺 Fetching episodes from Supabase for podcast:', podcastId);\n      \n      const { data, error } = await supabase\n        .from('episodes')\n        .select('*')\n        .eq('podcast_id', podcastId)\n        .order('published_at', { ascending: false });\n\n      if (error) {\n        throw new Error(`Supabase error: ${error.message}`);\n      }\n\n      console.log(`✅ Found ${data.length} episodes in Supabase`);\n      return {\n        success: true,\n        episodes: data || [],\n        totalCount: data?.length || 0\n      };\n    } catch (error) {\n      console.error('❌ Failed to fetch episodes from Supabase:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  // Get podcast ID from Megaphone ID\n  async getPodcastIdFromMegaphoneId(megaphoneId) {\n    try {\n      const { data, error } = await supabase\n        .from('podcasts')\n        .select('id')\n        .eq('megaphone_id', megaphoneId)\n        .single();\n\n      if (error) {\n        throw new Error(`Failed to find podcast: ${error.message}`);\n      }\n\n      return data?.id;\n    } catch (error) {\n      console.error('❌ Failed to get podcast ID:', error);\n      return null;\n    }\n  }\n\n  // Transform Supabase episode data for frontend\n  transformEpisodeData(episodes) {\n    return episodes.map(episode => ({\n      id: `supabase_${episode.id}`,\n      title: episode.title || \"Untitled Episode\",\n      status: episode.status === 'published' ? \"Published\" : \n              episode.status === 'scheduled' ? \"Scheduled\" :\n              episode.status === 'draft' ? \"Draft\" : \n              episode.status === 'created' ? \"Created\" : \"Unknown\",\n      publishedDate: episode.published_at ? new Date(episode.published_at).toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric' \n      }) : \"Unknown\",\n      format: \"Audio\",\n      preRolls: 1,\n      midRolls: 1,\n      postRolls: 1,\n      duration: episode.duration ? `${Math.floor(episode.duration / 60)}:${String(episode.duration % 60).padStart(2, '0')}` : \"Unknown\",\n      plays: episode.play_count || 0,\n      downloads: episode.download_count || 0,\n      fileUrl: episode.file_url,\n      downloadUrl: episode.file_url, // For compatibility with n8n data format\n      megaphoneEpisodeId: episode.megaphone_episode_id,\n      megaphoneUid: episode.megaphone_uid,\n      videoId: episode.video_id, // If available\n      error: episode.error || null,\n      source: 'supabase',\n      rawData: episode // Keep raw data for debugging\n    }));\n  }\n\n  // Transform n8n workflow episode data for immediate display\n  transformN8nEpisodeData(results, originalVideoData = null) {\n    if (!results || !Array.isArray(results)) {\n      console.warn('Invalid n8n episode results:', results);\n      return [];\n    }\n\n    // Create a lookup map for original video data by videoId\n    const videoLookup = {};\n    if (originalVideoData && Array.isArray(originalVideoData)) {\n      originalVideoData.forEach(video => {\n        const videoId = video.id || video.videoId;\n        if (videoId) {\n          videoLookup[videoId] = video;\n        }\n      });\n    }\n\n    return results.map(episode => {\n      // Try to get original video title if available\n      const originalVideo = videoLookup[episode.videoId];\n      const episodeTitle = originalVideo?.title || episode.title || \"Untitled Episode\";\n      \n      return {\n        id: `n8n_${episode.episodeId || episode.supabaseId}`,\n        title: episodeTitle,\n        status: episode.status === 'created' ? \"Created\" : \n                episode.status === 'published' ? \"Published\" :\n                episode.status === 'processing' ? \"Processing\" :\n                episode.error && episode.error !== 'null' ? \"Failed\" : \"Unknown\",\n        publishedDate: episode.publishedAt ? new Date(episode.publishedAt).toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'short', \n          day: 'numeric' \n        }) : episode.processedAt ? new Date(episode.processedAt).toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'short', \n          day: 'numeric' \n        }) : \"Unknown\",\n        format: \"Audio\",\n        preRolls: 1,\n        midRolls: 1,\n        postRolls: 1,\n        duration: episode.duration || \"Unknown\",\n        plays: 0, // New episodes don't have plays yet\n        downloads: 0, // New episodes don't have downloads yet\n        fileUrl: episode.downloadUrl,\n        downloadUrl: episode.downloadUrl,\n        megaphoneEpisodeId: episode.megaphoneEpisodeId,\n        megaphoneUid: episode.megaphoneUid,\n        videoId: episode.videoId,\n        error: episode.error && episode.error !== 'null' ? episode.error : null,\n        source: 'n8n',\n        rawData: episode, // Keep raw data for debugging\n        isNew: true // Flag to indicate this is a newly created episode\n      };\n    });\n  }\n}\n\nexport const episodeService = new EpisodeService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
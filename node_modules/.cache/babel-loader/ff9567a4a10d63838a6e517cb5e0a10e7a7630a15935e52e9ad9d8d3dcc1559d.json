{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getPodcastEpisodes } from '../services/supabase';\nexport function useEpisodesData(podcastId) {\n  _s();\n  const [episodes, setEpisodes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!podcastId) {\n      setLoading(false);\n      setEpisodes([]);\n      return;\n    }\n    const fetchEpisodes = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        console.log('üéµ Fetching episodes for podcast:', podcastId);\n        const podcastEpisodes = await getPodcastEpisodes(podcastId);\n        setEpisodes(podcastEpisodes || []);\n        console.log('‚úÖ Episodes loaded:', (podcastEpisodes === null || podcastEpisodes === void 0 ? void 0 : podcastEpisodes.length) || 0);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch episodes:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch episodes');\n        setEpisodes([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEpisodes();\n  }, [podcastId]);\n  const refreshEpisodes = async () => {\n    if (!podcastId) return;\n    try {\n      setLoading(true);\n      const podcastEpisodes = await getPodcastEpisodes(podcastId);\n      setEpisodes(podcastEpisodes || []);\n    } catch (err) {\n      console.error('‚ùå Failed to refresh episodes:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh episodes');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    episodes,\n    loading,\n    error,\n    refreshEpisodes\n  };\n}\n_s(useEpisodesData, \"vSTUYArpREH0jialXBRBvFhx+tY=\");","map":{"version":3,"names":["useState","useEffect","getPodcastEpisodes","useEpisodesData","podcastId","_s","episodes","setEpisodes","loading","setLoading","error","setError","fetchEpisodes","console","log","podcastEpisodes","length","err","Error","message","refreshEpisodes"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useEpisodesData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getPodcastEpisodes } from '../services/supabase';\n\ninterface Episode {\n  id: string;\n  podcast_id: string;\n  title: string;\n  description?: string;\n  status: 'published' | 'draft' | 'scheduled';\n  published_date: string;\n  duration?: string;\n  format: string;\n  pre_rolls?: number;\n  mid_rolls?: number;\n  post_rolls?: number;\n  youtube_video_id?: string;\n  megaphone_episode_id?: string;\n  audio_url?: string;\n  image_url?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport function useEpisodesData(podcastId: string | null) {\n  const [episodes, setEpisodes] = useState<Episode[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!podcastId) {\n      setLoading(false);\n      setEpisodes([]);\n      return;\n    }\n\n    const fetchEpisodes = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        console.log('üéµ Fetching episodes for podcast:', podcastId);\n        const podcastEpisodes = await getPodcastEpisodes(podcastId);\n        \n        setEpisodes(podcastEpisodes || []);\n        console.log('‚úÖ Episodes loaded:', podcastEpisodes?.length || 0);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch episodes:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch episodes');\n        setEpisodes([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEpisodes();\n  }, [podcastId]);\n\n  const refreshEpisodes = async () => {\n    if (!podcastId) return;\n    \n    try {\n      setLoading(true);\n      const podcastEpisodes = await getPodcastEpisodes(podcastId);\n      setEpisodes(podcastEpisodes || []);\n    } catch (err) {\n      console.error('‚ùå Failed to refresh episodes:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh episodes');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    episodes,\n    loading,\n    error,\n    refreshEpisodes\n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,kBAAkB,QAAQ,sBAAsB;AAsBzD,OAAO,SAASC,eAAeA,CAACC,SAAwB,EAAE;EAAAC,EAAA;EACxD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACG,SAAS,EAAE;MACdK,UAAU,CAAC,KAAK,CAAC;MACjBF,WAAW,CAAC,EAAE,CAAC;MACf;IACF;IAEA,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QAEdE,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEV,SAAS,CAAC;QAC3D,MAAMW,eAAe,GAAG,MAAMb,kBAAkB,CAACE,SAAS,CAAC;QAE3DG,WAAW,CAACQ,eAAe,IAAI,EAAE,CAAC;QAClCF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,CAAAC,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEC,MAAM,KAAI,CAAC,CAAC;MACjE,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZJ,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAEO,GAAG,CAAC;QACjDN,QAAQ,CAACM,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,0BAA0B,CAAC;QACzEZ,WAAW,CAAC,EAAE,CAAC;MACjB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAEf,MAAMgB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAAChB,SAAS,EAAE;IAEhB,IAAI;MACFK,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMM,eAAe,GAAG,MAAMb,kBAAkB,CAACE,SAAS,CAAC;MAC3DG,WAAW,CAACQ,eAAe,IAAI,EAAE,CAAC;IACpC,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZJ,OAAO,CAACH,KAAK,CAAC,+BAA+B,EAAEO,GAAG,CAAC;MACnDN,QAAQ,CAACM,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,4BAA4B,CAAC;IAC7E,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IACLH,QAAQ;IACRE,OAAO;IACPE,KAAK;IACLU;EACF,CAAC;AACH;AAACf,EAAA,CAvDeF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
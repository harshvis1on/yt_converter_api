{"ast":null,"code":"import{useState,useEffect}from'react';import{getPodcastEpisodes}from'../services/supabase';export function useEpisodesData(podcastId){const[episodes,setEpisodes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{if(!podcastId){setLoading(false);setEpisodes([]);return;}const fetchEpisodes=async()=>{try{setLoading(true);setError(null);console.log('üéµ Fetching episodes for podcast:',podcastId);const podcastEpisodes=await getPodcastEpisodes(podcastId);setEpisodes(podcastEpisodes||[]);console.log('‚úÖ Episodes loaded:',(podcastEpisodes===null||podcastEpisodes===void 0?void 0:podcastEpisodes.length)||0);}catch(err){console.error('‚ùå Failed to fetch episodes:',err);setError(err instanceof Error?err.message:'Failed to fetch episodes');setEpisodes([]);}finally{setLoading(false);}};fetchEpisodes();},[podcastId]);const refreshEpisodes=async()=>{if(!podcastId)return;try{setLoading(true);const podcastEpisodes=await getPodcastEpisodes(podcastId);setEpisodes(podcastEpisodes||[]);}catch(err){console.error('‚ùå Failed to refresh episodes:',err);setError(err instanceof Error?err.message:'Failed to refresh episodes');}finally{setLoading(false);}};return{episodes,loading,error,refreshEpisodes};}","map":{"version":3,"names":["useState","useEffect","getPodcastEpisodes","useEpisodesData","podcastId","episodes","setEpisodes","loading","setLoading","error","setError","fetchEpisodes","console","log","podcastEpisodes","length","err","Error","message","refreshEpisodes"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useEpisodesData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getPodcastEpisodes } from '../services/supabase';\n\ninterface Episode {\n  id: string;\n  podcast_id: string;\n  title: string;\n  description?: string;\n  status: 'published' | 'draft' | 'scheduled';\n  published_date: string;\n  duration?: string;\n  format: string;\n  pre_rolls?: number;\n  mid_rolls?: number;\n  post_rolls?: number;\n  youtube_video_id?: string;\n  megaphone_episode_id?: string;\n  audio_url?: string;\n  image_url?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport function useEpisodesData(podcastId: string | null) {\n  const [episodes, setEpisodes] = useState<Episode[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!podcastId) {\n      setLoading(false);\n      setEpisodes([]);\n      return;\n    }\n\n    const fetchEpisodes = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        console.log('üéµ Fetching episodes for podcast:', podcastId);\n        const podcastEpisodes = await getPodcastEpisodes(podcastId);\n        \n        setEpisodes(podcastEpisodes || []);\n        console.log('‚úÖ Episodes loaded:', podcastEpisodes?.length || 0);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch episodes:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch episodes');\n        setEpisodes([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEpisodes();\n  }, [podcastId]);\n\n  const refreshEpisodes = async () => {\n    if (!podcastId) return;\n    \n    try {\n      setLoading(true);\n      const podcastEpisodes = await getPodcastEpisodes(podcastId);\n      setEpisodes(podcastEpisodes || []);\n    } catch (err) {\n      console.error('‚ùå Failed to refresh episodes:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh episodes');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    episodes,\n    loading,\n    error,\n    refreshEpisodes\n  };\n}"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,kBAAkB,KAAQ,sBAAsB,CAsBzD,MAAO,SAAS,CAAAC,eAAeA,CAACC,SAAwB,CAAE,CACxD,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGN,QAAQ,CAAY,EAAE,CAAC,CACvD,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAU,IAAI,CAAC,CACrD,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAgB,IAAI,CAAC,CAEvDC,SAAS,CAAC,IAAM,CACd,GAAI,CAACG,SAAS,CAAE,CACdI,UAAU,CAAC,KAAK,CAAC,CACjBF,WAAW,CAAC,EAAE,CAAC,CACf,OACF,CAEA,KAAM,CAAAK,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEdE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAET,SAAS,CAAC,CAC3D,KAAM,CAAAU,eAAe,CAAG,KAAM,CAAAZ,kBAAkB,CAACE,SAAS,CAAC,CAE3DE,WAAW,CAACQ,eAAe,EAAI,EAAE,CAAC,CAClCF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAE,CAAAC,eAAe,SAAfA,eAAe,iBAAfA,eAAe,CAAEC,MAAM,GAAI,CAAC,CAAC,CACjE,CAAE,MAAOC,GAAG,CAAE,CACZJ,OAAO,CAACH,KAAK,CAAC,6BAA6B,CAAEO,GAAG,CAAC,CACjDN,QAAQ,CAACM,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,0BAA0B,CAAC,CACzEZ,WAAW,CAAC,EAAE,CAAC,CACjB,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDG,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACP,SAAS,CAAC,CAAC,CAEf,KAAM,CAAAe,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CAACf,SAAS,CAAE,OAEhB,GAAI,CACFI,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAM,eAAe,CAAG,KAAM,CAAAZ,kBAAkB,CAACE,SAAS,CAAC,CAC3DE,WAAW,CAACQ,eAAe,EAAI,EAAE,CAAC,CACpC,CAAE,MAAOE,GAAG,CAAE,CACZJ,OAAO,CAACH,KAAK,CAAC,+BAA+B,CAAEO,GAAG,CAAC,CACnDN,QAAQ,CAACM,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,4BAA4B,CAAC,CAC7E,CAAC,OAAS,CACRV,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,MAAO,CACLH,QAAQ,CACRE,OAAO,CACPE,KAAK,CACLU,eACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
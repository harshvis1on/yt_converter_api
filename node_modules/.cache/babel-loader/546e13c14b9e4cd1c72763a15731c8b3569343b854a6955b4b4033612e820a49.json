{"ast":null,"code":"// Clean n8n API service - replaces all direct API calls\nimport{toast}from'react-toastify';import{savePodcastDetails,savePayoutDetails}from'./supabase';import N8N_CONFIG from'../utils/n8nConfig';// n8n Configuration\nconst N8N_BASE_URL=process.env.REACT_APP_N8N_BASE_URL||'https://n8n-6s78.onrender.com/';// Switch back to production webhooks\nconst USE_TEST_WEBHOOKS=false;// Use production webhooks\nconsole.log('🚀 PRODUCTION WEBHOOK CONFIG:',{REACT_APP_USE_TEST_WEBHOOKS:process.env.REACT_APP_USE_TEST_WEBHOOKS,USE_TEST_WEBHOOKS:USE_TEST_WEBHOOKS,USING_PRODUCTION:true});const DEV_MODE=process.env.REACT_APP_DEV_MODE==='true';// Use mock mode only if explicitly enabled\nconst USE_MOCK_MODE=DEV_MODE;console.log('🔧 n8n API Configuration:',{N8N_BASE_URL,USE_TEST_WEBHOOKS,REACT_APP_DEV_MODE:process.env.REACT_APP_DEV_MODE,NODE_ENV:process.env.NODE_ENV,DEV_MODE,USE_MOCK_MODE});class N8nApiService{constructor(){this.baseURL=N8N_BASE_URL;this.useTestWebhooks=USE_TEST_WEBHOOKS;}async makeRequest(endpoint,data){// Use test or production webhooks based on configuration\nconst baseUrl=this.baseURL.endsWith('/')?this.baseURL.slice(0,-1):this.baseURL;const webhookType=this.useTestWebhooks?'webhook-test':'webhook';const targetUrl=`${baseUrl}/${webhookType}/${endpoint}`;console.log(`📡 Making request to endpoint: ${endpoint}`,{USE_MOCK_MODE,DEV_MODE,useTestWebhooks:this.useTestWebhooks,n8nBaseUrl:baseUrl,webhookType,targetUrl,payload:data});// Log the exact data being sent for debugging\nconsole.log(`🔍 Webhook payload for ${endpoint}:`,JSON.stringify(data,null,2));// Use mock mode if explicitly enabled\nif(USE_MOCK_MODE){console.log(`🧪 Using mock response for ${endpoint}`);return this.getMockResponse(endpoint,data);}try{console.log(`🌐 Calling n8n ${this.useTestWebhooks?'TEST':'PRODUCTION'} webhook: ${targetUrl}`);// Set timeout based on endpoint using configuration\nconst isLongRunning=N8N_CONFIG.isLongRunning(endpoint);const timeoutDuration=N8N_CONFIG.getTimeout(endpoint);const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),timeoutDuration);const response=await fetch(targetUrl,{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json',// Add origin header to help with CORS debugging\n'Origin':window.location.origin},body:JSON.stringify(data),signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){const errorText=await response.text();console.error(`❌ HTTP ${response.status} error for ${endpoint}:`,errorText);console.error(`📤 Request was made to: ${targetUrl}`);console.error(`📦 Request payload was:`,JSON.stringify(data,null,2));// For 404 errors, fall back to mock (workflow not configured)  \nif(response.status===404){console.warn('🔄 n8n workflow not found, falling back to mock response');toast.info('Using offline mode - n8n workflow not configured');return this.getMockResponse(endpoint,data);}// Only fall back to mock for server errors in dev mode\nif(DEV_MODE&&response.status>=500){console.warn('Server error in dev mode, falling back to mock response');return this.getMockResponse(endpoint,data);}throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);}// Check if response has content before parsing JSON\nconst responseText=await response.text();console.log(`📥 Raw response from ${endpoint}:`,responseText);if(!responseText||responseText.trim()===''){console.warn(`⚠️ Empty response from ${endpoint}, falling back to mock`);toast.info('Webhook returned empty response - using offline mode');return this.getMockResponse(endpoint,data);}let result;try{result=JSON.parse(responseText);console.log(`✅ Parsed JSON from ${endpoint}:`,result);}catch(parseError){console.error(`❌ JSON parse error for ${endpoint}:`,parseError);console.error(`📝 Response text was:`,responseText);console.warn('🔄 Falling back to mock response due to parse error');toast.info('Webhook returned invalid response - using offline mode');return this.getMockResponse(endpoint,data);}// Handle N8N array response format\nconst finalResult=Array.isArray(result)?result[0]:result;console.log(`Processed response:`,finalResult);// Handle different response formats from n8n workflow\nif(endpoint==='youtube-sync'){// Check if it's already in the expected format\nif(finalResult.success&&finalResult.channel&&finalResult.videos){console.log('✅ Received properly formatted YouTube sync response');return finalResult;}// Handle raw YouTube API response format\nif(Array.isArray(finalResult)&&!finalResult.success){console.warn('⚠️ n8n returned raw YouTube data, transforming...');return this.transformYouTubeResponse(finalResult);}// Handle single object response format\nif(finalResult.channel||finalResult.videos||finalResult.items){console.warn('⚠️ n8n returned partial data format, transforming...');return this.transformYouTubeResponse([finalResult]);}}return finalResult;}catch(error){console.error(`n8n API error for ${endpoint}:`,error);// Use configuration helper for better error handling\nconsole.warn(`⏰ Request error for ${endpoint}:`,error.message);// Check if we should fall back to mock\nif(N8N_CONFIG.shouldFallbackToMock(error,endpoint,DEV_MODE)){console.warn('🔄 Using offline mode due to connection issue');toast.info(`Connection issue detected - using offline mode for ${endpoint}`);return this.getMockResponse(endpoint,data);}// Get user-friendly error message\nconst userError=N8N_CONFIG.getUserFriendlyError(error,endpoint);throw new Error(userError);}}// Mock responses for development\ngetMockResponse(endpoint,data){var _data$title,_data$userInfo;console.log(`🧪 Using mock response for ${endpoint}`);switch(endpoint){case'youtube-sync':return{success:true,channel:{id:'UC_mock_channel_id',title:'Mock YouTube Channel',description:'This is a mock YouTube channel for testing purposes.',subscriberCount:'1234',videoCount:'42'},videos:[{videoId:'mock_video_1',title:'Mock Video 1: Introduction to PodPay',description:'Learn how to use PodPay to convert YouTube videos to podcasts.',publishedAt:new Date(Date.now()-86400000).toISOString(),thumbnail:'https://via.placeholder.com/120x90/4F46E5/FFFFFF?text=Video+1'},{videoId:'mock_video_2',title:'Mock Video 2: Advanced Features',description:'Explore advanced features of podcast creation.',publishedAt:new Date(Date.now()-172800000).toISOString(),thumbnail:'https://via.placeholder.com/120x90/7C3AED/FFFFFF?text=Video+2'},{videoId:'mock_video_3',title:'Mock Video 3: Monetization Tips',description:'Tips and tricks for monetizing your podcast.',publishedAt:new Date(Date.now()-259200000).toISOString(),thumbnail:'https://via.placeholder.com/120x90/059669/FFFFFF?text=Video+3'}],message:'Mock YouTube channel data fetched successfully - ready for podcast creation form',prefillData:{title:'Mock YouTube Channel Podcast',subtitle:'Podcast created from Mock YouTube Channel',summary:'This is a mock YouTube channel for testing purposes.',author:'Mock YouTube Channel',link:'https://www.youtube.com/channel/UC_mock_channel_id',language:'en',itunesCategories:['Technology'],explicit:'clean',podcastType:'serial',imageFile:'https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Mock+Channel'}};case'create-podcast':return{success:true,podcastId:'mock_podcast_'+Date.now(),podcast:{id:'mock_podcast_'+Date.now(),title:data.title||'Mock Podcast',description:data.description||'Mock podcast description',author:data.author||'Mock Author',language:data.language||'en',explicit:data.explicit||'clean',primaryCategory:data.primaryCategory||'Technology',secondaryCategory:data.secondaryCategory||'',podcastType:data.podcastType||'serial',link:data.link||'https://youtube.com/channel/mock',copyright:data.copyright||'© 2024 Mock Author',ownerName:data.ownerName||'Mock Author',ownerEmail:data.ownerEmail||'mock@example.com',websiteUrl:data.websiteUrl||'https://youtube.com/channel/mock',keywords:data.keywords||'mock, podcast, youtube',slug:((_data$title=data.title)===null||_data$title===void 0?void 0:_data$title.toLowerCase().replace(/[^a-z0-9]+/g,'-'))||'mock-podcast',createdAt:new Date().toISOString(),feedUrl:`https://feeds.megaphone.fm/mock_podcast_${Date.now()}`},message:'Mock podcast created successfully!'};case'sync-podcast-data':return{success:true,podcast:{title:'Harsh ☀️ Podcast',subtitle:'Updated from Megaphone',summary:'Fresh podcast data synced from Megaphone API',episodes_count:0,status:'active'},message:'Podcast data synced from Megaphone'};case'sync-megaphone-episodes':return{success:true,episodeCount:0,episodes:[],message:'No episodes found in Megaphone for this podcast'};case'fetch-episodes':return{success:true,episodes:[{id:'episode_1',title:'Sample Published Episode 1',summary:'This is a sample episode summary',publishedAt:'2025-01-20T10:00:00Z',duration:1800,// 30 minutes in seconds\nstatus:'published',playCount:1234,downloadCount:567,fileUrl:'https://example.com/episode1.mp3'},{id:'episode_2',title:'Sample Published Episode 2',summary:'This is another sample episode summary',publishedAt:'2025-01-15T10:00:00Z',duration:2100,// 35 minutes in seconds\nstatus:'published',playCount:987,downloadCount:432,fileUrl:'https://example.com/episode2.mp3'}],totalCount:2};case'create-episodes':const videoObjects=data.videoObjects||[];return{results:videoObjects.map((video,index)=>({episodeId:`mock_episode_${video.videoId}`,megaphoneEpisodeId:`mock_megaphone_${video.videoId}`,videoId:video.videoId,title:video.title||`Mock Episode for ${video.videoId}`,status:'created',downloadUrl:`https://traffic.megaphone.fm/MOCK${Math.random().toString().slice(2,12)}.mp3`,supabaseId:`mock_episode_${video.videoId}`,megaphoneUid:`MOCKUID${Math.random().toString().slice(2,12)}`,publishedAt:video.publishedAt||new Date(Date.now()-index*86400000).toISOString(),processedAt:new Date().toISOString(),error:null}))};case'user-setup':return{success:true,userId:((_data$userInfo=data.userInfo)===null||_data$userInfo===void 0?void 0:_data$userInfo.id)||'mock_user_123',message:'Mock user setup completed'};default:return{success:true,message:`Mock response for ${endpoint}`};}}// Transform raw YouTube API response into expected format\ntransformYouTubeResponse(rawData){console.log('🔄 Transforming raw YouTube response to expected format');try{var _firstVideo$snippet$t,_firstVideo$snippet$t2,_firstVideo$snippet$t3,_firstVideo$snippet$t4,_firstVideo$snippet$t5,_firstVideo$snippet$t6;// Extract the first item which contains the playlist data\nconst playlistData=rawData[0];if(!playlistData||!playlistData.items){throw new Error('Invalid YouTube response structure');}// Extract channel info from the first video\nconst firstVideo=playlistData.items[0];if(!firstVideo){throw new Error('No videos found in playlist');}// Create channel object\nconst channel={id:firstVideo.snippet.channelId,title:firstVideo.snippet.channelTitle,description:`YouTube channel with ${playlistData.pageInfo.totalResults} videos`,subscriberCount:'N/A',// Not available in playlist response\nvideoCount:playlistData.pageInfo.totalResults.toString(),thumbnail:((_firstVideo$snippet$t=firstVideo.snippet.thumbnails)===null||_firstVideo$snippet$t===void 0?void 0:(_firstVideo$snippet$t2=_firstVideo$snippet$t.high)===null||_firstVideo$snippet$t2===void 0?void 0:_firstVideo$snippet$t2.url)||((_firstVideo$snippet$t3=firstVideo.snippet.thumbnails)===null||_firstVideo$snippet$t3===void 0?void 0:(_firstVideo$snippet$t4=_firstVideo$snippet$t3.medium)===null||_firstVideo$snippet$t4===void 0?void 0:_firstVideo$snippet$t4.url)||((_firstVideo$snippet$t5=firstVideo.snippet.thumbnails)===null||_firstVideo$snippet$t5===void 0?void 0:(_firstVideo$snippet$t6=_firstVideo$snippet$t5.default)===null||_firstVideo$snippet$t6===void 0?void 0:_firstVideo$snippet$t6.url)};// Transform videos\nconst videos=playlistData.items.map(item=>{var _item$snippet$thumbna,_item$snippet$thumbna2,_item$snippet$thumbna3,_item$snippet$thumbna4,_item$snippet$thumbna5,_item$snippet$thumbna6,_item$snippet$thumbna7,_item$snippet$thumbna8;return{videoId:item.snippet.resourceId.videoId,title:item.snippet.title,description:item.snippet.description,publishedAt:item.snippet.publishedAt,thumbnail:((_item$snippet$thumbna=item.snippet.thumbnails)===null||_item$snippet$thumbna===void 0?void 0:(_item$snippet$thumbna2=_item$snippet$thumbna.maxres)===null||_item$snippet$thumbna2===void 0?void 0:_item$snippet$thumbna2.url)||((_item$snippet$thumbna3=item.snippet.thumbnails)===null||_item$snippet$thumbna3===void 0?void 0:(_item$snippet$thumbna4=_item$snippet$thumbna3.high)===null||_item$snippet$thumbna4===void 0?void 0:_item$snippet$thumbna4.url)||((_item$snippet$thumbna5=item.snippet.thumbnails)===null||_item$snippet$thumbna5===void 0?void 0:(_item$snippet$thumbna6=_item$snippet$thumbna5.medium)===null||_item$snippet$thumbna6===void 0?void 0:_item$snippet$thumbna6.url)||((_item$snippet$thumbna7=item.snippet.thumbnails)===null||_item$snippet$thumbna7===void 0?void 0:(_item$snippet$thumbna8=_item$snippet$thumbna7.default)===null||_item$snippet$thumbna8===void 0?void 0:_item$snippet$thumbna8.url),position:item.snippet.position};});// Create prefill data with Megaphone-compatible fields\nconst prefillData={title:channel.title+' Podcast',subtitle:`Podcast created from ${channel.title} YouTube channel`,// New Megaphone field\nsummary:channel.description||`Podcast created from ${channel.title} YouTube channel with ${channel.videoCount} videos.`,// Megaphone uses 'summary'\nauthor:channel.title,link:`https://www.youtube.com/channel/${channel.id}`,language:'en',itunesCategories:['Technology'],// Convert to iTunes categories array\nexplicit:'clean',// Megaphone enum: no/clean/yes\npodcastType:'serial',copyright:`© ${new Date().getFullYear()} ${channel.title}`,ownerName:channel.title,ownerEmail:'',// User will need to fill this\nimageFile:channel.thumbnail||'',// Megaphone uses 'imageFile' instead of 'artworkUrl'\nkeywords:'youtube, podcast, '+channel.title.toLowerCase().replace(/\\s+/g,', ')};const transformedResponse={success:true,channel,videos,message:'YouTube channel data fetched successfully - ready for podcast creation form',prefillData};console.log('✅ Successfully transformed YouTube response:',{channelTitle:channel.title,videoCount:videos.length,hasPreffillData:!!prefillData});return transformedResponse;}catch(error){var _rawData$,_rawData$$items;console.error('❌ Failed to transform YouTube response:',error);// Return fallback response\nreturn{success:true,channel:{id:'unknown',title:'YouTube Channel',description:'Channel data retrieved from YouTube',subscriberCount:'N/A',videoCount:Array.isArray(rawData)&&(_rawData$=rawData[0])!==null&&_rawData$!==void 0&&(_rawData$$items=_rawData$.items)!==null&&_rawData$$items!==void 0&&_rawData$$items.length?rawData[0].items.length.toString():'0'},videos:[],message:'YouTube channel data retrieved (with limited info)',prefillData:{title:'My YouTube Podcast',subtitle:'Podcast created from YouTube channel',summary:'Podcast created from YouTube channel content',author:'YouTube Creator',link:'https://youtube.com',language:'en',itunesCategories:['Technology'],explicit:'clean',podcastType:'serial',imageFile:''}};}}// YouTube Channel Sync - fetches channel data for form prefill\nasync syncYouTubeChannel(accessToken,userId){try{console.log(`🎯 syncYouTubeChannel called with:`,{accessToken:accessToken?`${accessToken.substring(0,10)}...`:'NULL',userId:userId||'NULL'});toast.info('Fetching your YouTube channel data...');const result=await this.makeRequest('youtube-sync',{accessToken,userId});if(result.success){var _result$channel;const channelTitle=((_result$channel=result.channel)===null||_result$channel===void 0?void 0:_result$channel.title)||'Your Channel';toast.success(`Channel \"${channelTitle}\" data fetched successfully!`);return result;}else{throw new Error(result.error||result.message||'Channel sync failed');}}catch(error){console.error('YouTube channel sync failed:',error);throw error;}}// Create Podcast - creates podcast after user fills form\nasync createPodcast(podcastData){try{var _podcastData$customAr;toast.info('Creating your podcast...');// Ensure all required data is included\nconst podcastPayload={...podcastData,// Add timestamp for uniqueness\ncreatedAt:new Date().toISOString(),// Ensure required fields have defaults\nlanguage:podcastData.language||'en',explicit:podcastData.explicit||'clean',podcastType:podcastData.podcastType||'serial',primaryCategory:podcastData.primaryCategory||'Technology',// Ensure imageFile is set from the best available source\nimageFile:podcastData.imageFile||podcastData.finalArtworkUrl||podcastData.backgroundImageFileUrl||((_podcastData$customAr=podcastData.customArtwork)===null||_podcastData$customAr===void 0?void 0:_podcastData$customAr.supabaseUrl)};console.log('Creating podcast with payload:',podcastPayload);console.log('📸 Image data being sent to n8n:',{imageFile:podcastPayload.imageFile,backgroundImageFileUrl:podcastPayload.backgroundImageFileUrl,finalArtworkUrl:podcastPayload.finalArtworkUrl});const result=await this.makeRequest('create-podcast',podcastPayload);if(result.success){var _result$payout;// Save podcast details to Supabase (if not already saved via N8N workflow)\ntry{var _result$ids;const userId=podcastPayload.userId;const megaphoneResponse=result.podcast||result.megaphoneResponse;// Only save to Supabase if N8N didn't already handle it\nif(megaphoneResponse&&!((_result$ids=result.ids)!==null&&_result$ids!==void 0&&_result$ids.supabaseId)){console.log('💾 Saving podcast to Supabase...',megaphoneResponse);const supabasePodcast=await savePodcastDetails(userId,podcastPayload,megaphoneResponse);// Store Supabase podcast ID for payout linking\nresult.supabasePodcastId=supabasePodcast.id;result.supabasePodcast=supabasePodcast;console.log('✅ Podcast saved to Supabase:',supabasePodcast.id);}else{console.log('✅ Podcast already saved to Supabase via N8N workflow');}}catch(supabaseError){console.error('❌ Failed to save podcast to Supabase:',supabaseError);// Continue with workflow - sometimes the save actually succeeds despite error message\nconsole.log('ℹ️ Check Supabase directly - data might have saved successfully');}// Check if there were any Airwallex errors but still continue\nif(result.airwallexError||((_result$payout=result.payout)===null||_result$payout===void 0?void 0:_result$payout.status)==='incomplete'){console.warn('⚠️ Airwallex beneficiary creation failed:',result.airwallexError);toast.warning('Podcast created! Payout setup needs attention - check dashboard later.');// Save failed payout details to Supabase if we have podcast ID\nif(result.supabasePodcastId&&podcastPayload.payoutData){try{await savePayoutDetails(podcastPayload.userId,result.supabasePodcastId,{...podcastPayload.payoutData,status:'error',error_message:result.airwallexError});}catch(payoutSaveError){console.error('❌ Failed to save payout error to Supabase:',payoutSaveError);}}return{...result,payoutSetupIncomplete:true,payoutError:result.airwallexError};}else{// Save successful payout details to Supabase\nif(result.supabasePodcastId&&podcastPayload.payoutData&&result.airwallexBeneficiaryId){try{await savePayoutDetails(podcastPayload.userId,result.supabasePodcastId,{...podcastPayload.payoutData,airwallexBeneficiaryId:result.airwallexBeneficiaryId,status:'active'});console.log('✅ Payout details saved to Supabase');}catch(payoutSaveError){console.error('❌ Failed to save payout details to Supabase:',payoutSaveError);}}toast.success(`Podcast \"${podcastData.title}\" created successfully!`);}return result;}else{throw new Error(result.error||result.message||'Podcast creation failed');}}catch(error){console.error('Podcast creation failed:',error);throw error;}}// Podcast Data Sync Methods\nasync syncPodcastDataFromMegaphone(userId){try{console.log('🔄 syncPodcastDataFromMegaphone called for user:',userId);const result=await this.makeRequest('sync-podcast-data',{userId});if(result.success){console.log(`✅ Synced podcast data from Megaphone:`,result.podcast);return{success:true,podcast:result.podcast,message:result.message||'Podcast data synced successfully'};}else{throw new Error(result.error||'Failed to sync podcast data from Megaphone');}}catch(error){console.warn('⚠️ Podcast data sync failed (non-critical):',error.message);// Return success for missing webhooks to avoid blocking auth flow\nif(error.message.includes('Failed to fetch')||error.message.includes('CORS')||error.message.includes('404')){console.log('📝 Sync webhook not available, skipping sync (this is okay)');return{success:true,message:'Podcast sync skipped - webhook not available'};}return{success:false,error:error.message};}}// Episode Management Methods\nasync syncMegaphoneEpisodes(podcastId,userId){try{console.log('🔄 syncMegaphoneEpisodes called with:',{podcastId,userId});const result=await this.makeRequest('sync-megaphone-episodes',{podcastId,userId});if(result.success){console.log(`✅ Synced ${result.episodeCount||0} episodes from Megaphone`);return{success:true,episodes:result.episodes||[],episodeCount:result.episodeCount||0,message:result.message||'Episodes synced successfully'};}else{throw new Error(result.error||'Failed to sync episodes from Megaphone');}}catch(error){console.warn('⚠️ Megaphone episodes sync failed (non-critical):',error.message);// Return empty episodes list for missing webhooks\nif(error.message.includes('Failed to fetch')||error.message.includes('CORS')||error.message.includes('404')){console.log('📝 Megaphone sync webhook not available, returning empty episodes');return{success:true,episodes:[],episodeCount:0,message:'Megaphone sync skipped - webhook not available'};}return{success:false,error:error.message,episodes:[]};}}async fetchEpisodes(podcastId,userId){try{console.log('🎯 fetchEpisodes called with:',{podcastId,userId});const result=await this.makeRequest('fetch-episodes',{podcastId,userId});if(result.success){var _result$episodes;console.log(`✅ Fetched ${((_result$episodes=result.episodes)===null||_result$episodes===void 0?void 0:_result$episodes.length)||0} episodes from Megaphone`);return{success:true,episodes:result.episodes||[],totalCount:result.totalCount||0};}else{throw new Error(result.error||'Failed to fetch episodes');}}catch(error){console.warn('⚠️ Fetch episodes failed (non-critical):',error.message);// Return empty episodes list for missing webhooks\nif(error.message.includes('Failed to fetch')||error.message.includes('CORS')||error.message.includes('404')){console.log('📝 Fetch episodes webhook not available, returning empty episodes');return{success:true,episodes:[],totalCount:0,message:'Episode fetch skipped - webhook not available'};}return{success:false,error:error.message,episodes:[]};}}// Episode Creation - creates episodes and saves to Supabase\nasync createEpisodes(podcastId,videoObjects,userId){let distributionType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'audio';console.log('🔥 createEpisodes function called with:',{podcastId,videoCount:videoObjects===null||videoObjects===void 0?void 0:videoObjects.length,userId});try{// Validate inputs\nif(!podcastId){throw new Error('No podcastId provided');}if(!videoObjects||videoObjects.length===0){throw new Error('No video objects provided');}if(!userId){throw new Error('No userId provided');}toast.info(`Creating ${videoObjects.length} episodes and saving to database...`);// Use the common makeRequest method which handles test webhook for create-episodes\nconst result=await this.makeRequest('create-episodes',{podcastId,videoObjects,userId,distributionType,saveToSupabase:true});console.log('✅ Episode creation response:',result);if(result&&result.success){const{successful,failed,total}=result.summary||{successful:videoObjects.length,failed:0,total:videoObjects.length};if(successful>0){toast.success(`${successful}/${total} episodes created and saved to database!`);}if(failed>0){toast.warning(`${failed}/${total} episodes failed to create`);}// Also sync existing episodes to ensure we have everything\nsetTimeout(()=>{this.syncMegaphoneEpisodes(podcastId,userId);},2000);const finalResult={...result,episodesSaved:result.episodesSaved||[]};console.log('🎉 createEpisodes returning success result:',finalResult);return finalResult;}else{console.error('❌ Episode creation result was not successful:',result);throw new Error((result===null||result===void 0?void 0:result.error)||(result===null||result===void 0?void 0:result.message)||'Episode creation failed');}}catch(error){console.error('🚨 createEpisodes function error:',error);toast.error(`Episode creation failed: ${error.message}`);throw error;}}// User Setup - handles user data storage\nasync setupUser(googleToken,userInfo){try{console.log('Setting up user with n8n...');const result=await this.makeRequest('user-setup',{googleToken,userInfo});if(result.success){console.log('User setup completed:',result);return result;}else{throw new Error(result.error||'User setup failed');}}catch(error){console.error('User setup failed:',error);// Don't show error toast for user setup - it's background\nthrow error;}}// Health check for n8n connection\nasync healthCheck(){// Mock mode always returns healthy\nif(USE_MOCK_MODE){return true;}try{// Use production webhooks for health check\nconst webhookPath='webhook';const baseUrl=this.baseURL.endsWith('/')?this.baseURL.slice(0,-1):this.baseURL;const healthUrl=`${baseUrl}/${webhookPath}/health`;const response=await fetch(healthUrl);return response.ok;}catch{// Fall back to mock mode if health check fails\nreturn true;// Allow the app to work with mocks\n}}}// Export singleton instance\nexport const n8nApi=new N8nApiService();// Export individual functions for convenience\nexport const syncYouTubeChannel=(accessToken,userId)=>n8nApi.syncYouTubeChannel(accessToken,userId);export const createPodcast=podcastData=>n8nApi.createPodcast(podcastData);export const syncPodcastDataFromMegaphone=userId=>n8nApi.syncPodcastDataFromMegaphone(userId);export const syncMegaphoneEpisodes=(podcastId,userId)=>n8nApi.syncMegaphoneEpisodes(podcastId,userId);export const fetchEpisodes=(podcastId,userId)=>n8nApi.fetchEpisodes(podcastId,userId);export const createEpisodes=(podcastId,videoIds,userId)=>n8nApi.createEpisodes(podcastId,videoIds,userId);export const getEpisodeStatus=(podcastId,episodeId)=>n8nApi.makeRequest('get-episode-status',{podcastId,episodeId});export const setupUser=(googleToken,userInfo)=>n8nApi.setupUser(googleToken,userInfo);export default n8nApi;","map":{"version":3,"names":["toast","savePodcastDetails","savePayoutDetails","N8N_CONFIG","N8N_BASE_URL","process","env","REACT_APP_N8N_BASE_URL","USE_TEST_WEBHOOKS","console","log","REACT_APP_USE_TEST_WEBHOOKS","USING_PRODUCTION","DEV_MODE","REACT_APP_DEV_MODE","USE_MOCK_MODE","NODE_ENV","N8nApiService","constructor","baseURL","useTestWebhooks","makeRequest","endpoint","data","baseUrl","endsWith","slice","webhookType","targetUrl","n8nBaseUrl","payload","JSON","stringify","getMockResponse","isLongRunning","timeoutDuration","getTimeout","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","window","location","origin","body","signal","clearTimeout","ok","errorText","text","error","status","warn","info","Error","statusText","responseText","trim","result","parse","parseError","finalResult","Array","isArray","success","channel","videos","transformYouTubeResponse","items","message","shouldFallbackToMock","userError","getUserFriendlyError","_data$title","_data$userInfo","id","title","description","subscriberCount","videoCount","videoId","publishedAt","Date","now","toISOString","thumbnail","prefillData","subtitle","summary","author","link","language","itunesCategories","explicit","podcastType","imageFile","podcastId","podcast","primaryCategory","secondaryCategory","copyright","ownerName","ownerEmail","websiteUrl","keywords","slug","toLowerCase","replace","createdAt","feedUrl","episodes_count","episodeCount","episodes","duration","playCount","downloadCount","fileUrl","totalCount","videoObjects","results","map","video","index","episodeId","megaphoneEpisodeId","downloadUrl","Math","random","toString","supabaseId","megaphoneUid","processedAt","userId","userInfo","rawData","_firstVideo$snippet$t","_firstVideo$snippet$t2","_firstVideo$snippet$t3","_firstVideo$snippet$t4","_firstVideo$snippet$t5","_firstVideo$snippet$t6","playlistData","firstVideo","snippet","channelId","channelTitle","pageInfo","totalResults","thumbnails","high","url","medium","default","item","_item$snippet$thumbna","_item$snippet$thumbna2","_item$snippet$thumbna3","_item$snippet$thumbna4","_item$snippet$thumbna5","_item$snippet$thumbna6","_item$snippet$thumbna7","_item$snippet$thumbna8","resourceId","maxres","position","getFullYear","transformedResponse","length","hasPreffillData","_rawData$","_rawData$$items","syncYouTubeChannel","accessToken","substring","_result$channel","createPodcast","podcastData","_podcastData$customAr","podcastPayload","finalArtworkUrl","backgroundImageFileUrl","customArtwork","supabaseUrl","_result$payout","_result$ids","megaphoneResponse","ids","supabasePodcast","supabasePodcastId","supabaseError","airwallexError","payout","warning","payoutData","error_message","payoutSaveError","payoutSetupIncomplete","payoutError","airwallexBeneficiaryId","syncPodcastDataFromMegaphone","includes","syncMegaphoneEpisodes","fetchEpisodes","_result$episodes","createEpisodes","distributionType","arguments","undefined","saveToSupabase","successful","failed","total","episodesSaved","setupUser","googleToken","healthCheck","webhookPath","healthUrl","n8nApi","videoIds","getEpisodeStatus"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/n8nApi.js"],"sourcesContent":["// Clean n8n API service - replaces all direct API calls\nimport { toast } from 'react-toastify';\nimport { savePodcastDetails, savePayoutDetails } from './supabase';\nimport N8N_CONFIG from '../utils/n8nConfig';\n\n// n8n Configuration\nconst N8N_BASE_URL = process.env.REACT_APP_N8N_BASE_URL || 'https://n8n-6s78.onrender.com/';\n// Switch back to production webhooks\nconst USE_TEST_WEBHOOKS = false; // Use production webhooks\nconsole.log('🚀 PRODUCTION WEBHOOK CONFIG:', {\n  REACT_APP_USE_TEST_WEBHOOKS: process.env.REACT_APP_USE_TEST_WEBHOOKS,\n  USE_TEST_WEBHOOKS: USE_TEST_WEBHOOKS,\n  USING_PRODUCTION: true\n});\nconst DEV_MODE = process.env.REACT_APP_DEV_MODE === 'true';\n// Use mock mode only if explicitly enabled\nconst USE_MOCK_MODE = DEV_MODE;\n\nconsole.log('🔧 n8n API Configuration:', {\n  N8N_BASE_URL,\n  USE_TEST_WEBHOOKS,\n  REACT_APP_DEV_MODE: process.env.REACT_APP_DEV_MODE,\n  NODE_ENV: process.env.NODE_ENV,\n  DEV_MODE,\n  USE_MOCK_MODE\n});\n\nclass N8nApiService {\n  constructor() {\n    this.baseURL = N8N_BASE_URL;\n    this.useTestWebhooks = USE_TEST_WEBHOOKS;\n  }\n\n  async makeRequest(endpoint, data) {\n    // Use test or production webhooks based on configuration\n    const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n    const webhookType = this.useTestWebhooks ? 'webhook-test' : 'webhook';\n    const targetUrl = `${baseUrl}/${webhookType}/${endpoint}`;\n      \n    console.log(`📡 Making request to endpoint: ${endpoint}`, {\n      USE_MOCK_MODE,\n      DEV_MODE,\n      useTestWebhooks: this.useTestWebhooks,\n      n8nBaseUrl: baseUrl,\n      webhookType,\n      targetUrl,\n      payload: data\n    });\n    \n    // Log the exact data being sent for debugging\n    console.log(`🔍 Webhook payload for ${endpoint}:`, JSON.stringify(data, null, 2));\n    \n    // Use mock mode if explicitly enabled\n    if (USE_MOCK_MODE) {\n      console.log(`🧪 Using mock response for ${endpoint}`);\n      return this.getMockResponse(endpoint, data);\n    }\n    \n    try {\n      console.log(`🌐 Calling n8n ${this.useTestWebhooks ? 'TEST' : 'PRODUCTION'} webhook: ${targetUrl}`);\n      \n      // Set timeout based on endpoint using configuration\n      const isLongRunning = N8N_CONFIG.isLongRunning(endpoint);\n      const timeoutDuration = N8N_CONFIG.getTimeout(endpoint);\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeoutDuration);\n      \n      const response = await fetch(targetUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          // Add origin header to help with CORS debugging\n          'Origin': window.location.origin\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`❌ HTTP ${response.status} error for ${endpoint}:`, errorText);\n        console.error(`📤 Request was made to: ${targetUrl}`);\n        console.error(`📦 Request payload was:`, JSON.stringify(data, null, 2));\n        \n        // For 404 errors, fall back to mock (workflow not configured)  \n        if (response.status === 404) {\n          console.warn('🔄 n8n workflow not found, falling back to mock response');\n          toast.info('Using offline mode - n8n workflow not configured');\n          return this.getMockResponse(endpoint, data);\n        }\n        \n        // Only fall back to mock for server errors in dev mode\n        if (DEV_MODE && response.status >= 500) {\n          console.warn('Server error in dev mode, falling back to mock response');\n          return this.getMockResponse(endpoint, data);\n        }\n        \n        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n      }\n\n      // Check if response has content before parsing JSON\n      const responseText = await response.text();\n      console.log(`📥 Raw response from ${endpoint}:`, responseText);\n      \n      if (!responseText || responseText.trim() === '') {\n        console.warn(`⚠️ Empty response from ${endpoint}, falling back to mock`);\n        toast.info('Webhook returned empty response - using offline mode');\n        return this.getMockResponse(endpoint, data);\n      }\n      \n      let result;\n      try {\n        result = JSON.parse(responseText);\n        console.log(`✅ Parsed JSON from ${endpoint}:`, result);\n      } catch (parseError) {\n        console.error(`❌ JSON parse error for ${endpoint}:`, parseError);\n        console.error(`📝 Response text was:`, responseText);\n        console.warn('🔄 Falling back to mock response due to parse error');\n        toast.info('Webhook returned invalid response - using offline mode');\n        return this.getMockResponse(endpoint, data);\n      }\n      \n      // Handle N8N array response format\n      const finalResult = Array.isArray(result) ? result[0] : result;\n      console.log(`Processed response:`, finalResult);\n      \n      // Handle different response formats from n8n workflow\n      if (endpoint === 'youtube-sync') {\n        // Check if it's already in the expected format\n        if (finalResult.success && finalResult.channel && finalResult.videos) {\n          console.log('✅ Received properly formatted YouTube sync response');\n          return finalResult;\n        }\n        \n        // Handle raw YouTube API response format\n        if (Array.isArray(finalResult) && !finalResult.success) {\n          console.warn('⚠️ n8n returned raw YouTube data, transforming...');\n          return this.transformYouTubeResponse(finalResult);\n        }\n        \n        // Handle single object response format\n        if (finalResult.channel || finalResult.videos || finalResult.items) {\n          console.warn('⚠️ n8n returned partial data format, transforming...');\n          return this.transformYouTubeResponse([finalResult]);\n        }\n      }\n      \n      return finalResult;\n    } catch (error) {\n      console.error(`n8n API error for ${endpoint}:`, error);\n      \n      // Use configuration helper for better error handling\n      console.warn(`⏰ Request error for ${endpoint}:`, error.message);\n      \n      // Check if we should fall back to mock\n      if (N8N_CONFIG.shouldFallbackToMock(error, endpoint, DEV_MODE)) {\n        console.warn('🔄 Using offline mode due to connection issue');\n        toast.info(`Connection issue detected - using offline mode for ${endpoint}`);\n        return this.getMockResponse(endpoint, data);\n      }\n      \n      // Get user-friendly error message\n      const userError = N8N_CONFIG.getUserFriendlyError(error, endpoint);\n      throw new Error(userError);\n    }\n  }\n  \n  // Mock responses for development\n  getMockResponse(endpoint, data) {\n    console.log(`🧪 Using mock response for ${endpoint}`);\n    \n    switch (endpoint) {\n      case 'youtube-sync':\n        return {\n          success: true,\n          channel: {\n            id: 'UC_mock_channel_id',\n            title: 'Mock YouTube Channel',\n            description: 'This is a mock YouTube channel for testing purposes.',\n            subscriberCount: '1234',\n            videoCount: '42'\n          },\n          videos: [\n            {\n              videoId: 'mock_video_1',\n              title: 'Mock Video 1: Introduction to PodPay',\n              description: 'Learn how to use PodPay to convert YouTube videos to podcasts.',\n              publishedAt: new Date(Date.now() - 86400000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/4F46E5/FFFFFF?text=Video+1'\n            },\n            {\n              videoId: 'mock_video_2', \n              title: 'Mock Video 2: Advanced Features',\n              description: 'Explore advanced features of podcast creation.',\n              publishedAt: new Date(Date.now() - 172800000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/7C3AED/FFFFFF?text=Video+2'\n            },\n            {\n              videoId: 'mock_video_3',\n              title: 'Mock Video 3: Monetization Tips',\n              description: 'Tips and tricks for monetizing your podcast.',\n              publishedAt: new Date(Date.now() - 259200000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/059669/FFFFFF?text=Video+3'\n            }\n          ],\n          message: 'Mock YouTube channel data fetched successfully - ready for podcast creation form',\n          prefillData: {\n            title: 'Mock YouTube Channel Podcast',\n            subtitle: 'Podcast created from Mock YouTube Channel',\n            summary: 'This is a mock YouTube channel for testing purposes.',\n            author: 'Mock YouTube Channel',\n            link: 'https://www.youtube.com/channel/UC_mock_channel_id',\n            language: 'en',\n            itunesCategories: ['Technology'],\n            explicit: 'clean',\n            podcastType: 'serial',\n            imageFile: 'https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Mock+Channel'\n          }\n        };\n        \n      case 'create-podcast':\n        return {\n          success: true,\n          podcastId: 'mock_podcast_' + Date.now(),\n          podcast: {\n            id: 'mock_podcast_' + Date.now(),\n            title: data.title || 'Mock Podcast',\n            description: data.description || 'Mock podcast description',\n            author: data.author || 'Mock Author',\n            language: data.language || 'en',\n            explicit: data.explicit || 'clean',\n            primaryCategory: data.primaryCategory || 'Technology',\n            secondaryCategory: data.secondaryCategory || '',\n            podcastType: data.podcastType || 'serial',\n            link: data.link || 'https://youtube.com/channel/mock',\n            copyright: data.copyright || '© 2024 Mock Author',\n            ownerName: data.ownerName || 'Mock Author',\n            ownerEmail: data.ownerEmail || 'mock@example.com',\n            websiteUrl: data.websiteUrl || 'https://youtube.com/channel/mock',\n            keywords: data.keywords || 'mock, podcast, youtube',\n            slug: data.title?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || 'mock-podcast',\n            createdAt: new Date().toISOString(),\n            feedUrl: `https://feeds.megaphone.fm/mock_podcast_${Date.now()}`\n          },\n          message: 'Mock podcast created successfully!'\n        };\n        \n      case 'sync-podcast-data':\n        return {\n          success: true,\n          podcast: {\n            title: 'Harsh ☀️ Podcast',\n            subtitle: 'Updated from Megaphone',\n            summary: 'Fresh podcast data synced from Megaphone API',\n            episodes_count: 0,\n            status: 'active'\n          },\n          message: 'Podcast data synced from Megaphone'\n        };\n\n      case 'sync-megaphone-episodes':\n        return {\n          success: true,\n          episodeCount: 0,\n          episodes: [],\n          message: 'No episodes found in Megaphone for this podcast'\n        };\n\n      case 'fetch-episodes':\n        return {\n          success: true,\n          episodes: [\n            {\n              id: 'episode_1',\n              title: 'Sample Published Episode 1',\n              summary: 'This is a sample episode summary',\n              publishedAt: '2025-01-20T10:00:00Z',\n              duration: 1800, // 30 minutes in seconds\n              status: 'published',\n              playCount: 1234,\n              downloadCount: 567,\n              fileUrl: 'https://example.com/episode1.mp3'\n            },\n            {\n              id: 'episode_2', \n              title: 'Sample Published Episode 2',\n              summary: 'This is another sample episode summary',\n              publishedAt: '2025-01-15T10:00:00Z',\n              duration: 2100, // 35 minutes in seconds\n              status: 'published',\n              playCount: 987,\n              downloadCount: 432,\n              fileUrl: 'https://example.com/episode2.mp3'\n            }\n          ],\n          totalCount: 2\n        };\n        \n      case 'create-episodes':\n        const videoObjects = data.videoObjects || [];\n        return {\n          results: videoObjects.map((video, index) => ({\n            episodeId: `mock_episode_${video.videoId}`,\n            megaphoneEpisodeId: `mock_megaphone_${video.videoId}`,\n            videoId: video.videoId,\n            title: video.title || `Mock Episode for ${video.videoId}`,\n            status: 'created',\n            downloadUrl: `https://traffic.megaphone.fm/MOCK${Math.random().toString().slice(2, 12)}.mp3`,\n            supabaseId: `mock_episode_${video.videoId}`,\n            megaphoneUid: `MOCKUID${Math.random().toString().slice(2, 12)}`,\n            publishedAt: video.publishedAt || new Date(Date.now() - index * 86400000).toISOString(),\n            processedAt: new Date().toISOString(),\n            error: null\n          }))\n        };\n        \n      case 'user-setup':\n        return {\n          success: true,\n          userId: data.userInfo?.id || 'mock_user_123',\n          message: 'Mock user setup completed'\n        };\n        \n      default:\n        return {\n          success: true,\n          message: `Mock response for ${endpoint}`\n        };\n    }\n  }\n  \n  // Transform raw YouTube API response into expected format\n  transformYouTubeResponse(rawData) {\n    console.log('🔄 Transforming raw YouTube response to expected format');\n    \n    try {\n      // Extract the first item which contains the playlist data\n      const playlistData = rawData[0];\n      \n      if (!playlistData || !playlistData.items) {\n        throw new Error('Invalid YouTube response structure');\n      }\n      \n      // Extract channel info from the first video\n      const firstVideo = playlistData.items[0];\n      if (!firstVideo) {\n        throw new Error('No videos found in playlist');\n      }\n      \n      // Create channel object\n      const channel = {\n        id: firstVideo.snippet.channelId,\n        title: firstVideo.snippet.channelTitle,\n        description: `YouTube channel with ${playlistData.pageInfo.totalResults} videos`,\n        subscriberCount: 'N/A', // Not available in playlist response\n        videoCount: playlistData.pageInfo.totalResults.toString(),\n        thumbnail: firstVideo.snippet.thumbnails?.high?.url || \n                  firstVideo.snippet.thumbnails?.medium?.url || \n                  firstVideo.snippet.thumbnails?.default?.url\n      };\n      \n      // Transform videos\n      const videos = playlistData.items.map(item => ({\n        videoId: item.snippet.resourceId.videoId,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        publishedAt: item.snippet.publishedAt,\n        thumbnail: item.snippet.thumbnails?.maxres?.url || \n                  item.snippet.thumbnails?.high?.url || \n                  item.snippet.thumbnails?.medium?.url || \n                  item.snippet.thumbnails?.default?.url,\n        position: item.snippet.position\n      }));\n      \n      // Create prefill data with Megaphone-compatible fields\n      const prefillData = {\n        title: channel.title + ' Podcast',\n        subtitle: `Podcast created from ${channel.title} YouTube channel`, // New Megaphone field\n        summary: channel.description || `Podcast created from ${channel.title} YouTube channel with ${channel.videoCount} videos.`, // Megaphone uses 'summary'\n        author: channel.title,\n        link: `https://www.youtube.com/channel/${channel.id}`,\n        language: 'en',\n        itunesCategories: ['Technology'], // Convert to iTunes categories array\n        explicit: 'clean', // Megaphone enum: no/clean/yes\n        podcastType: 'serial',\n        copyright: `© ${new Date().getFullYear()} ${channel.title}`,\n        ownerName: channel.title,\n        ownerEmail: '', // User will need to fill this\n        imageFile: channel.thumbnail || '', // Megaphone uses 'imageFile' instead of 'artworkUrl'\n        keywords: 'youtube, podcast, ' + channel.title.toLowerCase().replace(/\\s+/g, ', ')\n      };\n      \n      const transformedResponse = {\n        success: true,\n        channel,\n        videos,\n        message: 'YouTube channel data fetched successfully - ready for podcast creation form',\n        prefillData\n      };\n      \n      console.log('✅ Successfully transformed YouTube response:', {\n        channelTitle: channel.title,\n        videoCount: videos.length,\n        hasPreffillData: !!prefillData\n      });\n      \n      return transformedResponse;\n      \n    } catch (error) {\n      console.error('❌ Failed to transform YouTube response:', error);\n      \n      // Return fallback response\n      return {\n        success: true,\n        channel: {\n          id: 'unknown',\n          title: 'YouTube Channel',\n          description: 'Channel data retrieved from YouTube',\n          subscriberCount: 'N/A',\n          videoCount: Array.isArray(rawData) && rawData[0]?.items?.length ? rawData[0].items.length.toString() : '0'\n        },\n        videos: [],\n        message: 'YouTube channel data retrieved (with limited info)',\n        prefillData: {\n          title: 'My YouTube Podcast',\n          subtitle: 'Podcast created from YouTube channel',\n          summary: 'Podcast created from YouTube channel content',\n          author: 'YouTube Creator',\n          link: 'https://youtube.com',\n          language: 'en',\n          itunesCategories: ['Technology'],\n          explicit: 'clean',\n          podcastType: 'serial',\n          imageFile: ''\n        }\n      };\n    }\n  }\n\n  // YouTube Channel Sync - fetches channel data for form prefill\n  async syncYouTubeChannel(accessToken, userId) {\n    try {\n      console.log(`🎯 syncYouTubeChannel called with:`, {\n        accessToken: accessToken ? `${accessToken.substring(0, 10)}...` : 'NULL',\n        userId: userId || 'NULL'\n      });\n      \n      toast.info('Fetching your YouTube channel data...');\n      \n      const result = await this.makeRequest('youtube-sync', {\n        accessToken,\n        userId\n      });\n      \n      if (result.success) {\n        const channelTitle = result.channel?.title || 'Your Channel';\n        toast.success(`Channel \"${channelTitle}\" data fetched successfully!`);\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Channel sync failed');\n      }\n    } catch (error) {\n      console.error('YouTube channel sync failed:', error);\n      throw error;\n    }\n  }\n\n  // Create Podcast - creates podcast after user fills form\n  async createPodcast(podcastData) {\n    try {\n      toast.info('Creating your podcast...');\n      \n      // Ensure all required data is included\n      const podcastPayload = {\n        ...podcastData,\n        // Add timestamp for uniqueness\n        createdAt: new Date().toISOString(),\n        // Ensure required fields have defaults\n        language: podcastData.language || 'en',\n        explicit: podcastData.explicit || 'clean',\n        podcastType: podcastData.podcastType || 'serial',\n        primaryCategory: podcastData.primaryCategory || 'Technology',\n        // Ensure imageFile is set from the best available source\n        imageFile: podcastData.imageFile || podcastData.finalArtworkUrl || podcastData.backgroundImageFileUrl || (podcastData.customArtwork?.supabaseUrl)\n      };\n      \n      console.log('Creating podcast with payload:', podcastPayload);\n      console.log('📸 Image data being sent to n8n:', {\n        imageFile: podcastPayload.imageFile,\n        backgroundImageFileUrl: podcastPayload.backgroundImageFileUrl,\n        finalArtworkUrl: podcastPayload.finalArtworkUrl\n      });\n      \n      const result = await this.makeRequest('create-podcast', podcastPayload);\n      \n      if (result.success) {\n        // Save podcast details to Supabase (if not already saved via N8N workflow)\n        try {\n          const userId = podcastPayload.userId;\n          const megaphoneResponse = result.podcast || result.megaphoneResponse;\n          \n          // Only save to Supabase if N8N didn't already handle it\n          if (megaphoneResponse && !result.ids?.supabaseId) {\n            console.log('💾 Saving podcast to Supabase...', megaphoneResponse);\n            const supabasePodcast = await savePodcastDetails(userId, podcastPayload, megaphoneResponse);\n            \n            // Store Supabase podcast ID for payout linking\n            result.supabasePodcastId = supabasePodcast.id;\n            result.supabasePodcast = supabasePodcast;\n            \n            console.log('✅ Podcast saved to Supabase:', supabasePodcast.id);\n          } else {\n            console.log('✅ Podcast already saved to Supabase via N8N workflow');\n          }\n        } catch (supabaseError) {\n          console.error('❌ Failed to save podcast to Supabase:', supabaseError);\n          // Continue with workflow - sometimes the save actually succeeds despite error message\n          console.log('ℹ️ Check Supabase directly - data might have saved successfully');\n        }\n\n        // Check if there were any Airwallex errors but still continue\n        if (result.airwallexError || result.payout?.status === 'incomplete') {\n          console.warn('⚠️ Airwallex beneficiary creation failed:', result.airwallexError);\n          toast.warning('Podcast created! Payout setup needs attention - check dashboard later.');\n          \n          // Save failed payout details to Supabase if we have podcast ID\n          if (result.supabasePodcastId && podcastPayload.payoutData) {\n            try {\n              await savePayoutDetails(\n                podcastPayload.userId, \n                result.supabasePodcastId, \n                {\n                  ...podcastPayload.payoutData,\n                  status: 'error',\n                  error_message: result.airwallexError\n                }\n              );\n            } catch (payoutSaveError) {\n              console.error('❌ Failed to save payout error to Supabase:', payoutSaveError);\n            }\n          }\n          \n          return {\n            ...result,\n            payoutSetupIncomplete: true,\n            payoutError: result.airwallexError\n          };\n        } else {\n          // Save successful payout details to Supabase\n          if (result.supabasePodcastId && podcastPayload.payoutData && result.airwallexBeneficiaryId) {\n            try {\n              await savePayoutDetails(\n                podcastPayload.userId, \n                result.supabasePodcastId, \n                {\n                  ...podcastPayload.payoutData,\n                  airwallexBeneficiaryId: result.airwallexBeneficiaryId,\n                  status: 'active'\n                }\n              );\n              console.log('✅ Payout details saved to Supabase');\n            } catch (payoutSaveError) {\n              console.error('❌ Failed to save payout details to Supabase:', payoutSaveError);\n            }\n          }\n          \n          toast.success(`Podcast \"${podcastData.title}\" created successfully!`);\n        }\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Podcast creation failed');\n      }\n    } catch (error) {\n      console.error('Podcast creation failed:', error);\n      throw error;\n    }\n  }\n\n  // Podcast Data Sync Methods\n  async syncPodcastDataFromMegaphone(userId) {\n    try {\n      console.log('🔄 syncPodcastDataFromMegaphone called for user:', userId);\n      \n      const result = await this.makeRequest('sync-podcast-data', {\n        userId\n      });\n      \n      if (result.success) {\n        console.log(`✅ Synced podcast data from Megaphone:`, result.podcast);\n        return {\n          success: true,\n          podcast: result.podcast,\n          message: result.message || 'Podcast data synced successfully'\n        };\n      } else {\n        throw new Error(result.error || 'Failed to sync podcast data from Megaphone');\n      }\n      \n    } catch (error) {\n      console.warn('⚠️ Podcast data sync failed (non-critical):', error.message);\n      \n      // Return success for missing webhooks to avoid blocking auth flow\n      if (error.message.includes('Failed to fetch') || \n          error.message.includes('CORS') ||\n          error.message.includes('404')) {\n        console.log('📝 Sync webhook not available, skipping sync (this is okay)');\n        return {\n          success: true,\n          message: 'Podcast sync skipped - webhook not available'\n        };\n      }\n      \n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Episode Management Methods\n  async syncMegaphoneEpisodes(podcastId, userId) {\n    try {\n      console.log('🔄 syncMegaphoneEpisodes called with:', { podcastId, userId });\n      \n      const result = await this.makeRequest('sync-megaphone-episodes', {\n        podcastId,\n        userId\n      });\n      \n      if (result.success) {\n        console.log(`✅ Synced ${result.episodeCount || 0} episodes from Megaphone`);\n        return {\n          success: true,\n          episodes: result.episodes || [],\n          episodeCount: result.episodeCount || 0,\n          message: result.message || 'Episodes synced successfully'\n        };\n      } else {\n        throw new Error(result.error || 'Failed to sync episodes from Megaphone');\n      }\n      \n    } catch (error) {\n      console.warn('⚠️ Megaphone episodes sync failed (non-critical):', error.message);\n      \n      // Return empty episodes list for missing webhooks\n      if (error.message.includes('Failed to fetch') || \n          error.message.includes('CORS') ||\n          error.message.includes('404')) {\n        console.log('📝 Megaphone sync webhook not available, returning empty episodes');\n        return {\n          success: true,\n          episodes: [],\n          episodeCount: 0,\n          message: 'Megaphone sync skipped - webhook not available'\n        };\n      }\n      \n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  async fetchEpisodes(podcastId, userId) {\n    try {\n      console.log('🎯 fetchEpisodes called with:', { podcastId, userId });\n      \n      const result = await this.makeRequest('fetch-episodes', {\n        podcastId,\n        userId\n      });\n      \n      if (result.success) {\n        console.log(`✅ Fetched ${result.episodes?.length || 0} episodes from Megaphone`);\n        return {\n          success: true,\n          episodes: result.episodes || [],\n          totalCount: result.totalCount || 0\n        };\n      } else {\n        throw new Error(result.error || 'Failed to fetch episodes');\n      }\n      \n    } catch (error) {\n      console.warn('⚠️ Fetch episodes failed (non-critical):', error.message);\n      \n      // Return empty episodes list for missing webhooks\n      if (error.message.includes('Failed to fetch') || \n          error.message.includes('CORS') ||\n          error.message.includes('404')) {\n        console.log('📝 Fetch episodes webhook not available, returning empty episodes');\n        return {\n          success: true,\n          episodes: [],\n          totalCount: 0,\n          message: 'Episode fetch skipped - webhook not available'\n        };\n      }\n      \n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  // Episode Creation - creates episodes and saves to Supabase\n  async createEpisodes(podcastId, videoObjects, userId, distributionType = 'audio') {\n    console.log('🔥 createEpisodes function called with:', { podcastId, videoCount: videoObjects?.length, userId });\n    \n    try {\n      // Validate inputs\n      if (!podcastId) {\n        throw new Error('No podcastId provided');\n      }\n      if (!videoObjects || videoObjects.length === 0) {\n        throw new Error('No video objects provided');\n      }\n      if (!userId) {\n        throw new Error('No userId provided');\n      }\n      \n      toast.info(`Creating ${videoObjects.length} episodes and saving to database...`);\n      \n      // Use the common makeRequest method which handles test webhook for create-episodes\n      const result = await this.makeRequest('create-episodes', {\n        podcastId,\n        videoObjects,\n        userId,\n        distributionType,\n        saveToSupabase: true\n      });\n      console.log('✅ Episode creation response:', result);\n      \n      if (result && result.success) {\n        const { successful, failed, total } = result.summary || { successful: videoObjects.length, failed: 0, total: videoObjects.length };\n        \n        if (successful > 0) {\n          toast.success(`${successful}/${total} episodes created and saved to database!`);\n        }\n        if (failed > 0) {\n          toast.warning(`${failed}/${total} episodes failed to create`);\n        }\n        \n        // Also sync existing episodes to ensure we have everything\n        setTimeout(() => {\n          this.syncMegaphoneEpisodes(podcastId, userId);\n        }, 2000);\n        \n        const finalResult = {\n          ...result,\n          episodesSaved: result.episodesSaved || []\n        };\n        console.log('🎉 createEpisodes returning success result:', finalResult);\n        return finalResult;\n      } else {\n        console.error('❌ Episode creation result was not successful:', result);\n        throw new Error(result?.error || result?.message || 'Episode creation failed');\n      }\n    } catch (error) {\n      console.error('🚨 createEpisodes function error:', error);\n      toast.error(`Episode creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  // User Setup - handles user data storage\n  async setupUser(googleToken, userInfo) {\n    try {\n      console.log('Setting up user with n8n...');\n      \n      const result = await this.makeRequest('user-setup', {\n        googleToken,\n        userInfo\n      });\n      \n      if (result.success) {\n        console.log('User setup completed:', result);\n        return result;\n      } else {\n        throw new Error(result.error || 'User setup failed');\n      }\n    } catch (error) {\n      console.error('User setup failed:', error);\n      // Don't show error toast for user setup - it's background\n      throw error;\n    }\n  }\n\n  // Health check for n8n connection\n  async healthCheck() {\n    // Mock mode always returns healthy\n    if (USE_MOCK_MODE) {\n      return true;\n    }\n    \n    try {\n      // Use production webhooks for health check\n      const webhookPath = 'webhook';\n      const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n      const healthUrl = `${baseUrl}/${webhookPath}/health`;\n      const response = await fetch(healthUrl);\n      return response.ok;\n    } catch {\n      // Fall back to mock mode if health check fails\n      return true; // Allow the app to work with mocks\n    }\n  }\n}\n\n// Export singleton instance\nexport const n8nApi = new N8nApiService();\n\n// Export individual functions for convenience\nexport const syncYouTubeChannel = (accessToken, userId) => \n  n8nApi.syncYouTubeChannel(accessToken, userId);\n\nexport const createPodcast = (podcastData) => \n  n8nApi.createPodcast(podcastData);\n\nexport const syncPodcastDataFromMegaphone = (userId) => \n  n8nApi.syncPodcastDataFromMegaphone(userId);\nexport const syncMegaphoneEpisodes = (podcastId, userId) => \n  n8nApi.syncMegaphoneEpisodes(podcastId, userId);\nexport const fetchEpisodes = (podcastId, userId) => \n  n8nApi.fetchEpisodes(podcastId, userId);\nexport const createEpisodes = (podcastId, videoIds, userId) => \n  n8nApi.createEpisodes(podcastId, videoIds, userId);\n\nexport const getEpisodeStatus = (podcastId, episodeId) => \n  n8nApi.makeRequest('get-episode-status', { podcastId, episodeId });\n\nexport const setupUser = (googleToken, userInfo) => \n  n8nApi.setupUser(googleToken, userInfo);\n\nexport default n8nApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
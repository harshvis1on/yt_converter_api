{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getUserPodcasts } from '../services/supabase';\nexport function usePodcastData(userInfo) {\n  _s();\n  const [podcasts, setPodcasts] = useState([]);\n  const [currentPodcast, setCurrentPodcast] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!(userInfo !== null && userInfo !== void 0 && userInfo.sub)) {\n      setLoading(false);\n      return;\n    }\n    const fetchPodcasts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        console.log('üéôÔ∏è Fetching podcasts for user:', userInfo.sub);\n        const userPodcasts = await getUserPodcasts(userInfo.sub);\n        setPodcasts(userPodcasts);\n\n        // Set the first podcast as current if available\n        if (userPodcasts.length > 0) {\n          setCurrentPodcast(userPodcasts[0]);\n          // Also store in localStorage for other components\n          localStorage.setItem('currentPodcast', JSON.stringify(userPodcasts[0]));\n        }\n        console.log('‚úÖ Podcasts loaded:', userPodcasts.length);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch podcasts:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch podcasts');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPodcasts();\n  }, [userInfo === null || userInfo === void 0 ? void 0 : userInfo.sub]);\n  const refreshPodcasts = async () => {\n    if (!(userInfo !== null && userInfo !== void 0 && userInfo.sub)) return;\n    try {\n      setLoading(true);\n      const userPodcasts = await getUserPodcasts(userInfo.sub);\n      setPodcasts(userPodcasts);\n      if (userPodcasts.length > 0) {\n        setCurrentPodcast(userPodcasts[0]);\n        localStorage.setItem('currentPodcast', JSON.stringify(userPodcasts[0]));\n      }\n    } catch (err) {\n      console.error('‚ùå Failed to refresh podcasts:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh podcasts');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    podcasts,\n    currentPodcast,\n    loading,\n    error,\n    refreshPodcasts\n  };\n}\n_s(usePodcastData, \"Q/rD7uGQA+L9BKQJBiA7Ekpy+dI=\");","map":{"version":3,"names":["useState","useEffect","getUserPodcasts","usePodcastData","userInfo","_s","podcasts","setPodcasts","currentPodcast","setCurrentPodcast","loading","setLoading","error","setError","sub","fetchPodcasts","console","log","userPodcasts","length","localStorage","setItem","JSON","stringify","err","Error","message","refreshPodcasts"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/usePodcastData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getUserPodcasts } from '../services/supabase';\nimport { Podcast } from '../types/podcast';\n\ninterface UserInfo {\n  sub: string;\n  email?: string;\n  name?: string;\n  given_name?: string;\n  family_name?: string;\n}\n\nexport function usePodcastData(userInfo: UserInfo | null) {\n  const [podcasts, setPodcasts] = useState<Podcast[]>([]);\n  const [currentPodcast, setCurrentPodcast] = useState<Podcast | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!userInfo?.sub) {\n      setLoading(false);\n      return;\n    }\n\n    const fetchPodcasts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        console.log('üéôÔ∏è Fetching podcasts for user:', userInfo.sub);\n        const userPodcasts = await getUserPodcasts(userInfo.sub);\n        \n        setPodcasts(userPodcasts);\n        \n        // Set the first podcast as current if available\n        if (userPodcasts.length > 0) {\n          setCurrentPodcast(userPodcasts[0]);\n          // Also store in localStorage for other components\n          localStorage.setItem('currentPodcast', JSON.stringify(userPodcasts[0]));\n        }\n        \n        console.log('‚úÖ Podcasts loaded:', userPodcasts.length);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch podcasts:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch podcasts');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPodcasts();\n  }, [userInfo?.sub]);\n\n  const refreshPodcasts = async () => {\n    if (!userInfo?.sub) return;\n    \n    try {\n      setLoading(true);\n      const userPodcasts = await getUserPodcasts(userInfo.sub);\n      setPodcasts(userPodcasts);\n      \n      if (userPodcasts.length > 0) {\n        setCurrentPodcast(userPodcasts[0]);\n        localStorage.setItem('currentPodcast', JSON.stringify(userPodcasts[0]));\n      }\n    } catch (err) {\n      console.error('‚ùå Failed to refresh podcasts:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh podcasts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    podcasts,\n    currentPodcast,\n    loading,\n    error,\n    refreshPodcasts\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
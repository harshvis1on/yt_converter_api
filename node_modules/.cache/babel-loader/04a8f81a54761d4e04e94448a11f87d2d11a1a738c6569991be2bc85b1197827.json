{"ast":null,"code":"import { supabase } from './supabase';\nexport class EpisodeService {\n  // Get episodes from Supabase (episodes table)\n  async getEpisodesFromSupabase(podcastId) {\n    try {\n      console.log('📺 Fetching episodes from Supabase for podcast:', podcastId);\n      const {\n        data,\n        error\n      } = await supabase.from('episodes').select('*').eq('podcast_id', podcastId).order('published_at', {\n        ascending: false\n      });\n      if (error) {\n        throw new Error(`Supabase error: ${error.message}`);\n      }\n      console.log(`✅ Found ${data.length} episodes in Supabase`);\n      return {\n        success: true,\n        episodes: data || [],\n        totalCount: (data === null || data === void 0 ? void 0 : data.length) || 0\n      };\n    } catch (error) {\n      console.error('❌ Failed to fetch episodes from Supabase:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  // Get podcast ID from Megaphone ID\n  async getPodcastIdFromMegaphoneId(megaphoneId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('podcasts').select('id').eq('megaphone_id', megaphoneId).single();\n      if (error) {\n        throw new Error(`Failed to find podcast: ${error.message}`);\n      }\n      return data === null || data === void 0 ? void 0 : data.id;\n    } catch (error) {\n      console.error('❌ Failed to get podcast ID:', error);\n      return null;\n    }\n  }\n\n  // Transform Supabase episode data for frontend\n  transformEpisodeData(episodes) {\n    return episodes.map(episode => ({\n      id: `supabase_${episode.id}`,\n      title: episode.title || \"Untitled Episode\",\n      status: episode.status === 'published' ? \"Published\" : episode.status === 'scheduled' ? \"Scheduled\" : episode.status === 'draft' ? \"Draft\" : \"Unknown\",\n      publishedDate: episode.published_at ? new Date(episode.published_at).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      }) : \"Unknown\",\n      format: \"Audio\",\n      preRolls: 1,\n      midRolls: 1,\n      postRolls: 1,\n      duration: episode.duration ? `${Math.floor(episode.duration / 60)}:${String(episode.duration % 60).padStart(2, '0')}` : \"Unknown\",\n      plays: episode.play_count || 0,\n      downloads: episode.download_count || 0,\n      fileUrl: episode.file_url,\n      source: 'supabase'\n    }));\n  }\n}\nexport const episodeService = new EpisodeService();","map":{"version":3,"names":["supabase","EpisodeService","getEpisodesFromSupabase","podcastId","console","log","data","error","from","select","eq","order","ascending","Error","message","length","success","episodes","totalCount","getPodcastIdFromMegaphoneId","megaphoneId","single","id","transformEpisodeData","map","episode","title","status","publishedDate","published_at","Date","toLocaleDateString","year","month","day","format","preRolls","midRolls","postRolls","duration","Math","floor","String","padStart","plays","play_count","downloads","download_count","fileUrl","file_url","source","episodeService"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/episodeService.js"],"sourcesContent":["import { supabase } from './supabase';\n\nexport class EpisodeService {\n  // Get episodes from Supabase (episodes table)\n  async getEpisodesFromSupabase(podcastId) {\n    try {\n      console.log('📺 Fetching episodes from Supabase for podcast:', podcastId);\n      \n      const { data, error } = await supabase\n        .from('episodes')\n        .select('*')\n        .eq('podcast_id', podcastId)\n        .order('published_at', { ascending: false });\n\n      if (error) {\n        throw new Error(`Supabase error: ${error.message}`);\n      }\n\n      console.log(`✅ Found ${data.length} episodes in Supabase`);\n      return {\n        success: true,\n        episodes: data || [],\n        totalCount: data?.length || 0\n      };\n    } catch (error) {\n      console.error('❌ Failed to fetch episodes from Supabase:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  // Get podcast ID from Megaphone ID\n  async getPodcastIdFromMegaphoneId(megaphoneId) {\n    try {\n      const { data, error } = await supabase\n        .from('podcasts')\n        .select('id')\n        .eq('megaphone_id', megaphoneId)\n        .single();\n\n      if (error) {\n        throw new Error(`Failed to find podcast: ${error.message}`);\n      }\n\n      return data?.id;\n    } catch (error) {\n      console.error('❌ Failed to get podcast ID:', error);\n      return null;\n    }\n  }\n\n  // Transform Supabase episode data for frontend\n  transformEpisodeData(episodes) {\n    return episodes.map(episode => ({\n      id: `supabase_${episode.id}`,\n      title: episode.title || \"Untitled Episode\",\n      status: episode.status === 'published' ? \"Published\" : \n              episode.status === 'scheduled' ? \"Scheduled\" :\n              episode.status === 'draft' ? \"Draft\" : \"Unknown\",\n      publishedDate: episode.published_at ? new Date(episode.published_at).toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric' \n      }) : \"Unknown\",\n      format: \"Audio\",\n      preRolls: 1,\n      midRolls: 1,\n      postRolls: 1,\n      duration: episode.duration ? `${Math.floor(episode.duration / 60)}:${String(episode.duration % 60).padStart(2, '0')}` : \"Unknown\",\n      plays: episode.play_count || 0,\n      downloads: episode.download_count || 0,\n      fileUrl: episode.file_url,\n      source: 'supabase'\n    }));\n  }\n}\n\nexport const episodeService = new EpisodeService();"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAErC,OAAO,MAAMC,cAAc,CAAC;EAC1B;EACA,MAAMC,uBAAuBA,CAACC,SAAS,EAAE;IACvC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEF,SAAS,CAAC;MAEzE,MAAM;QAAEG,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMP,QAAQ,CACnCQ,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,YAAY,EAAEP,SAAS,CAAC,CAC3BQ,KAAK,CAAC,cAAc,EAAE;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;MAE9C,IAAIL,KAAK,EAAE;QACT,MAAM,IAAIM,KAAK,CAAC,mBAAmBN,KAAK,CAACO,OAAO,EAAE,CAAC;MACrD;MAEAV,OAAO,CAACC,GAAG,CAAC,WAAWC,IAAI,CAACS,MAAM,uBAAuB,CAAC;MAC1D,OAAO;QACLC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAEX,IAAI,IAAI,EAAE;QACpBY,UAAU,EAAE,CAAAZ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,MAAM,KAAI;MAC9B,CAAC;IACH,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,OAAO;QACLS,OAAO,EAAE,KAAK;QACdT,KAAK,EAAEA,KAAK,CAACO,OAAO;QACpBG,QAAQ,EAAE;MACZ,CAAC;IACH;EACF;;EAEA;EACA,MAAME,2BAA2BA,CAACC,WAAW,EAAE;IAC7C,IAAI;MACF,MAAM;QAAEd,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMP,QAAQ,CACnCQ,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,cAAc,EAAEU,WAAW,CAAC,CAC/BC,MAAM,CAAC,CAAC;MAEX,IAAId,KAAK,EAAE;QACT,MAAM,IAAIM,KAAK,CAAC,2BAA2BN,KAAK,CAACO,OAAO,EAAE,CAAC;MAC7D;MAEA,OAAOR,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,EAAE;IACjB,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,IAAI;IACb;EACF;;EAEA;EACAgB,oBAAoBA,CAACN,QAAQ,EAAE;IAC7B,OAAOA,QAAQ,CAACO,GAAG,CAACC,OAAO,KAAK;MAC9BH,EAAE,EAAE,YAAYG,OAAO,CAACH,EAAE,EAAE;MAC5BI,KAAK,EAAED,OAAO,CAACC,KAAK,IAAI,kBAAkB;MAC1CC,MAAM,EAAEF,OAAO,CAACE,MAAM,KAAK,WAAW,GAAG,WAAW,GAC5CF,OAAO,CAACE,MAAM,KAAK,WAAW,GAAG,WAAW,GAC5CF,OAAO,CAACE,MAAM,KAAK,OAAO,GAAG,OAAO,GAAG,SAAS;MACxDC,aAAa,EAAEH,OAAO,CAACI,YAAY,GAAG,IAAIC,IAAI,CAACL,OAAO,CAACI,YAAY,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;QAC/FC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,OAAO;QACdC,GAAG,EAAE;MACP,CAAC,CAAC,GAAG,SAAS;MACdC,MAAM,EAAE,OAAO;MACfC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAEd,OAAO,CAACc,QAAQ,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAChB,OAAO,CAACc,QAAQ,GAAG,EAAE,CAAC,IAAIG,MAAM,CAACjB,OAAO,CAACc,QAAQ,GAAG,EAAE,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,SAAS;MACjIC,KAAK,EAAEnB,OAAO,CAACoB,UAAU,IAAI,CAAC;MAC9BC,SAAS,EAAErB,OAAO,CAACsB,cAAc,IAAI,CAAC;MACtCC,OAAO,EAAEvB,OAAO,CAACwB,QAAQ;MACzBC,MAAM,EAAE;IACV,CAAC,CAAC,CAAC;EACL;AACF;AAEA,OAAO,MAAMC,cAAc,GAAG,IAAIlD,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
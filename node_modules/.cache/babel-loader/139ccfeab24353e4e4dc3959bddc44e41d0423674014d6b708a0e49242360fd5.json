{"ast":null,"code":"import{useState,useEffect}from'react';import{getUserPodcasts}from'../services/supabase';export function usePodcastData(userInfo){const[podcasts,setPodcasts]=useState([]);const[currentPodcast,setCurrentPodcast]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{if(!(userInfo!==null&&userInfo!==void 0&&userInfo.id)){setLoading(false);return;}const fetchPodcasts=async()=>{try{setLoading(true);setError(null);console.log('üéôÔ∏è Fetching podcasts for user:',userInfo.id);const userPodcasts=await getUserPodcasts(userInfo.id);setPodcasts(userPodcasts);// Set the first podcast as current if available\nif(userPodcasts.length>0){setCurrentPodcast(userPodcasts[0]);// Also store in localStorage for other components\nlocalStorage.setItem('currentPodcast',JSON.stringify(userPodcasts[0]));}console.log('‚úÖ Podcasts loaded:',userPodcasts.length);}catch(err){console.error('‚ùå Failed to fetch podcasts:',err);setError(err instanceof Error?err.message:'Failed to fetch podcasts');}finally{setLoading(false);}};fetchPodcasts();// Auto-refresh podcast data every 2 minutes\nconst refreshInterval=setInterval(()=>{console.log('üîÑ Auto-refreshing podcast data...');fetchPodcasts();},2*60*1000);// 2 minutes\nreturn()=>clearInterval(refreshInterval);},[userInfo===null||userInfo===void 0?void 0:userInfo.id]);const refreshPodcasts=async()=>{if(!(userInfo!==null&&userInfo!==void 0&&userInfo.id))return;try{setLoading(true);const userPodcasts=await getUserPodcasts(userInfo.id);setPodcasts(userPodcasts);if(userPodcasts.length>0){setCurrentPodcast(userPodcasts[0]);localStorage.setItem('currentPodcast',JSON.stringify(userPodcasts[0]));}}catch(err){console.error('‚ùå Failed to refresh podcasts:',err);setError(err instanceof Error?err.message:'Failed to refresh podcasts');}finally{setLoading(false);}};return{podcasts,currentPodcast,loading,error,refreshPodcasts};}","map":{"version":3,"names":["useState","useEffect","getUserPodcasts","usePodcastData","userInfo","podcasts","setPodcasts","currentPodcast","setCurrentPodcast","loading","setLoading","error","setError","id","fetchPodcasts","console","log","userPodcasts","length","localStorage","setItem","JSON","stringify","err","Error","message","refreshInterval","setInterval","clearInterval","refreshPodcasts"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/usePodcastData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getUserPodcasts } from '../services/supabase';\nimport { Podcast } from '../types/podcast';\nimport { UserInfo } from '../types/user';\n\nexport function usePodcastData(userInfo: UserInfo | null) {\n  const [podcasts, setPodcasts] = useState<Podcast[]>([]);\n  const [currentPodcast, setCurrentPodcast] = useState<Podcast | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!userInfo?.id) {\n      setLoading(false);\n      return;\n    }\n\n    const fetchPodcasts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        console.log('üéôÔ∏è Fetching podcasts for user:', userInfo.id);\n        const userPodcasts = await getUserPodcasts(userInfo.id);\n        \n        setPodcasts(userPodcasts);\n        \n        // Set the first podcast as current if available\n        if (userPodcasts.length > 0) {\n          setCurrentPodcast(userPodcasts[0]);\n          // Also store in localStorage for other components\n          localStorage.setItem('currentPodcast', JSON.stringify(userPodcasts[0]));\n        }\n        \n        console.log('‚úÖ Podcasts loaded:', userPodcasts.length);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch podcasts:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch podcasts');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPodcasts();\n\n    // Auto-refresh podcast data every 2 minutes\n    const refreshInterval = setInterval(() => {\n      console.log('üîÑ Auto-refreshing podcast data...');\n      fetchPodcasts();\n    }, 2 * 60 * 1000); // 2 minutes\n\n    return () => clearInterval(refreshInterval);\n  }, [userInfo?.id]);\n\n  const refreshPodcasts = async () => {\n    if (!userInfo?.id) return;\n    \n    try {\n      setLoading(true);\n      const userPodcasts = await getUserPodcasts(userInfo.id);\n      setPodcasts(userPodcasts);\n      \n      if (userPodcasts.length > 0) {\n        setCurrentPodcast(userPodcasts[0]);\n        localStorage.setItem('currentPodcast', JSON.stringify(userPodcasts[0]));\n      }\n    } catch (err) {\n      console.error('‚ùå Failed to refresh podcasts:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh podcasts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    podcasts,\n    currentPodcast,\n    loading,\n    error,\n    refreshPodcasts\n  };\n}"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,eAAe,KAAQ,sBAAsB,CAItD,MAAO,SAAS,CAAAC,cAAcA,CAACC,QAAyB,CAAE,CACxD,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGN,QAAQ,CAAY,EAAE,CAAC,CACvD,KAAM,CAACO,cAAc,CAAEC,iBAAiB,CAAC,CAAGR,QAAQ,CAAiB,IAAI,CAAC,CAC1E,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAU,IAAI,CAAC,CACrD,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAgB,IAAI,CAAC,CAEvDC,SAAS,CAAC,IAAM,CACd,GAAI,EAACG,QAAQ,SAARA,QAAQ,WAARA,QAAQ,CAAES,EAAE,EAAE,CACjBH,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA,KAAM,CAAAI,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACFJ,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEdG,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEZ,QAAQ,CAACS,EAAE,CAAC,CAC3D,KAAM,CAAAI,YAAY,CAAG,KAAM,CAAAf,eAAe,CAACE,QAAQ,CAACS,EAAE,CAAC,CAEvDP,WAAW,CAACW,YAAY,CAAC,CAEzB;AACA,GAAIA,YAAY,CAACC,MAAM,CAAG,CAAC,CAAE,CAC3BV,iBAAiB,CAACS,YAAY,CAAC,CAAC,CAAC,CAAC,CAClC;AACAE,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAEC,IAAI,CAACC,SAAS,CAACL,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CACzE,CAEAF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEC,YAAY,CAACC,MAAM,CAAC,CACxD,CAAE,MAAOK,GAAG,CAAE,CACZR,OAAO,CAACJ,KAAK,CAAC,6BAA6B,CAAEY,GAAG,CAAC,CACjDX,QAAQ,CAACW,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,0BAA0B,CAAC,CAC3E,CAAC,OAAS,CACRf,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDI,aAAa,CAAC,CAAC,CAEf;AACA,KAAM,CAAAY,eAAe,CAAGC,WAAW,CAAC,IAAM,CACxCZ,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACjDF,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAAC,CAAG,EAAE,CAAG,IAAI,CAAC,CAAE;AAEnB,MAAO,IAAMc,aAAa,CAACF,eAAe,CAAC,CAC7C,CAAC,CAAE,CAACtB,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAES,EAAE,CAAC,CAAC,CAElB,KAAM,CAAAgB,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,EAACzB,QAAQ,SAARA,QAAQ,WAARA,QAAQ,CAAES,EAAE,EAAE,OAEnB,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAO,YAAY,CAAG,KAAM,CAAAf,eAAe,CAACE,QAAQ,CAACS,EAAE,CAAC,CACvDP,WAAW,CAACW,YAAY,CAAC,CAEzB,GAAIA,YAAY,CAACC,MAAM,CAAG,CAAC,CAAE,CAC3BV,iBAAiB,CAACS,YAAY,CAAC,CAAC,CAAC,CAAC,CAClCE,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAEC,IAAI,CAACC,SAAS,CAACL,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CACzE,CACF,CAAE,MAAOM,GAAG,CAAE,CACZR,OAAO,CAACJ,KAAK,CAAC,+BAA+B,CAAEY,GAAG,CAAC,CACnDX,QAAQ,CAACW,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,4BAA4B,CAAC,CAC7E,CAAC,OAAS,CACRf,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,MAAO,CACLL,QAAQ,CACRE,cAAc,CACdE,OAAO,CACPE,KAAK,CACLkB,eACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { createEpisodes } from '../services/n8nApi';\nimport { toast } from 'react-toastify';\nimport { safeGetItem } from '../utils/localStorage';\nexport function useYouTubeSync() {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    channel: null,\n    podcastId: null,\n    videos: [],\n    episodes: [],\n    progress: 0,\n    total: 0,\n    done: false,\n    status: ''\n  });\n\n  // Load data from localStorage on mount\n  React.useEffect(() => {\n    const channelData = safeGetItem('channelData');\n    const videosData = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    if (channelData || (videosData === null || videosData === void 0 ? void 0 : videosData.length) > 0 || podcastId) {\n      setState(s => ({\n        ...s,\n        channel: channelData,\n        videos: videosData,\n        podcastId: podcastId || null\n      }));\n    }\n  }, []);\n\n  // Helper: is YouTube connected?\n  const isYouTubeConnected = !!(state.channel && state.channel.id);\n\n  // Connect YouTube data is now handled by n8n in GoogleAuth\n  // This hook now focuses on episode management\n  const connectYouTube = useCallback(async () => {\n    // Data should already be loaded from localStorage\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId,\n      loading: false\n    }));\n    return {\n      channel,\n      videos,\n      podcastId,\n      success: true\n    };\n  }, []);\n\n  // Create episodes using n8n workflow\n  const syncToMegaphone = useCallback(async videos => {\n    if (!videos || videos.length === 0) {\n      toast.warning('No videos to sync');\n      return;\n    }\n    setState(s => ({\n      ...s,\n      loading: true,\n      progress: 0,\n      total: videos.length,\n      done: false,\n      episodes: [],\n      status: 'Creating podcast episodes...'\n    }));\n    const podcastId = state.podcastId || localStorage.getItem('podcastId') || '';\n    const userInfo = safeGetItem('user_info', {});\n    if (!podcastId) {\n      setState(s => ({\n        ...s,\n        error: 'No podcast ID found. Please reconnect your YouTube channel.',\n        loading: false\n      }));\n      return;\n    }\n    try {\n      // Extract video IDs for n8n workflow\n      const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n\n      // Call n8n episode creation workflow\n      const result = await createEpisodes(podcastId, videoIds, userInfo.id);\n      if (result.success) {\n        const {\n          successful,\n          failed,\n          total\n        } = result.summary;\n\n        // Update state with episode results\n        const episodes = result.results.map(r => ({\n          id: r.videoId,\n          title: r.title,\n          publishedAt: new Date().toISOString(),\n          mp4Url: `https://youtube.com/watch?v=${r.videoId}`,\n          publishedToMegaphone: r.status === 'created',\n          error: r.status === 'failed' ? 'Episode creation failed' : undefined\n        }));\n        setState(s => ({\n          ...s,\n          episodes,\n          progress: total,\n          total,\n          done: true,\n          loading: false,\n          status: `Sync complete! ${successful} successful, ${failed} failed`\n        }));\n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n    } catch (err) {\n      console.error('Episode creation process failed:', err);\n      setState(s => ({\n        ...s,\n        error: err.message,\n        loading: false,\n        status: ''\n      }));\n      toast.error('Episode creation failed: ' + err.message);\n    }\n  }, [state.podcastId]);\n\n  // Refresh data from localStorage\n  const refreshData = useCallback(() => {\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId: podcastId || null\n    }));\n  }, []);\n  return {\n    ...state,\n    connectYouTube,\n    syncToMegaphone,\n    isYouTubeConnected,\n    refreshData\n  };\n}\n_s(useYouTubeSync, \"Jn6/FCAR5+OZLjLfxExy7YibSjQ=\");","map":{"version":3,"names":["React","useState","useCallback","createEpisodes","toast","safeGetItem","useYouTubeSync","_s","state","setState","loading","error","channel","podcastId","videos","episodes","progress","total","done","status","useEffect","channelData","videosData","localStorage","getItem","length","s","isYouTubeConnected","id","connectYouTube","success","syncToMegaphone","warning","userInfo","videoIds","map","v","videoId","filter","Boolean","result","successful","failed","summary","results","r","title","publishedAt","Date","toISOString","mp4Url","publishedToMegaphone","undefined","Error","err","console","message","refreshData"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useYouTubeSync.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { createEpisodes } from '../services/n8nApi';\nimport { toast } from 'react-toastify';\nimport { safeGetItem } from '../utils/localStorage';\n\n\nexport function useYouTubeSync() {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    channel: null,\n    podcastId: null,\n    videos: [],\n    episodes: [],\n    progress: 0,\n    total: 0,\n    done: false,\n    status: '',\n  });\n  \n  // Load data from localStorage on mount\n  React.useEffect(() => {\n    const channelData = safeGetItem('channelData');\n    const videosData = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    \n    if (channelData || videosData?.length > 0 || podcastId) {\n      setState(s => ({\n        ...s,\n        channel: channelData,\n        videos: videosData,\n        podcastId: podcastId || null\n      }));\n    }\n  }, []);\n\n  // Helper: is YouTube connected?\n  const isYouTubeConnected = !!(state.channel && state.channel.id);\n\n  // Connect YouTube data is now handled by n8n in GoogleAuth\n  // This hook now focuses on episode management\n  const connectYouTube = useCallback(async () => {\n    // Data should already be loaded from localStorage\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    \n    setState(s => ({ ...s, channel, videos, podcastId, loading: false }));\n    \n    return { channel, videos, podcastId, success: true };\n  }, []);\n\n  // Create episodes using n8n workflow\n  const syncToMegaphone = useCallback(async (videos) => {\n    if (!videos || videos.length === 0) {\n      toast.warning('No videos to sync');\n      return;\n    }\n    \n    setState(s => ({ ...s, loading: true, progress: 0, total: videos.length, done: false, episodes: [], status: 'Creating podcast episodes...' }));\n    const podcastId = state.podcastId || localStorage.getItem('podcastId') || '';\n    const userInfo = safeGetItem('user_info', {});\n    \n    if (!podcastId) {\n      setState(s => ({ ...s, error: 'No podcast ID found. Please reconnect your YouTube channel.', loading: false }));\n      return;\n    }\n    \n    try {\n      // Extract video IDs for n8n workflow\n      const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n      \n      // Call n8n episode creation workflow\n      const result = await createEpisodes(podcastId, videoIds, userInfo.id);\n      \n      if (result.success) {\n        const { successful, failed, total } = result.summary;\n        \n        // Update state with episode results\n        const episodes = result.results.map(r => ({\n          id: r.videoId,\n          title: r.title,\n          publishedAt: new Date().toISOString(),\n          mp4Url: `https://youtube.com/watch?v=${r.videoId}`,\n          publishedToMegaphone: r.status === 'created',\n          error: r.status === 'failed' ? 'Episode creation failed' : undefined\n        }));\n        \n        setState(s => ({ \n          ...s, \n          episodes, \n          progress: total, \n          total, \n          done: true, \n          loading: false, \n          status: `Sync complete! ${successful} successful, ${failed} failed` \n        }));\n        \n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n      \n    } catch (err) {\n      console.error('Episode creation process failed:', err);\n      setState(s => ({ ...s, error: err.message, loading: false, status: '' }));\n      toast.error('Episode creation failed: ' + err.message);\n    }\n  }, [state.podcastId]);\n\n  // Refresh data from localStorage\n  const refreshData = useCallback(() => {\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    \n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId: podcastId || null\n    }));\n  }, []);\n\n  return {\n    ...state,\n    connectYouTube,\n    syncToMegaphone,\n    isYouTubeConnected,\n    refreshData,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
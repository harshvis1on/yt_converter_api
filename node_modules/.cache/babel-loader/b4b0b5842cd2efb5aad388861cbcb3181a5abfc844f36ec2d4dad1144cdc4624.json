{"ast":null,"code":"import React,{useState,useCallback}from'react';import{createEpisodes}from'../services/n8nApi';import{toast}from'react-toastify';import{safeGetItem}from'../utils/localStorage';export function useYouTubeSync(){const[state,setState]=useState({loading:false,error:null,channel:null,podcastId:null,videos:[],episodes:[],progress:0,total:0,done:false,status:'',selectedVideos:[]});// Load data from localStorage on mount\nReact.useEffect(()=>{const channelData=safeGetItem('channelData');const videosData=safeGetItem('videosData',[]);// Try multiple sources for podcast ID\nlet podcastId=localStorage.getItem('podcastId');if(!podcastId){const currentPodcast=safeGetItem('currentPodcast');podcastId=(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.megaphone_id)||(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.id);}if(channelData||(videosData===null||videosData===void 0?void 0:videosData.length)>0||podcastId){setState(s=>({...s,channel:channelData,videos:videosData,podcastId:podcastId||null}));}},[]);// Helper: is YouTube connected?\nconst isYouTubeConnected=!!(state.channel&&state.channel.id);// Connect YouTube data - re-fetch if not available\nconst connectYouTube=useCallback(async()=>{setState(s=>({...s,loading:true,error:null}));try{// First check if data already exists in localStorage\nlet channel=safeGetItem('channelData');let videos=safeGetItem('videosData',[]);const podcastId=localStorage.getItem('podcastId');// If no YouTube data exists, we need to re-authenticate\nif(!channel||!videos||videos.length===0){console.log('🔄 No YouTube data found, need to re-authenticate...');// Check if we have a Google token\nconst googleToken=localStorage.getItem('google_token');if(!googleToken){throw new Error('No Google authentication found. Please sign in again.');}// Re-fetch YouTube data using existing token\nconst userInfo=safeGetItem('user_info',{});if(!userInfo.id){throw new Error('User information not found. Please sign in again.');}console.log('🔄 Re-fetching YouTube data with existing token...');const{syncYouTubeChannel}=await import('../services/n8nApi');const result=await syncYouTubeChannel(googleToken,userInfo.id);if(result&&result.success){// Store the fetched data\nlocalStorage.setItem('channelData',JSON.stringify(result.channel));localStorage.setItem('videosData',JSON.stringify(result.videos));channel=result.channel;videos=result.videos;console.log('✅ YouTube data re-fetched successfully');}else{// Check if it's a token expiry issue\nconst errorMsg=(result===null||result===void 0?void 0:result.message)||'Failed to fetch YouTube data';if(errorMsg.includes('401')||errorMsg.includes('Unauthorized')||errorMsg.includes('token')||errorMsg.includes('auth')){throw new Error('Google authentication expired. Please sign out and sign in again to refresh your YouTube connection.');}throw new Error(errorMsg);}}// Try multiple sources for podcast ID - prioritize megaphone_id for API calls\nlet finalPodcastId=podcastId||localStorage.getItem('podcastId');if(!finalPodcastId){const currentPodcast=safeGetItem('currentPodcast');finalPodcastId=(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.megaphone_id)||(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.id);}setState(s=>({...s,channel,videos,podcastId:finalPodcastId||null,loading:false}));return{channel,videos,podcastId,success:true};}catch(error){console.error('❌ Failed to connect YouTube:',error);setState(s=>({...s,error:error.message,loading:false}));return{success:false,error:error.message};}},[]);// Create episodes using n8n workflow\nconst syncToMegaphone=useCallback(async videos=>{if(!videos||videos.length===0){toast.warning('No videos to sync');return;}setState(s=>({...s,loading:true,progress:0,total:videos.length,done:false,episodes:[],error:null,// Clear any previous errors\nstatus:'Creating podcast episodes...'}));// Try multiple sources for podcast ID - prioritize megaphone_id for API calls\nlet podcastId=state.podcastId||localStorage.getItem('podcastId');if(!podcastId){const currentPodcast=safeGetItem('currentPodcast');podcastId=(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.megaphone_id)||(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.id);}const userInfo=safeGetItem('user_info',{});if(!podcastId){setState(s=>({...s,error:'No podcast ID found. Please ensure your podcast is properly set up.',loading:false}));return;}try{// Send full video objects with metadata instead of just IDs\nconst videoIds=videos.map(v=>v.id||v.videoId).filter(Boolean);const videoObjects=videos.map(v=>({videoId:v.id||v.videoId,title:v.title,description:v.description,publishedAt:v.publishedAt,thumbnail:v.thumbnail,duration:v.duration||null}));console.log('🎥 Creating episodes for videos:',videoIds);console.log('📊 Full video objects:',videoObjects);console.log('📋 Using podcast ID:',podcastId);console.log('👤 Using user ID:',userInfo.id);// Get user's podcast preference for audio/video from Supabase data\nconst currentPodcast=safeGetItem('currentPodcast',{});const distributionType=currentPodcast.distribution_type||currentPodcast.distributionType||'audio';// Check both field names, default to audio\nconsole.log('🎧 Distribution type from podcast data:',distributionType);// Call n8n episode creation workflow with full video data\nconsole.log('🚀 About to call n8n createEpisodes API with full video data');const result=await createEpisodes(podcastId,videoObjects,userInfo.id,distributionType);console.log('📤 createEpisodes result:',result);if(result&&result.success){const{successful,failed,total}=result.summary||{successful:0,failed:0,total:0};// Handle different response structures - n8n can return 'episodes' or 'results'\nconst episodeData=result.episodes||result.results||[];console.log('🔍 Episode data found:',episodeData);// Update state with episode results\nconst episodes=episodeData.map(r=>({id:r.videoId,title:r.title,publishedAt:r.publishedAt||new Date().toISOString(),mp4Url:`https://youtube.com/watch?v=${r.videoId}`,publishedToMegaphone:r.status==='created',error:r.status==='failed'?'Episode creation failed':undefined}));setState(s=>({...s,episodes,progress:total,total,done:true,loading:false,status:`Sync complete! ${successful} successful, ${failed} failed`}));// Return the result with consistent structure\nreturn{...result,episodes:episodeData,// Ensure episodes are accessible\nresults:episodeData// Keep both for backward compatibility\n};}else{const errorMsg=(result===null||result===void 0?void 0:result.error)||(result===null||result===void 0?void 0:result.message)||'Episode creation failed - no response from server';console.error('❌ Episode creation failed:',result);throw new Error(errorMsg);}}catch(err){console.error('Episode creation process failed:',err);setState(s=>({...s,error:err.message,loading:false,status:'',episodes:[],// Clear any partial episodes on error\ndone:false}));toast.error('Episode creation failed: '+err.message);throw err;}},[state.podcastId]);// Video selection methods\nconst selectVideo=useCallback(videoId=>{setState(s=>{const currentSelected=s.selectedVideos||[];if(currentSelected.includes(videoId)){return s;// Already selected, no change\n}return{...s,selectedVideos:[...currentSelected,videoId]};});},[]);const deselectVideo=useCallback(videoId=>{setState(s=>{const currentSelected=s.selectedVideos||[];if(!currentSelected.includes(videoId)){return s;// Not selected, no change\n}return{...s,selectedVideos:currentSelected.filter(id=>id!==videoId)};});},[]);const selectAllVideos=useCallback(videos=>{const videoIds=videos.map(v=>v.id||v.videoId).filter(Boolean);setState(s=>{const currentSelected=s.selectedVideos||[];const newSelected=[...new Set([...currentSelected,...videoIds])];if(newSelected.length===currentSelected.length){return s;// No change\n}return{...s,selectedVideos:newSelected};});},[]);const deselectAllVideos=useCallback(()=>{setState(s=>{if(!s.selectedVideos||s.selectedVideos.length===0){return s;// Already empty, no change\n}return{...s,selectedVideos:[]};});},[]);const isVideoSelected=useCallback(videoId=>{return(state.selectedVideos||[]).includes(videoId);},[state.selectedVideos]);const handleCreateEpisodes=useCallback(async()=>{var _state$videos,_state$selectedVideos;console.log('🎬 createEpisodes called in hook');console.log('📊 Current state:',{videos:((_state$videos=state.videos)===null||_state$videos===void 0?void 0:_state$videos.length)||0,selectedVideos:((_state$selectedVideos=state.selectedVideos)===null||_state$selectedVideos===void 0?void 0:_state$selectedVideos.length)||0,selectedVideoIds:state.selectedVideos,loading:state.loading});// Prevent duplicate calls if already loading\nif(state.loading){console.log('⏳ Episode creation already in progress, skipping duplicate call');return;}const selectedVideoObjects=state.videos.filter(v=>{const videoId=v.id||v.videoId;return state.selectedVideos.includes(videoId);});console.log('🎯 Filtered selectedVideoObjects:',selectedVideoObjects);if(selectedVideoObjects.length===0){console.warn('⚠️ No videos selected for episode creation');throw new Error('No videos selected for episode creation');}console.log('📞 Calling syncToMegaphone with',selectedVideoObjects.length,'videos');return await syncToMegaphone(selectedVideoObjects);},[state.videos,state.selectedVideos,state.loading,syncToMegaphone]);// Refresh data from localStorage\nconst refreshData=useCallback(()=>{const channel=safeGetItem('channelData');const videos=safeGetItem('videosData',[]);// Try multiple sources for podcast ID\nlet podcastId=localStorage.getItem('podcastId');if(!podcastId){const currentPodcast=safeGetItem('currentPodcast');podcastId=(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.megaphone_id)||(currentPodcast===null||currentPodcast===void 0?void 0:currentPodcast.id);}setState(s=>({...s,channel,videos,podcastId:podcastId||null}));},[]);return{...state,connectYouTube,syncToMegaphone,isYouTubeConnected,refreshData,selectVideo,deselectVideo,selectAllVideos,deselectAllVideos,isVideoSelected,createEpisodes:handleCreateEpisodes};}","map":{"version":3,"names":["React","useState","useCallback","createEpisodes","toast","safeGetItem","useYouTubeSync","state","setState","loading","error","channel","podcastId","videos","episodes","progress","total","done","status","selectedVideos","useEffect","channelData","videosData","localStorage","getItem","currentPodcast","megaphone_id","id","length","s","isYouTubeConnected","connectYouTube","console","log","googleToken","Error","userInfo","syncYouTubeChannel","result","success","setItem","JSON","stringify","errorMsg","message","includes","finalPodcastId","syncToMegaphone","warning","videoIds","map","v","videoId","filter","Boolean","videoObjects","title","description","publishedAt","thumbnail","duration","distributionType","distribution_type","successful","failed","summary","episodeData","results","r","Date","toISOString","mp4Url","publishedToMegaphone","undefined","err","selectVideo","currentSelected","deselectVideo","selectAllVideos","newSelected","Set","deselectAllVideos","isVideoSelected","handleCreateEpisodes","_state$videos","_state$selectedVideos","selectedVideoIds","selectedVideoObjects","warn","refreshData"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useYouTubeSync.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { createEpisodes } from '../services/n8nApi';\nimport { toast } from 'react-toastify';\nimport { safeGetItem } from '../utils/localStorage';\n\n\nexport function useYouTubeSync() {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    channel: null,\n    podcastId: null,\n    videos: [],\n    episodes: [],\n    progress: 0,\n    total: 0,\n    done: false,\n    status: '',\n    selectedVideos: [],\n  });\n  \n  // Load data from localStorage on mount\n  React.useEffect(() => {\n    const channelData = safeGetItem('channelData');\n    const videosData = safeGetItem('videosData', []);\n    \n    // Try multiple sources for podcast ID\n    let podcastId = localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = currentPodcast?.megaphone_id || currentPodcast?.id;\n    }\n    \n    if (channelData || videosData?.length > 0 || podcastId) {\n      setState(s => ({\n        ...s,\n        channel: channelData,\n        videos: videosData,\n        podcastId: podcastId || null\n      }));\n    }\n  }, []);\n\n  // Helper: is YouTube connected?\n  const isYouTubeConnected = !!(state.channel && state.channel.id);\n\n  // Connect YouTube data - re-fetch if not available\n  const connectYouTube = useCallback(async () => {\n    setState(s => ({ ...s, loading: true, error: null }));\n    \n    try {\n      // First check if data already exists in localStorage\n      let channel = safeGetItem('channelData');\n      let videos = safeGetItem('videosData', []);\n      const podcastId = localStorage.getItem('podcastId');\n      \n      // If no YouTube data exists, we need to re-authenticate\n      if (!channel || !videos || videos.length === 0) {\n        console.log('🔄 No YouTube data found, need to re-authenticate...');\n        \n        // Check if we have a Google token\n        const googleToken = localStorage.getItem('google_token');\n        if (!googleToken) {\n          throw new Error('No Google authentication found. Please sign in again.');\n        }\n        \n        // Re-fetch YouTube data using existing token\n        const userInfo = safeGetItem('user_info', {});\n        if (!userInfo.id) {\n          throw new Error('User information not found. Please sign in again.');\n        }\n        \n        console.log('🔄 Re-fetching YouTube data with existing token...');\n        const { syncYouTubeChannel } = await import('../services/n8nApi');\n        const result = await syncYouTubeChannel(googleToken, userInfo.id);\n        \n        if (result && result.success) {\n          // Store the fetched data\n          localStorage.setItem('channelData', JSON.stringify(result.channel));\n          localStorage.setItem('videosData', JSON.stringify(result.videos));\n          \n          channel = result.channel;\n          videos = result.videos;\n          \n          console.log('✅ YouTube data re-fetched successfully');\n        } else {\n          // Check if it's a token expiry issue\n          const errorMsg = result?.message || 'Failed to fetch YouTube data';\n          if (errorMsg.includes('401') || errorMsg.includes('Unauthorized') || \n              errorMsg.includes('token') || errorMsg.includes('auth')) {\n            throw new Error('Google authentication expired. Please sign out and sign in again to refresh your YouTube connection.');\n          }\n          throw new Error(errorMsg);\n        }\n      }\n      \n      // Try multiple sources for podcast ID - prioritize megaphone_id for API calls\n      let finalPodcastId = podcastId || localStorage.getItem('podcastId');\n      if (!finalPodcastId) {\n        const currentPodcast = safeGetItem('currentPodcast');\n        finalPodcastId = currentPodcast?.megaphone_id || currentPodcast?.id;\n      }\n      \n      setState(s => ({ \n        ...s, \n        channel, \n        videos, \n        podcastId: finalPodcastId || null, \n        loading: false \n      }));\n      \n      return { channel, videos, podcastId, success: true };\n      \n    } catch (error) {\n      console.error('❌ Failed to connect YouTube:', error);\n      setState(s => ({ \n        ...s, \n        error: error.message, \n        loading: false \n      }));\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  // Create episodes using n8n workflow\n  const syncToMegaphone = useCallback(async (videos) => {\n    if (!videos || videos.length === 0) {\n      toast.warning('No videos to sync');\n      return;\n    }\n    \n    setState(s => ({ \n      ...s, \n      loading: true, \n      progress: 0, \n      total: videos.length, \n      done: false, \n      episodes: [], \n      error: null, // Clear any previous errors\n      status: 'Creating podcast episodes...' \n    }));\n    \n    // Try multiple sources for podcast ID - prioritize megaphone_id for API calls\n    let podcastId = state.podcastId || localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = currentPodcast?.megaphone_id || currentPodcast?.id;\n    }\n    \n    const userInfo = safeGetItem('user_info', {});\n    \n    if (!podcastId) {\n      setState(s => ({ ...s, error: 'No podcast ID found. Please ensure your podcast is properly set up.', loading: false }));\n      return;\n    }\n    \n    try {\n      // Send full video objects with metadata instead of just IDs\n      const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n      const videoObjects = videos.map(v => ({\n        videoId: v.id || v.videoId,\n        title: v.title,\n        description: v.description,\n        publishedAt: v.publishedAt,\n        thumbnail: v.thumbnail,\n        duration: v.duration || null\n      }));\n      \n      console.log('🎥 Creating episodes for videos:', videoIds);\n      console.log('📊 Full video objects:', videoObjects);\n      console.log('📋 Using podcast ID:', podcastId);\n      console.log('👤 Using user ID:', userInfo.id);\n      \n      // Get user's podcast preference for audio/video from Supabase data\n      const currentPodcast = safeGetItem('currentPodcast', {});\n      const distributionType = currentPodcast.distribution_type || currentPodcast.distributionType || 'audio'; // Check both field names, default to audio\n      \n      console.log('🎧 Distribution type from podcast data:', distributionType);\n      \n      // Call n8n episode creation workflow with full video data\n      console.log('🚀 About to call n8n createEpisodes API with full video data');\n      const result = await createEpisodes(podcastId, videoObjects, userInfo.id, distributionType);\n      \n      console.log('📤 createEpisodes result:', result);\n      \n      if (result && result.success) {\n        const { successful, failed, total } = result.summary || { successful: 0, failed: 0, total: 0 };\n        \n        // Handle different response structures - n8n can return 'episodes' or 'results'\n        const episodeData = result.episodes || result.results || [];\n        console.log('🔍 Episode data found:', episodeData);\n        \n        // Update state with episode results\n        const episodes = episodeData.map(r => ({\n          id: r.videoId,\n          title: r.title,\n          publishedAt: r.publishedAt || new Date().toISOString(),\n          mp4Url: `https://youtube.com/watch?v=${r.videoId}`,\n          publishedToMegaphone: r.status === 'created',\n          error: r.status === 'failed' ? 'Episode creation failed' : undefined\n        }));\n        \n        setState(s => ({ \n          ...s, \n          episodes, \n          progress: total, \n          total, \n          done: true, \n          loading: false, \n          status: `Sync complete! ${successful} successful, ${failed} failed` \n        }));\n        \n        // Return the result with consistent structure\n        return {\n          ...result,\n          episodes: episodeData, // Ensure episodes are accessible\n          results: episodeData   // Keep both for backward compatibility\n        };\n      } else {\n        const errorMsg = result?.error || result?.message || 'Episode creation failed - no response from server';\n        console.error('❌ Episode creation failed:', result);\n        throw new Error(errorMsg);\n      }\n      \n    } catch (err) {\n      console.error('Episode creation process failed:', err);\n      setState(s => ({ \n        ...s, \n        error: err.message, \n        loading: false, \n        status: '', \n        episodes: [], // Clear any partial episodes on error\n        done: false \n      }));\n      toast.error('Episode creation failed: ' + err.message);\n      throw err;\n    }\n  }, [state.podcastId]);\n\n  // Video selection methods\n  const selectVideo = useCallback((videoId) => {\n    setState(s => {\n      const currentSelected = s.selectedVideos || [];\n      if (currentSelected.includes(videoId)) {\n        return s; // Already selected, no change\n      }\n      return {\n        ...s,\n        selectedVideos: [...currentSelected, videoId]\n      };\n    });\n  }, []);\n\n  const deselectVideo = useCallback((videoId) => {\n    setState(s => {\n      const currentSelected = s.selectedVideos || [];\n      if (!currentSelected.includes(videoId)) {\n        return s; // Not selected, no change\n      }\n      return {\n        ...s,\n        selectedVideos: currentSelected.filter(id => id !== videoId)\n      };\n    });\n  }, []);\n\n  const selectAllVideos = useCallback((videos) => {\n    const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n    setState(s => {\n      const currentSelected = s.selectedVideos || [];\n      const newSelected = [...new Set([...currentSelected, ...videoIds])];\n      if (newSelected.length === currentSelected.length) {\n        return s; // No change\n      }\n      return {\n        ...s,\n        selectedVideos: newSelected\n      };\n    });\n  }, []);\n\n  const deselectAllVideos = useCallback(() => {\n    setState(s => {\n      if (!s.selectedVideos || s.selectedVideos.length === 0) {\n        return s; // Already empty, no change\n      }\n      return {\n        ...s,\n        selectedVideos: []\n      };\n    });\n  }, []);\n\n  const isVideoSelected = useCallback((videoId) => {\n    return (state.selectedVideos || []).includes(videoId);\n  }, [state.selectedVideos]);\n\n  const handleCreateEpisodes = useCallback(async () => {\n    console.log('🎬 createEpisodes called in hook');\n    console.log('📊 Current state:', {\n      videos: state.videos?.length || 0,\n      selectedVideos: state.selectedVideos?.length || 0,\n      selectedVideoIds: state.selectedVideos,\n      loading: state.loading\n    });\n    \n    // Prevent duplicate calls if already loading\n    if (state.loading) {\n      console.log('⏳ Episode creation already in progress, skipping duplicate call');\n      return;\n    }\n    \n    const selectedVideoObjects = state.videos.filter(v => {\n      const videoId = v.id || v.videoId;\n      return state.selectedVideos.includes(videoId);\n    });\n    \n    console.log('🎯 Filtered selectedVideoObjects:', selectedVideoObjects);\n    \n    if (selectedVideoObjects.length === 0) {\n      console.warn('⚠️ No videos selected for episode creation');\n      throw new Error('No videos selected for episode creation');\n    }\n    \n    console.log('📞 Calling syncToMegaphone with', selectedVideoObjects.length, 'videos');\n    return await syncToMegaphone(selectedVideoObjects);\n  }, [state.videos, state.selectedVideos, state.loading, syncToMegaphone]);\n\n  // Refresh data from localStorage\n  const refreshData = useCallback(() => {\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    \n    // Try multiple sources for podcast ID\n    let podcastId = localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = currentPodcast?.megaphone_id || currentPodcast?.id;\n    }\n    \n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId: podcastId || null\n    }));\n  }, []);\n\n  return {\n    ...state,\n    connectYouTube,\n    syncToMegaphone,\n    isYouTubeConnected,\n    refreshData,\n    selectVideo,\n    deselectVideo,\n    selectAllVideos,\n    deselectAllVideos,\n    isVideoSelected,\n    createEpisodes: handleCreateEpisodes,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
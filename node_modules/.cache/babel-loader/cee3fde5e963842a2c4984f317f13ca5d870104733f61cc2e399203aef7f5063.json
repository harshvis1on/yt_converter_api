{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\nexport function useEpisodes(megaphoneId) {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0,\n    n8nEpisodes: [] // Track n8n episodes separately\n  });\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({\n        ...s,\n        loading: true,\n        error: null\n      }));\n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n\n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      if (result.success) {\n        console.log('📊 Raw episodes from Supabase:', result.episodes);\n        let transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        console.log('🔄 Transformed episodes:', transformedEpisodes.map(ep => ({\n          id: ep.id,\n          title: ep.title,\n          status: ep.status,\n          source: ep.source\n        })));\n\n        // TODO: Enrich episodes with Megaphone API status when n8n proxy is ready\n        // For now, skip Megaphone API calls due to CORS restrictions\n        console.log('⚠️ Megaphone API enrichment temporarily disabled due to CORS restrictions');\n        console.log('💡 Use n8n proxy workflow to enable real-time status updates');\n        setState(s => ({\n          ...s,\n          episodes: transformedEpisodes,\n          totalCount: result.totalCount,\n          loading: false\n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({\n        ...s,\n        error: error.message,\n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n  const refreshEpisodes = async () => {\n    if (megaphoneId) {\n      await loadEpisodes();\n    }\n  };\n\n  // Add newly created episodes from n8n workflow results\n  const addN8nEpisodes = (n8nResults, originalVideoData = null) => {\n    console.log('📺 Adding n8n episodes to display:', n8nResults);\n    if (!n8nResults || !Array.isArray(n8nResults)) {\n      console.warn('Invalid n8n results provided:', n8nResults);\n      return;\n    }\n\n    // Transform n8n data for display, optionally with original video data for better titles\n    const transformedN8nEpisodes = episodeService.transformN8nEpisodeData(n8nResults, originalVideoData);\n    setState(s => {\n      // Remove any existing n8n episodes with same IDs to avoid duplicates\n      const existingEpisodes = s.episodes.filter(ep => ep.source !== 'n8n');\n      const combinedEpisodes = [...transformedN8nEpisodes, ...existingEpisodes];\n      console.log(`✅ Added ${transformedN8nEpisodes.length} n8n episodes to display`);\n      return {\n        ...s,\n        episodes: combinedEpisodes,\n        n8nEpisodes: transformedN8nEpisodes,\n        totalCount: combinedEpisodes.length\n      };\n    });\n\n    // Refresh from Supabase after a delay to get the persisted data\n    setTimeout(async () => {\n      console.log('🔄 Refreshing episodes from Supabase after n8n creation...');\n      console.log('📊 Current episodes before refresh:', transformedN8nEpisodes.map(ep => ({\n        id: ep.id,\n        videoId: ep.videoId,\n        source: ep.source\n      })));\n\n      // Store the video IDs of newly created episodes for comparison\n      const newlyCreatedVideoIds = transformedN8nEpisodes.map(ep => ep.videoId);\n      console.log('🎯 Newly created video IDs:', newlyCreatedVideoIds);\n\n      // Clear all n8n episodes first\n      setState(s => ({\n        ...s,\n        episodes: s.episodes.filter(ep => ep.source !== 'n8n'),\n        n8nEpisodes: []\n      }));\n\n      // Then refresh from Supabase to get the permanent data\n      await refreshEpisodes();\n      console.log('✅ Removed temporary n8n episodes and refreshed from Supabase');\n    }, 5000); // Increased to 5 seconds to give Supabase more time to sync\n  };\n\n  // Clear n8n episodes (when they've been persisted to Supabase)\n  const clearN8nEpisodes = () => {\n    setState(s => ({\n      ...s,\n      n8nEpisodes: [],\n      episodes: s.episodes.filter(ep => ep.source !== 'n8n')\n    }));\n  };\n  return {\n    ...state,\n    refreshEpisodes,\n    addN8nEpisodes,\n    clearN8nEpisodes\n  };\n}\n_s(useEpisodes, \"lQQLJ/8lL6T0PT/shlfZISENTmw=\");","map":{"version":3,"names":["useState","useEffect","episodeService","useEpisodes","megaphoneId","_s","state","setState","loading","error","episodes","totalCount","n8nEpisodes","loadEpisodes","s","console","log","podcastId","getPodcastIdFromMegaphoneId","Error","result","getEpisodesFromSupabase","success","transformedEpisodes","transformEpisodeData","map","ep","id","title","status","source","length","message","refreshEpisodes","addN8nEpisodes","n8nResults","originalVideoData","Array","isArray","warn","transformedN8nEpisodes","transformN8nEpisodeData","existingEpisodes","filter","combinedEpisodes","setTimeout","videoId","newlyCreatedVideoIds","clearN8nEpisodes"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useEpisodes.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\n\nexport function useEpisodes(megaphoneId) {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0,\n    n8nEpisodes: [] // Track n8n episodes separately\n  });\n\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({ ...s, loading: true, error: null }));\n      \n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n      \n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      \n      if (result.success) {\n        console.log('📊 Raw episodes from Supabase:', result.episodes);\n        let transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        console.log('🔄 Transformed episodes:', transformedEpisodes.map(ep => ({ \n          id: ep.id, \n          title: ep.title, \n          status: ep.status, \n          source: ep.source \n        })));\n        \n        // TODO: Enrich episodes with Megaphone API status when n8n proxy is ready\n        // For now, skip Megaphone API calls due to CORS restrictions\n        console.log('⚠️ Megaphone API enrichment temporarily disabled due to CORS restrictions');\n        console.log('💡 Use n8n proxy workflow to enable real-time status updates');\n        \n        setState(s => ({ \n          ...s, \n          episodes: transformedEpisodes, \n          totalCount: result.totalCount,\n          loading: false \n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({ \n        ...s, \n        error: error.message, \n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n\n  const refreshEpisodes = async () => {\n    if (megaphoneId) {\n      await loadEpisodes();\n    }\n  };\n\n  // Add newly created episodes from n8n workflow results\n  const addN8nEpisodes = (n8nResults, originalVideoData = null) => {\n    console.log('📺 Adding n8n episodes to display:', n8nResults);\n    \n    if (!n8nResults || !Array.isArray(n8nResults)) {\n      console.warn('Invalid n8n results provided:', n8nResults);\n      return;\n    }\n\n    // Transform n8n data for display, optionally with original video data for better titles\n    const transformedN8nEpisodes = episodeService.transformN8nEpisodeData(n8nResults, originalVideoData);\n    \n    setState(s => {\n      // Remove any existing n8n episodes with same IDs to avoid duplicates\n      const existingEpisodes = s.episodes.filter(ep => ep.source !== 'n8n');\n      const combinedEpisodes = [...transformedN8nEpisodes, ...existingEpisodes];\n      \n      console.log(`✅ Added ${transformedN8nEpisodes.length} n8n episodes to display`);\n      \n      return {\n        ...s,\n        episodes: combinedEpisodes,\n        n8nEpisodes: transformedN8nEpisodes,\n        totalCount: combinedEpisodes.length\n      };\n    });\n\n    // Refresh from Supabase after a delay to get the persisted data\n    setTimeout(async () => {\n      console.log('🔄 Refreshing episodes from Supabase after n8n creation...');\n      console.log('📊 Current episodes before refresh:', transformedN8nEpisodes.map(ep => ({ id: ep.id, videoId: ep.videoId, source: ep.source })));\n      \n      // Store the video IDs of newly created episodes for comparison\n      const newlyCreatedVideoIds = transformedN8nEpisodes.map(ep => ep.videoId);\n      console.log('🎯 Newly created video IDs:', newlyCreatedVideoIds);\n      \n      // Clear all n8n episodes first\n      setState(s => ({\n        ...s,\n        episodes: s.episodes.filter(ep => ep.source !== 'n8n'),\n        n8nEpisodes: []\n      }));\n      \n      // Then refresh from Supabase to get the permanent data\n      await refreshEpisodes();\n      console.log('✅ Removed temporary n8n episodes and refreshed from Supabase');\n    }, 5000); // Increased to 5 seconds to give Supabase more time to sync\n  };\n\n  // Clear n8n episodes (when they've been persisted to Supabase)\n  const clearN8nEpisodes = () => {\n    setState(s => ({\n      ...s,\n      n8nEpisodes: [],\n      episodes: s.episodes.filter(ep => ep.source !== 'n8n')\n    }));\n  };\n\n  return {\n    ...state,\n    refreshEpisodes,\n    addN8nEpisodes,\n    clearN8nEpisodes\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
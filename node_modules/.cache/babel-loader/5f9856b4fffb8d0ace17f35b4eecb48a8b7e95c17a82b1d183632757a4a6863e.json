{"ast":null,"code":"// Megaphone API Service for fetching episode status and data via n8n proxy\nimport{n8nApi}from'./n8nApi';class MegaphoneApiService{constructor(){this.apiToken=process.env.REACT_APP_MEGAPHONE_API_TOKEN;this.networkId=process.env.REACT_APP_MEGAPHONE_NETWORK_ID;}// Fetch episode details via n8n proxy (to avoid CORS issues)\nasync getEpisodeStatus(podcastId,episodeId){if(!this.apiToken||!this.networkId){console.warn('⚠️ Megaphone API credentials not configured');return null;}try{console.log(`🎧 Fetching episode status via n8n proxy:`,{podcastId,episodeId});// Call n8n workflow that will proxy the Megaphone API request\nconst result=await n8nApi.makeRequest('get-episode-status',{podcastId:podcastId,episodeId:episodeId,apiToken:this.apiToken});if(!result||!result.success){console.warn(`📻 Episode ${episodeId} not found or API error`);return null;}console.log(`✅ Retrieved episode data via n8n:`,result.episode);// Transform Megaphone status to our UI status\nconst status=this.transformMegaphoneStatus(result.episode.status);return{status,originalStatus:result.episode.status,publishedAt:result.episode.published_at,createdAt:result.episode.created_at,updatedAt:result.episode.updated_at,title:result.episode.title,summary:result.episode.summary,uid:result.episode.uid,rawData:result.episode};}catch(error){console.error(`❌ Failed to fetch episode status via n8n:`,error);return null;}}// Transform Megaphone status to UI-friendly status\ntransformMegaphoneStatus(megaphoneStatus){if(!megaphoneStatus)return'Processing';switch(megaphoneStatus.toLowerCase()){case'published':return'Live';case'scheduled':return'Scheduled';case'draft':return'Draft';case'processing':return'Processing';default:console.log(`🔍 Unknown Megaphone status: \"${megaphoneStatus}\"`);return'Processing';}}// Fetch multiple episodes status in parallel\nasync getMultipleEpisodeStatus(episodes){if(!episodes||episodes.length===0)return[];console.log(`🎧 Fetching status for ${episodes.length} episodes from Megaphone API`);const statusPromises=episodes.map(async episode=>{if(!episode.megaphoneEpisodeId||!episode.podcastId){console.warn(`⚠️ Missing IDs for episode ${episode.id}:`,{megaphoneEpisodeId:episode.megaphoneEpisodeId,podcastId:episode.podcastId});return{...episode,megaphoneStatus:null};}const statusData=await this.getEpisodeStatus(episode.podcastId,episode.megaphoneEpisodeId);return{...episode,megaphoneStatus:statusData};});try{const results=await Promise.allSettled(statusPromises);return results.map((result,index)=>{if(result.status==='fulfilled'){return result.value;}else{console.error(`❌ Failed to fetch status for episode ${episodes[index].id}:`,result.reason);return{...episodes[index],megaphoneStatus:null};}});}catch(error){console.error('❌ Error in batch episode status fetch:',error);return episodes.map(episode=>({...episode,megaphoneStatus:null}));}}}export const megaphoneApiService=new MegaphoneApiService();export default megaphoneApiService;","map":{"version":3,"names":["n8nApi","MegaphoneApiService","constructor","apiToken","process","env","REACT_APP_MEGAPHONE_API_TOKEN","networkId","REACT_APP_MEGAPHONE_NETWORK_ID","getEpisodeStatus","podcastId","episodeId","console","warn","log","result","makeRequest","success","episode","status","transformMegaphoneStatus","originalStatus","publishedAt","published_at","createdAt","created_at","updatedAt","updated_at","title","summary","uid","rawData","error","megaphoneStatus","toLowerCase","getMultipleEpisodeStatus","episodes","length","statusPromises","map","megaphoneEpisodeId","id","statusData","results","Promise","allSettled","index","value","reason","megaphoneApiService"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/megaphoneApi.js"],"sourcesContent":["// Megaphone API Service for fetching episode status and data via n8n proxy\nimport { n8nApi } from './n8nApi';\n\nclass MegaphoneApiService {\n  constructor() {\n    this.apiToken = process.env.REACT_APP_MEGAPHONE_API_TOKEN;\n    this.networkId = process.env.REACT_APP_MEGAPHONE_NETWORK_ID;\n  }\n\n  // Fetch episode details via n8n proxy (to avoid CORS issues)\n  async getEpisodeStatus(podcastId, episodeId) {\n    if (!this.apiToken || !this.networkId) {\n      console.warn('⚠️ Megaphone API credentials not configured');\n      return null;\n    }\n\n    try {\n      console.log(`🎧 Fetching episode status via n8n proxy:`, { podcastId, episodeId });\n      \n      // Call n8n workflow that will proxy the Megaphone API request\n      const result = await n8nApi.makeRequest('get-episode-status', {\n        podcastId: podcastId,\n        episodeId: episodeId,\n        apiToken: this.apiToken\n      });\n\n      if (!result || !result.success) {\n        console.warn(`📻 Episode ${episodeId} not found or API error`);\n        return null;\n      }\n\n      console.log(`✅ Retrieved episode data via n8n:`, result.episode);\n\n      // Transform Megaphone status to our UI status\n      const status = this.transformMegaphoneStatus(result.episode.status);\n      \n      return {\n        status,\n        originalStatus: result.episode.status,\n        publishedAt: result.episode.published_at,\n        createdAt: result.episode.created_at,\n        updatedAt: result.episode.updated_at,\n        title: result.episode.title,\n        summary: result.episode.summary,\n        uid: result.episode.uid,\n        rawData: result.episode\n      };\n\n    } catch (error) {\n      console.error(`❌ Failed to fetch episode status via n8n:`, error);\n      return null;\n    }\n  }\n\n  // Transform Megaphone status to UI-friendly status\n  transformMegaphoneStatus(megaphoneStatus) {\n    if (!megaphoneStatus) return 'Processing';\n    \n    switch (megaphoneStatus.toLowerCase()) {\n      case 'published':\n        return 'Live';\n      case 'scheduled':\n        return 'Scheduled';\n      case 'draft':\n        return 'Draft';\n      case 'processing':\n        return 'Processing';\n      default:\n        console.log(`🔍 Unknown Megaphone status: \"${megaphoneStatus}\"`);\n        return 'Processing';\n    }\n  }\n\n  // Fetch multiple episodes status in parallel\n  async getMultipleEpisodeStatus(episodes) {\n    if (!episodes || episodes.length === 0) return [];\n\n    console.log(`🎧 Fetching status for ${episodes.length} episodes from Megaphone API`);\n    \n    const statusPromises = episodes.map(async (episode) => {\n      if (!episode.megaphoneEpisodeId || !episode.podcastId) {\n        console.warn(`⚠️ Missing IDs for episode ${episode.id}:`, { \n          megaphoneEpisodeId: episode.megaphoneEpisodeId, \n          podcastId: episode.podcastId \n        });\n        return { ...episode, megaphoneStatus: null };\n      }\n\n      const statusData = await this.getEpisodeStatus(episode.podcastId, episode.megaphoneEpisodeId);\n      return {\n        ...episode,\n        megaphoneStatus: statusData\n      };\n    });\n\n    try {\n      const results = await Promise.allSettled(statusPromises);\n      return results.map((result, index) => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          console.error(`❌ Failed to fetch status for episode ${episodes[index].id}:`, result.reason);\n          return { ...episodes[index], megaphoneStatus: null };\n        }\n      });\n    } catch (error) {\n      console.error('❌ Error in batch episode status fetch:', error);\n      return episodes.map(episode => ({ ...episode, megaphoneStatus: null }));\n    }\n  }\n}\n\nexport const megaphoneApiService = new MegaphoneApiService();\nexport default megaphoneApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
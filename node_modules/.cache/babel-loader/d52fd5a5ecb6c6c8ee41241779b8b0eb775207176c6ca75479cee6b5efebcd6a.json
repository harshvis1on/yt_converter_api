{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\nexport function useEpisodes(megaphoneId) {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0\n  });\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({\n        ...s,\n        loading: true,\n        error: null\n      }));\n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n\n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      if (result.success) {\n        const transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        setState(s => ({\n          ...s,\n          episodes: transformedEpisodes,\n          totalCount: result.totalCount,\n          loading: false\n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({\n        ...s,\n        error: error.message,\n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n  const refreshEpisodes = () => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  };\n  return {\n    ...state,\n    refreshEpisodes\n  };\n}\n_s(useEpisodes, \"Wks9zn6r9YasEFbceeNu19sphwM=\");","map":{"version":3,"names":["useState","useEffect","episodeService","useEpisodes","megaphoneId","_s","state","setState","loading","error","episodes","totalCount","loadEpisodes","s","console","log","podcastId","getPodcastIdFromMegaphoneId","Error","result","getEpisodesFromSupabase","success","transformedEpisodes","transformEpisodeData","length","message","refreshEpisodes"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useEpisodes.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\n\nexport function useEpisodes(megaphoneId) {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0\n  });\n\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({ ...s, loading: true, error: null }));\n      \n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n      \n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      \n      if (result.success) {\n        const transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        setState(s => ({ \n          ...s, \n          episodes: transformedEpisodes, \n          totalCount: result.totalCount,\n          loading: false \n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({ \n        ...s, \n        error: error.message, \n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n\n  const refreshEpisodes = () => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  };\n\n  return {\n    ...state,\n    refreshEpisodes\n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,OAAO,SAASC,WAAWA,CAACC,WAAW,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC;IACjCQ,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACd,IAAIG,WAAW,EAAE;MACfQ,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;EAEjB,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFL,QAAQ,CAACM,CAAC,KAAK;QAAE,GAAGA,CAAC;QAAEL,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;MAErDK,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEX,WAAW,CAAC;;MAE/E;MACA,MAAMY,SAAS,GAAG,MAAMd,cAAc,CAACe,2BAA2B,CAACb,WAAW,CAAC;MAC/E,IAAI,CAACY,SAAS,EAAE;QACd,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;MAClD;;MAEA;MACA,MAAMC,MAAM,GAAG,MAAMjB,cAAc,CAACkB,uBAAuB,CAACJ,SAAS,CAAC;MAEtE,IAAIG,MAAM,CAACE,OAAO,EAAE;QAClB,MAAMC,mBAAmB,GAAGpB,cAAc,CAACqB,oBAAoB,CAACJ,MAAM,CAACT,QAAQ,CAAC;QAChFH,QAAQ,CAACM,CAAC,KAAK;UACb,GAAGA,CAAC;UACJH,QAAQ,EAAEY,mBAAmB;UAC7BX,UAAU,EAAEQ,MAAM,CAACR,UAAU;UAC7BH,OAAO,EAAE;QACX,CAAC,CAAC,CAAC;QACHM,OAAO,CAACC,GAAG,CAAC,YAAYO,mBAAmB,CAACE,MAAM,yBAAyB,CAAC;MAC9E,CAAC,MAAM;QACL,MAAM,IAAIN,KAAK,CAACC,MAAM,CAACV,KAAK,IAAI,yBAAyB,CAAC;MAC5D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDF,QAAQ,CAACM,CAAC,KAAK;QACb,GAAGA,CAAC;QACJJ,KAAK,EAAEA,KAAK,CAACgB,OAAO;QACpBjB,OAAO,EAAE,KAAK;QACdE,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE;MACd,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMe,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAItB,WAAW,EAAE;MACfQ,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,OAAO;IACL,GAAGN,KAAK;IACRoB;EACF,CAAC;AACH;AAACrB,EAAA,CA/DeF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
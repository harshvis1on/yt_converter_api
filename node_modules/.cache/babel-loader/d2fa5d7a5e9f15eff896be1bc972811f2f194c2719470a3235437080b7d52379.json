{"ast":null,"code":"// Megaphone API Service for fetching episode status and data\nclass MegaphoneApiService{constructor(){this.apiToken=process.env.REACT_APP_MEGAPHONE_API_TOKEN;this.networkId=process.env.REACT_APP_MEGAPHONE_NETWORK_ID;this.baseUrl='https://cms.megaphone.fm/api';}// Get headers for Megaphone API requests\ngetHeaders(){return{'Authorization':`Token token=\"${this.apiToken}\"`,'Content-Type':'application/json','Accept':'application/json'};}// Fetch episode details from Megaphone API\nasync getEpisodeStatus(podcastId,episodeId){if(!this.apiToken||!this.networkId){console.warn('⚠️ Megaphone API credentials not configured');return null;}try{console.log(`🎧 Fetching episode status from Megaphone API:`,{podcastId,episodeId});const url=`${this.baseUrl}/podcasts/${podcastId}/episodes/${episodeId}`;const response=await fetch(url,{method:'GET',headers:this.getHeaders()});if(!response.ok){if(response.status===404){console.warn(`📻 Episode ${episodeId} not found in Megaphone`);return null;}throw new Error(`Megaphone API error: ${response.status} - ${response.statusText}`);}const episodeData=await response.json();console.log(`✅ Retrieved episode data from Megaphone:`,episodeData);// Transform Megaphone status to our UI status\nconst status=this.transformMegaphoneStatus(episodeData.status);return{status,originalStatus:episodeData.status,publishedAt:episodeData.published_at,createdAt:episodeData.created_at,updatedAt:episodeData.updated_at,title:episodeData.title,summary:episodeData.summary,uid:episodeData.uid,rawData:episodeData};}catch(error){console.error(`❌ Failed to fetch episode status from Megaphone:`,error);return null;}}// Transform Megaphone status to UI-friendly status\ntransformMegaphoneStatus(megaphoneStatus){if(!megaphoneStatus)return'Processing';switch(megaphoneStatus.toLowerCase()){case'published':return'Live';case'scheduled':return'Scheduled';case'draft':return'Draft';case'processing':return'Processing';default:console.log(`🔍 Unknown Megaphone status: \"${megaphoneStatus}\"`);return'Processing';}}// Fetch multiple episodes status in parallel\nasync getMultipleEpisodeStatus(episodes){if(!episodes||episodes.length===0)return[];console.log(`🎧 Fetching status for ${episodes.length} episodes from Megaphone API`);const statusPromises=episodes.map(async episode=>{if(!episode.megaphoneEpisodeId||!episode.podcastId){console.warn(`⚠️ Missing IDs for episode ${episode.id}:`,{megaphoneEpisodeId:episode.megaphoneEpisodeId,podcastId:episode.podcastId});return{...episode,megaphoneStatus:null};}const statusData=await this.getEpisodeStatus(episode.podcastId,episode.megaphoneEpisodeId);return{...episode,megaphoneStatus:statusData};});try{const results=await Promise.allSettled(statusPromises);return results.map((result,index)=>{if(result.status==='fulfilled'){return result.value;}else{console.error(`❌ Failed to fetch status for episode ${episodes[index].id}:`,result.reason);return{...episodes[index],megaphoneStatus:null};}});}catch(error){console.error('❌ Error in batch episode status fetch:',error);return episodes.map(episode=>({...episode,megaphoneStatus:null}));}}}export const megaphoneApiService=new MegaphoneApiService();export default megaphoneApiService;","map":{"version":3,"names":["MegaphoneApiService","constructor","apiToken","process","env","REACT_APP_MEGAPHONE_API_TOKEN","networkId","REACT_APP_MEGAPHONE_NETWORK_ID","baseUrl","getHeaders","getEpisodeStatus","podcastId","episodeId","console","warn","log","url","response","fetch","method","headers","ok","status","Error","statusText","episodeData","json","transformMegaphoneStatus","originalStatus","publishedAt","published_at","createdAt","created_at","updatedAt","updated_at","title","summary","uid","rawData","error","megaphoneStatus","toLowerCase","getMultipleEpisodeStatus","episodes","length","statusPromises","map","episode","megaphoneEpisodeId","id","statusData","results","Promise","allSettled","result","index","value","reason","megaphoneApiService"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/megaphoneApi.js"],"sourcesContent":["// Megaphone API Service for fetching episode status and data\n\nclass MegaphoneApiService {\n  constructor() {\n    this.apiToken = process.env.REACT_APP_MEGAPHONE_API_TOKEN;\n    this.networkId = process.env.REACT_APP_MEGAPHONE_NETWORK_ID;\n    this.baseUrl = 'https://cms.megaphone.fm/api';\n  }\n\n  // Get headers for Megaphone API requests\n  getHeaders() {\n    return {\n      'Authorization': `Token token=\"${this.apiToken}\"`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  // Fetch episode details from Megaphone API\n  async getEpisodeStatus(podcastId, episodeId) {\n    if (!this.apiToken || !this.networkId) {\n      console.warn('⚠️ Megaphone API credentials not configured');\n      return null;\n    }\n\n    try {\n      console.log(`🎧 Fetching episode status from Megaphone API:`, { podcastId, episodeId });\n      \n      const url = `${this.baseUrl}/podcasts/${podcastId}/episodes/${episodeId}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(`📻 Episode ${episodeId} not found in Megaphone`);\n          return null;\n        }\n        throw new Error(`Megaphone API error: ${response.status} - ${response.statusText}`);\n      }\n\n      const episodeData = await response.json();\n      console.log(`✅ Retrieved episode data from Megaphone:`, episodeData);\n\n      // Transform Megaphone status to our UI status\n      const status = this.transformMegaphoneStatus(episodeData.status);\n      \n      return {\n        status,\n        originalStatus: episodeData.status,\n        publishedAt: episodeData.published_at,\n        createdAt: episodeData.created_at,\n        updatedAt: episodeData.updated_at,\n        title: episodeData.title,\n        summary: episodeData.summary,\n        uid: episodeData.uid,\n        rawData: episodeData\n      };\n\n    } catch (error) {\n      console.error(`❌ Failed to fetch episode status from Megaphone:`, error);\n      return null;\n    }\n  }\n\n  // Transform Megaphone status to UI-friendly status\n  transformMegaphoneStatus(megaphoneStatus) {\n    if (!megaphoneStatus) return 'Processing';\n    \n    switch (megaphoneStatus.toLowerCase()) {\n      case 'published':\n        return 'Live';\n      case 'scheduled':\n        return 'Scheduled';\n      case 'draft':\n        return 'Draft';\n      case 'processing':\n        return 'Processing';\n      default:\n        console.log(`🔍 Unknown Megaphone status: \"${megaphoneStatus}\"`);\n        return 'Processing';\n    }\n  }\n\n  // Fetch multiple episodes status in parallel\n  async getMultipleEpisodeStatus(episodes) {\n    if (!episodes || episodes.length === 0) return [];\n\n    console.log(`🎧 Fetching status for ${episodes.length} episodes from Megaphone API`);\n    \n    const statusPromises = episodes.map(async (episode) => {\n      if (!episode.megaphoneEpisodeId || !episode.podcastId) {\n        console.warn(`⚠️ Missing IDs for episode ${episode.id}:`, { \n          megaphoneEpisodeId: episode.megaphoneEpisodeId, \n          podcastId: episode.podcastId \n        });\n        return { ...episode, megaphoneStatus: null };\n      }\n\n      const statusData = await this.getEpisodeStatus(episode.podcastId, episode.megaphoneEpisodeId);\n      return {\n        ...episode,\n        megaphoneStatus: statusData\n      };\n    });\n\n    try {\n      const results = await Promise.allSettled(statusPromises);\n      return results.map((result, index) => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          console.error(`❌ Failed to fetch status for episode ${episodes[index].id}:`, result.reason);\n          return { ...episodes[index], megaphoneStatus: null };\n        }\n      });\n    } catch (error) {\n      console.error('❌ Error in batch episode status fetch:', error);\n      return episodes.map(episode => ({ ...episode, megaphoneStatus: null }));\n    }\n  }\n}\n\nexport const megaphoneApiService = new MegaphoneApiService();\nexport default megaphoneApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
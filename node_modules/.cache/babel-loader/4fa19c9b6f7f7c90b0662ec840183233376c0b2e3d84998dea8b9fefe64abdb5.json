{"ast":null,"code":"import{useState,useEffect}from'react';import{episodeService}from'../services/episodeService';export function useEpisodes(megaphoneId){const[state,setState]=useState({loading:false,error:null,episodes:[],totalCount:0,n8nEpisodes:[]// Track n8n episodes separately\n});useEffect(()=>{if(megaphoneId){loadEpisodes();}},[megaphoneId]);const loadEpisodes=async()=>{try{setState(s=>({...s,loading:true,error:null}));console.log('📻 Loading episodes from Supabase for Megaphone ID:',megaphoneId);// First get the podcast ID from the megaphone ID\nconst podcastId=await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);if(!podcastId){throw new Error('Podcast not found in database');}// Then get episodes from Supabase\nconst result=await episodeService.getEpisodesFromSupabase(podcastId);if(result.success){console.log('📊 Raw episodes from Supabase:',result.episodes);let transformedEpisodes=episodeService.transformEpisodeData(result.episodes);console.log('🔄 Transformed episodes:',transformedEpisodes.map(ep=>({id:ep.id,title:ep.title,status:ep.status,source:ep.source})));// TODO: Enrich episodes with Megaphone API status when n8n proxy is ready\n// For now, skip Megaphone API calls due to CORS restrictions\nconsole.log('⚠️ Megaphone API enrichment temporarily disabled due to CORS restrictions');console.log('💡 Use n8n proxy workflow to enable real-time status updates');setState(s=>({...s,episodes:transformedEpisodes,totalCount:result.totalCount,loading:false}));console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);}else{throw new Error(result.error||'Failed to load episodes');}}catch(error){console.error('❌ Failed to load episodes:',error);setState(s=>({...s,error:error.message,loading:false,episodes:[],totalCount:0}));}};const refreshEpisodes=async()=>{if(megaphoneId){await loadEpisodes();}};// Add newly created episodes from n8n workflow results\nconst addN8nEpisodes=function(n8nResults){let originalVideoData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;console.log('📺 Adding n8n episodes to display:',n8nResults);if(!n8nResults||!Array.isArray(n8nResults)){console.warn('Invalid n8n results provided:',n8nResults);return;}// Transform n8n data for display, optionally with original video data for better titles\nconst transformedN8nEpisodes=episodeService.transformN8nEpisodeData(n8nResults,originalVideoData);setState(s=>{// Remove any existing n8n episodes with same IDs to avoid duplicates\nconst existingEpisodes=s.episodes.filter(ep=>ep.source!=='n8n');const combinedEpisodes=[...transformedN8nEpisodes,...existingEpisodes];console.log(`✅ Added ${transformedN8nEpisodes.length} n8n episodes to display`);return{...s,episodes:combinedEpisodes,n8nEpisodes:transformedN8nEpisodes,totalCount:combinedEpisodes.length};});// Refresh from Supabase after a delay to get the persisted data\nsetTimeout(async()=>{console.log('🔄 Refreshing episodes from Supabase after n8n creation...');console.log('📊 Current episodes before refresh:',transformedN8nEpisodes.map(ep=>({id:ep.id,videoId:ep.videoId,source:ep.source})));// Store the video IDs of newly created episodes for comparison\nconst newlyCreatedVideoIds=transformedN8nEpisodes.map(ep=>ep.videoId);console.log('🎯 Newly created video IDs:',newlyCreatedVideoIds);// Clear all n8n episodes first\nsetState(s=>({...s,episodes:s.episodes.filter(ep=>ep.source!=='n8n'),n8nEpisodes:[]}));// Then refresh from Supabase to get the permanent data\nawait refreshEpisodes();console.log('✅ Removed temporary n8n episodes and refreshed from Supabase');},5000);// Increased to 5 seconds to give Supabase more time to sync\n};// Clear n8n episodes (when they've been persisted to Supabase)\nconst clearN8nEpisodes=()=>{setState(s=>({...s,n8nEpisodes:[],episodes:s.episodes.filter(ep=>ep.source!=='n8n')}));};return{...state,refreshEpisodes,addN8nEpisodes,clearN8nEpisodes};}","map":{"version":3,"names":["useState","useEffect","episodeService","useEpisodes","megaphoneId","state","setState","loading","error","episodes","totalCount","n8nEpisodes","loadEpisodes","s","console","log","podcastId","getPodcastIdFromMegaphoneId","Error","result","getEpisodesFromSupabase","success","transformedEpisodes","transformEpisodeData","map","ep","id","title","status","source","length","message","refreshEpisodes","addN8nEpisodes","n8nResults","originalVideoData","arguments","undefined","Array","isArray","warn","transformedN8nEpisodes","transformN8nEpisodeData","existingEpisodes","filter","combinedEpisodes","setTimeout","videoId","newlyCreatedVideoIds","clearN8nEpisodes"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useEpisodes.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\n\nexport function useEpisodes(megaphoneId) {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0,\n    n8nEpisodes: [] // Track n8n episodes separately\n  });\n\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({ ...s, loading: true, error: null }));\n      \n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n      \n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      \n      if (result.success) {\n        console.log('📊 Raw episodes from Supabase:', result.episodes);\n        let transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        console.log('🔄 Transformed episodes:', transformedEpisodes.map(ep => ({ \n          id: ep.id, \n          title: ep.title, \n          status: ep.status, \n          source: ep.source \n        })));\n        \n        // TODO: Enrich episodes with Megaphone API status when n8n proxy is ready\n        // For now, skip Megaphone API calls due to CORS restrictions\n        console.log('⚠️ Megaphone API enrichment temporarily disabled due to CORS restrictions');\n        console.log('💡 Use n8n proxy workflow to enable real-time status updates');\n        \n        setState(s => ({ \n          ...s, \n          episodes: transformedEpisodes, \n          totalCount: result.totalCount,\n          loading: false \n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({ \n        ...s, \n        error: error.message, \n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n\n  const refreshEpisodes = async () => {\n    if (megaphoneId) {\n      await loadEpisodes();\n    }\n  };\n\n  // Add newly created episodes from n8n workflow results\n  const addN8nEpisodes = (n8nResults, originalVideoData = null) => {\n    console.log('📺 Adding n8n episodes to display:', n8nResults);\n    \n    if (!n8nResults || !Array.isArray(n8nResults)) {\n      console.warn('Invalid n8n results provided:', n8nResults);\n      return;\n    }\n\n    // Transform n8n data for display, optionally with original video data for better titles\n    const transformedN8nEpisodes = episodeService.transformN8nEpisodeData(n8nResults, originalVideoData);\n    \n    setState(s => {\n      // Remove any existing n8n episodes with same IDs to avoid duplicates\n      const existingEpisodes = s.episodes.filter(ep => ep.source !== 'n8n');\n      const combinedEpisodes = [...transformedN8nEpisodes, ...existingEpisodes];\n      \n      console.log(`✅ Added ${transformedN8nEpisodes.length} n8n episodes to display`);\n      \n      return {\n        ...s,\n        episodes: combinedEpisodes,\n        n8nEpisodes: transformedN8nEpisodes,\n        totalCount: combinedEpisodes.length\n      };\n    });\n\n    // Refresh from Supabase after a delay to get the persisted data\n    setTimeout(async () => {\n      console.log('🔄 Refreshing episodes from Supabase after n8n creation...');\n      console.log('📊 Current episodes before refresh:', transformedN8nEpisodes.map(ep => ({ id: ep.id, videoId: ep.videoId, source: ep.source })));\n      \n      // Store the video IDs of newly created episodes for comparison\n      const newlyCreatedVideoIds = transformedN8nEpisodes.map(ep => ep.videoId);\n      console.log('🎯 Newly created video IDs:', newlyCreatedVideoIds);\n      \n      // Clear all n8n episodes first\n      setState(s => ({\n        ...s,\n        episodes: s.episodes.filter(ep => ep.source !== 'n8n'),\n        n8nEpisodes: []\n      }));\n      \n      // Then refresh from Supabase to get the permanent data\n      await refreshEpisodes();\n      console.log('✅ Removed temporary n8n episodes and refreshed from Supabase');\n    }, 5000); // Increased to 5 seconds to give Supabase more time to sync\n  };\n\n  // Clear n8n episodes (when they've been persisted to Supabase)\n  const clearN8nEpisodes = () => {\n    setState(s => ({\n      ...s,\n      n8nEpisodes: [],\n      episodes: s.episodes.filter(ep => ep.source !== 'n8n')\n    }));\n  };\n\n  return {\n    ...state,\n    refreshEpisodes,\n    addN8nEpisodes,\n    clearN8nEpisodes\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Clean n8n API service - replaces all direct API calls\nimport { toast } from 'react-toastify';\nimport { savePodcastDetails, savePayoutDetails } from './supabase';\n\n// n8n Configuration\nconst N8N_BASE_URL = process.env.REACT_APP_N8N_BASE_URL || 'https://n8n-6s78.onrender.com/';\nconst USE_TEST_WEBHOOKS = process.env.REACT_APP_USE_TEST_WEBHOOKS !== 'false'; // Default to true for testing\nconst DEV_MODE = process.env.REACT_APP_DEV_MODE === 'true';\n// Use mock mode only if explicitly enabled\nconst USE_MOCK_MODE = DEV_MODE;\nconsole.log('üîß n8n API Configuration:', {\n  N8N_BASE_URL,\n  USE_TEST_WEBHOOKS,\n  REACT_APP_DEV_MODE: process.env.REACT_APP_DEV_MODE,\n  NODE_ENV: process.env.NODE_ENV,\n  DEV_MODE,\n  USE_MOCK_MODE\n});\nclass N8nApiService {\n  constructor() {\n    this.baseURL = N8N_BASE_URL;\n    this.useTestWebhooks = USE_TEST_WEBHOOKS;\n  }\n  async makeRequest(endpoint, data) {\n    // Use direct n8n webhook URL\n    const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n    const targetUrl = `${baseUrl}/webhook/${endpoint}`;\n    console.log(`üì° Making request to endpoint: ${endpoint}`, {\n      USE_MOCK_MODE,\n      DEV_MODE,\n      n8nBaseUrl: baseUrl,\n      targetUrl,\n      payload: data\n    });\n\n    // Log the exact data being sent for debugging\n    console.log(`üîç Webhook payload for ${endpoint}:`, JSON.stringify(data, null, 2));\n\n    // Use mock mode if explicitly enabled\n    if (USE_MOCK_MODE) {\n      console.log(`üß™ Using mock response for ${endpoint}`);\n      return this.getMockResponse(endpoint, data);\n    }\n    try {\n      console.log(`üåê Calling n8n PRODUCTION webhook: ${targetUrl}`);\n\n      // Add timeout to prevent hanging\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n      const response = await fetch(targetUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`‚ùå HTTP ${response.status} error for ${endpoint}:`, errorText);\n        console.error(`üì§ Request was made to: ${targetUrl}`);\n        console.error(`üì¶ Request payload was:`, JSON.stringify(data, null, 2));\n\n        // For 404 errors in dev mode, fall back to mock (workflow not configured)  \n        if (DEV_MODE && response.status === 404) {\n          console.warn('üîÑ n8n workflow not found, falling back to mock response');\n          toast.info('Using offline mode - n8n workflow not configured');\n          return this.getMockResponse(endpoint, data);\n        }\n\n        // Only fall back to mock for server errors in dev mode\n        if (DEV_MODE && response.status >= 500) {\n          console.warn('Server error in dev mode, falling back to mock response');\n          return this.getMockResponse(endpoint, data);\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n      }\n      const result = await response.json();\n      console.log(`n8n response from ${endpoint}:`, result);\n\n      // Handle N8N array response format\n      const finalResult = Array.isArray(result) ? result[0] : result;\n      console.log(`Processed response:`, finalResult);\n\n      // Handle different response formats from n8n workflow\n      if (endpoint === 'youtube-sync') {\n        // Check if it's already in the expected format\n        if (finalResult.success && finalResult.channel && finalResult.videos) {\n          console.log('‚úÖ Received properly formatted YouTube sync response');\n          return finalResult;\n        }\n\n        // Handle raw YouTube API response format\n        if (Array.isArray(finalResult) && !finalResult.success) {\n          console.warn('‚ö†Ô∏è n8n returned raw YouTube data, transforming...');\n          return this.transformYouTubeResponse(finalResult);\n        }\n\n        // Handle single object response format\n        if (finalResult.channel || finalResult.videos || finalResult.items) {\n          console.warn('‚ö†Ô∏è n8n returned partial data format, transforming...');\n          return this.transformYouTubeResponse([finalResult]);\n        }\n      }\n      return finalResult;\n    } catch (error) {\n      console.error(`n8n API error for ${endpoint}:`, error);\n\n      // Only fall back to mock if explicitly in dev mode AND network fails\n      if (DEV_MODE && (error.message.includes('Failed to fetch') || error.message.includes('NetworkError') || error.name === 'AbortError' || error.message.includes('fetch'))) {\n        console.warn('üîÑ Network/timeout error in dev mode, falling back to mock response');\n        toast.info('Using offline mode - n8n server not available');\n        return this.getMockResponse(endpoint, data);\n      }\n\n      // Better error messages\n      if (error.message.includes('HTTP 404')) {\n        throw new Error('Workflow not found. Please ensure n8n workflows are properly set up.');\n      } else if (error.message.includes('HTTP 500')) {\n        throw new Error('Server error occurred. Please try again in a moment.');\n      } else {\n        throw new Error(`n8n workflow failed: ${error.message}`);\n      }\n    }\n  }\n\n  // Mock responses for development\n  getMockResponse(endpoint, data) {\n    var _data$title, _data$userInfo;\n    console.log(`üß™ Using mock response for ${endpoint}`);\n    switch (endpoint) {\n      case 'youtube-sync':\n        return {\n          success: true,\n          channel: {\n            id: 'UC_mock_channel_id',\n            title: 'Mock YouTube Channel',\n            description: 'This is a mock YouTube channel for testing purposes.',\n            subscriberCount: '1234',\n            videoCount: '42'\n          },\n          videos: [{\n            videoId: 'mock_video_1',\n            title: 'Mock Video 1: Introduction to PodPay',\n            description: 'Learn how to use PodPay to convert YouTube videos to podcasts.',\n            publishedAt: new Date(Date.now() - 86400000).toISOString(),\n            thumbnail: 'https://via.placeholder.com/120x90/4F46E5/FFFFFF?text=Video+1'\n          }, {\n            videoId: 'mock_video_2',\n            title: 'Mock Video 2: Advanced Features',\n            description: 'Explore advanced features of podcast creation.',\n            publishedAt: new Date(Date.now() - 172800000).toISOString(),\n            thumbnail: 'https://via.placeholder.com/120x90/7C3AED/FFFFFF?text=Video+2'\n          }, {\n            videoId: 'mock_video_3',\n            title: 'Mock Video 3: Monetization Tips',\n            description: 'Tips and tricks for monetizing your podcast.',\n            publishedAt: new Date(Date.now() - 259200000).toISOString(),\n            thumbnail: 'https://via.placeholder.com/120x90/059669/FFFFFF?text=Video+3'\n          }],\n          message: 'Mock YouTube channel data fetched successfully - ready for podcast creation form',\n          prefillData: {\n            title: 'Mock YouTube Channel Podcast',\n            subtitle: 'Podcast created from Mock YouTube Channel',\n            summary: 'This is a mock YouTube channel for testing purposes.',\n            author: 'Mock YouTube Channel',\n            link: 'https://www.youtube.com/channel/UC_mock_channel_id',\n            language: 'en',\n            itunesCategories: ['Technology'],\n            explicit: 'clean',\n            podcastType: 'serial',\n            imageFile: 'https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Mock+Channel'\n          }\n        };\n      case 'create-podcast':\n        return {\n          success: true,\n          podcastId: 'mock_podcast_' + Date.now(),\n          podcast: {\n            id: 'mock_podcast_' + Date.now(),\n            title: data.title || 'Mock Podcast',\n            description: data.description || 'Mock podcast description',\n            author: data.author || 'Mock Author',\n            language: data.language || 'en',\n            explicit: data.explicit || 'clean',\n            primaryCategory: data.primaryCategory || 'Technology',\n            secondaryCategory: data.secondaryCategory || '',\n            podcastType: data.podcastType || 'serial',\n            link: data.link || 'https://youtube.com/channel/mock',\n            copyright: data.copyright || '¬© 2024 Mock Author',\n            ownerName: data.ownerName || 'Mock Author',\n            ownerEmail: data.ownerEmail || 'mock@example.com',\n            websiteUrl: data.websiteUrl || 'https://youtube.com/channel/mock',\n            keywords: data.keywords || 'mock, podcast, youtube',\n            slug: ((_data$title = data.title) === null || _data$title === void 0 ? void 0 : _data$title.toLowerCase().replace(/[^a-z0-9]+/g, '-')) || 'mock-podcast',\n            createdAt: new Date().toISOString(),\n            feedUrl: `https://feeds.megaphone.fm/mock_podcast_${Date.now()}`\n          },\n          message: 'Mock podcast created successfully!'\n        };\n      case 'sync-megaphone-episodes':\n        return {\n          success: true,\n          episodeCount: 0,\n          episodes: [],\n          message: 'No episodes found in Megaphone for this podcast'\n        };\n      case 'fetch-episodes':\n        return {\n          success: true,\n          episodes: [{\n            id: 'episode_1',\n            title: 'Sample Published Episode 1',\n            summary: 'This is a sample episode summary',\n            publishedAt: '2025-01-20T10:00:00Z',\n            duration: 1800,\n            // 30 minutes in seconds\n            status: 'published',\n            playCount: 1234,\n            downloadCount: 567,\n            fileUrl: 'https://example.com/episode1.mp3'\n          }, {\n            id: 'episode_2',\n            title: 'Sample Published Episode 2',\n            summary: 'This is another sample episode summary',\n            publishedAt: '2025-01-15T10:00:00Z',\n            duration: 2100,\n            // 35 minutes in seconds\n            status: 'published',\n            playCount: 987,\n            downloadCount: 432,\n            fileUrl: 'https://example.com/episode2.mp3'\n          }],\n          totalCount: 2\n        };\n      case 'create-episodes':\n        const videoIds = data.videoIds || [];\n        return {\n          success: true,\n          results: videoIds.map(videoId => ({\n            videoId,\n            episodeId: `mock_episode_${videoId}`,\n            status: 'created',\n            title: `Mock Episode for ${videoId}`\n          })),\n          summary: {\n            total: videoIds.length,\n            successful: videoIds.length,\n            failed: 0\n          }\n        };\n      case 'user-setup':\n        return {\n          success: true,\n          userId: ((_data$userInfo = data.userInfo) === null || _data$userInfo === void 0 ? void 0 : _data$userInfo.id) || 'mock_user_123',\n          message: 'Mock user setup completed'\n        };\n      default:\n        return {\n          success: true,\n          message: `Mock response for ${endpoint}`\n        };\n    }\n  }\n\n  // Transform raw YouTube API response into expected format\n  transformYouTubeResponse(rawData) {\n    console.log('üîÑ Transforming raw YouTube response to expected format');\n    try {\n      var _firstVideo$snippet$t, _firstVideo$snippet$t2, _firstVideo$snippet$t3, _firstVideo$snippet$t4, _firstVideo$snippet$t5, _firstVideo$snippet$t6;\n      // Extract the first item which contains the playlist data\n      const playlistData = rawData[0];\n      if (!playlistData || !playlistData.items) {\n        throw new Error('Invalid YouTube response structure');\n      }\n\n      // Extract channel info from the first video\n      const firstVideo = playlistData.items[0];\n      if (!firstVideo) {\n        throw new Error('No videos found in playlist');\n      }\n\n      // Create channel object\n      const channel = {\n        id: firstVideo.snippet.channelId,\n        title: firstVideo.snippet.channelTitle,\n        description: `YouTube channel with ${playlistData.pageInfo.totalResults} videos`,\n        subscriberCount: 'N/A',\n        // Not available in playlist response\n        videoCount: playlistData.pageInfo.totalResults.toString(),\n        thumbnail: ((_firstVideo$snippet$t = firstVideo.snippet.thumbnails) === null || _firstVideo$snippet$t === void 0 ? void 0 : (_firstVideo$snippet$t2 = _firstVideo$snippet$t.high) === null || _firstVideo$snippet$t2 === void 0 ? void 0 : _firstVideo$snippet$t2.url) || ((_firstVideo$snippet$t3 = firstVideo.snippet.thumbnails) === null || _firstVideo$snippet$t3 === void 0 ? void 0 : (_firstVideo$snippet$t4 = _firstVideo$snippet$t3.medium) === null || _firstVideo$snippet$t4 === void 0 ? void 0 : _firstVideo$snippet$t4.url) || ((_firstVideo$snippet$t5 = firstVideo.snippet.thumbnails) === null || _firstVideo$snippet$t5 === void 0 ? void 0 : (_firstVideo$snippet$t6 = _firstVideo$snippet$t5.default) === null || _firstVideo$snippet$t6 === void 0 ? void 0 : _firstVideo$snippet$t6.url)\n      };\n\n      // Transform videos\n      const videos = playlistData.items.map(item => {\n        var _item$snippet$thumbna, _item$snippet$thumbna2, _item$snippet$thumbna3, _item$snippet$thumbna4, _item$snippet$thumbna5, _item$snippet$thumbna6, _item$snippet$thumbna7, _item$snippet$thumbna8;\n        return {\n          videoId: item.snippet.resourceId.videoId,\n          title: item.snippet.title,\n          description: item.snippet.description,\n          publishedAt: item.snippet.publishedAt,\n          thumbnail: ((_item$snippet$thumbna = item.snippet.thumbnails) === null || _item$snippet$thumbna === void 0 ? void 0 : (_item$snippet$thumbna2 = _item$snippet$thumbna.maxres) === null || _item$snippet$thumbna2 === void 0 ? void 0 : _item$snippet$thumbna2.url) || ((_item$snippet$thumbna3 = item.snippet.thumbnails) === null || _item$snippet$thumbna3 === void 0 ? void 0 : (_item$snippet$thumbna4 = _item$snippet$thumbna3.high) === null || _item$snippet$thumbna4 === void 0 ? void 0 : _item$snippet$thumbna4.url) || ((_item$snippet$thumbna5 = item.snippet.thumbnails) === null || _item$snippet$thumbna5 === void 0 ? void 0 : (_item$snippet$thumbna6 = _item$snippet$thumbna5.medium) === null || _item$snippet$thumbna6 === void 0 ? void 0 : _item$snippet$thumbna6.url) || ((_item$snippet$thumbna7 = item.snippet.thumbnails) === null || _item$snippet$thumbna7 === void 0 ? void 0 : (_item$snippet$thumbna8 = _item$snippet$thumbna7.default) === null || _item$snippet$thumbna8 === void 0 ? void 0 : _item$snippet$thumbna8.url),\n          position: item.snippet.position\n        };\n      });\n\n      // Create prefill data with Megaphone-compatible fields\n      const prefillData = {\n        title: channel.title + ' Podcast',\n        subtitle: `Podcast created from ${channel.title} YouTube channel`,\n        // New Megaphone field\n        summary: channel.description || `Podcast created from ${channel.title} YouTube channel with ${channel.videoCount} videos.`,\n        // Megaphone uses 'summary'\n        author: channel.title,\n        link: `https://www.youtube.com/channel/${channel.id}`,\n        language: 'en',\n        itunesCategories: ['Technology'],\n        // Convert to iTunes categories array\n        explicit: 'clean',\n        // Megaphone enum: no/clean/yes\n        podcastType: 'serial',\n        copyright: `¬© ${new Date().getFullYear()} ${channel.title}`,\n        ownerName: channel.title,\n        ownerEmail: '',\n        // User will need to fill this\n        imageFile: channel.thumbnail || '',\n        // Megaphone uses 'imageFile' instead of 'artworkUrl'\n        keywords: 'youtube, podcast, ' + channel.title.toLowerCase().replace(/\\s+/g, ', ')\n      };\n      const transformedResponse = {\n        success: true,\n        channel,\n        videos,\n        message: 'YouTube channel data fetched successfully - ready for podcast creation form',\n        prefillData\n      };\n      console.log('‚úÖ Successfully transformed YouTube response:', {\n        channelTitle: channel.title,\n        videoCount: videos.length,\n        hasPreffillData: !!prefillData\n      });\n      return transformedResponse;\n    } catch (error) {\n      var _rawData$, _rawData$$items;\n      console.error('‚ùå Failed to transform YouTube response:', error);\n\n      // Return fallback response\n      return {\n        success: true,\n        channel: {\n          id: 'unknown',\n          title: 'YouTube Channel',\n          description: 'Channel data retrieved from YouTube',\n          subscriberCount: 'N/A',\n          videoCount: Array.isArray(rawData) && (_rawData$ = rawData[0]) !== null && _rawData$ !== void 0 && (_rawData$$items = _rawData$.items) !== null && _rawData$$items !== void 0 && _rawData$$items.length ? rawData[0].items.length.toString() : '0'\n        },\n        videos: [],\n        message: 'YouTube channel data retrieved (with limited info)',\n        prefillData: {\n          title: 'My YouTube Podcast',\n          subtitle: 'Podcast created from YouTube channel',\n          summary: 'Podcast created from YouTube channel content',\n          author: 'YouTube Creator',\n          link: 'https://youtube.com',\n          language: 'en',\n          itunesCategories: ['Technology'],\n          explicit: 'clean',\n          podcastType: 'serial',\n          imageFile: ''\n        }\n      };\n    }\n  }\n\n  // YouTube Channel Sync - fetches channel data for form prefill\n  async syncYouTubeChannel(accessToken, userId) {\n    try {\n      console.log(`üéØ syncYouTubeChannel called with:`, {\n        accessToken: accessToken ? `${accessToken.substring(0, 10)}...` : 'NULL',\n        userId: userId || 'NULL'\n      });\n      toast.info('Fetching your YouTube channel data...');\n      const result = await this.makeRequest('youtube-sync', {\n        accessToken,\n        userId\n      });\n      if (result.success) {\n        var _result$channel;\n        const channelTitle = ((_result$channel = result.channel) === null || _result$channel === void 0 ? void 0 : _result$channel.title) || 'Your Channel';\n        toast.success(`Channel \"${channelTitle}\" data fetched successfully!`);\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Channel sync failed');\n      }\n    } catch (error) {\n      console.error('YouTube channel sync failed:', error);\n      throw error;\n    }\n  }\n\n  // Create Podcast - creates podcast after user fills form\n  async createPodcast(podcastData) {\n    try {\n      toast.info('Creating your podcast...');\n\n      // Ensure all required data is included\n      const podcastPayload = {\n        ...podcastData,\n        // Add timestamp for uniqueness\n        createdAt: new Date().toISOString(),\n        // Ensure required fields have defaults\n        language: podcastData.language || 'en',\n        explicit: podcastData.explicit || 'clean',\n        podcastType: podcastData.podcastType || 'serial',\n        primaryCategory: podcastData.primaryCategory || 'Technology'\n      };\n      console.log('Creating podcast with payload:', podcastPayload);\n      const result = await this.makeRequest('create-podcast', podcastPayload);\n      if (result.success) {\n        var _result$payout;\n        // Save podcast details to Supabase (if not already saved via N8N workflow)\n        try {\n          var _result$ids;\n          const userId = podcastPayload.userId;\n          const megaphoneResponse = result.podcast || result.megaphoneResponse;\n\n          // Only save to Supabase if N8N didn't already handle it\n          if (megaphoneResponse && !((_result$ids = result.ids) !== null && _result$ids !== void 0 && _result$ids.supabaseId)) {\n            console.log('üíæ Saving podcast to Supabase...', megaphoneResponse);\n            const supabasePodcast = await savePodcastDetails(userId, podcastPayload, megaphoneResponse);\n\n            // Store Supabase podcast ID for payout linking\n            result.supabasePodcastId = supabasePodcast.id;\n            result.supabasePodcast = supabasePodcast;\n            console.log('‚úÖ Podcast saved to Supabase:', supabasePodcast.id);\n          } else {\n            console.log('‚úÖ Podcast already saved to Supabase via N8N workflow');\n          }\n        } catch (supabaseError) {\n          console.error('‚ùå Failed to save podcast to Supabase:', supabaseError);\n          // Continue with workflow, but log error\n        }\n\n        // Check if there were any Airwallex errors but still continue\n        if (result.airwallexError || ((_result$payout = result.payout) === null || _result$payout === void 0 ? void 0 : _result$payout.status) === 'incomplete') {\n          console.warn('‚ö†Ô∏è Airwallex beneficiary creation failed:', result.airwallexError);\n          toast.warning('Podcast created! Payout setup needs attention - check dashboard later.');\n\n          // Save failed payout details to Supabase if we have podcast ID\n          if (result.supabasePodcastId && podcastPayload.payoutData) {\n            try {\n              await savePayoutDetails(podcastPayload.userId, result.supabasePodcastId, {\n                ...podcastPayload.payoutData,\n                status: 'error',\n                error_message: result.airwallexError\n              });\n            } catch (payoutSaveError) {\n              console.error('‚ùå Failed to save payout error to Supabase:', payoutSaveError);\n            }\n          }\n          return {\n            ...result,\n            payoutSetupIncomplete: true,\n            payoutError: result.airwallexError\n          };\n        } else {\n          // Save successful payout details to Supabase\n          if (result.supabasePodcastId && podcastPayload.payoutData && result.airwallexBeneficiaryId) {\n            try {\n              await savePayoutDetails(podcastPayload.userId, result.supabasePodcastId, {\n                ...podcastPayload.payoutData,\n                airwallexBeneficiaryId: result.airwallexBeneficiaryId,\n                status: 'active'\n              });\n              console.log('‚úÖ Payout details saved to Supabase');\n            } catch (payoutSaveError) {\n              console.error('‚ùå Failed to save payout details to Supabase:', payoutSaveError);\n            }\n          }\n          toast.success(`Podcast \"${podcastData.title}\" created successfully!`);\n        }\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Podcast creation failed');\n      }\n    } catch (error) {\n      console.error('Podcast creation failed:', error);\n      throw error;\n    }\n  }\n\n  // Episode Management Methods\n  async syncMegaphoneEpisodes(podcastId, userId) {\n    try {\n      console.log('üîÑ syncMegaphoneEpisodes called with:', {\n        podcastId,\n        userId\n      });\n      const result = await this.makeRequest('sync-megaphone-episodes', {\n        podcastId,\n        userId\n      });\n      if (result.success) {\n        console.log(`‚úÖ Synced ${result.episodeCount || 0} episodes from Megaphone`);\n        return {\n          success: true,\n          episodes: result.episodes || [],\n          episodeCount: result.episodeCount || 0,\n          message: result.message || 'Episodes synced successfully'\n        };\n      } else {\n        throw new Error(result.error || 'Failed to sync episodes from Megaphone');\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to sync Megaphone episodes:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n  async fetchEpisodes(podcastId, userId) {\n    try {\n      console.log('üéØ fetchEpisodes called with:', {\n        podcastId,\n        userId\n      });\n      const result = await this.makeRequest('fetch-episodes', {\n        podcastId,\n        userId\n      });\n      if (result.success) {\n        var _result$episodes;\n        console.log(`‚úÖ Fetched ${((_result$episodes = result.episodes) === null || _result$episodes === void 0 ? void 0 : _result$episodes.length) || 0} episodes from Megaphone`);\n        return {\n          success: true,\n          episodes: result.episodes || [],\n          totalCount: result.totalCount || 0\n        };\n      } else {\n        throw new Error(result.error || 'Failed to fetch episodes');\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to fetch episodes:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  // Episode Creation - replaces Megaphone episode API calls\n  async createEpisodes(podcastId, videoIds, userId) {\n    try {\n      toast.info(`Creating ${videoIds.length} episodes...`);\n      const result = await this.makeRequest('create-episodes', {\n        podcastId,\n        videoIds,\n        userId\n      });\n      if (result.success) {\n        const {\n          successful,\n          failed,\n          total\n        } = result.summary;\n        if (successful > 0) {\n          toast.success(`${successful}/${total} episodes created successfully!`);\n        }\n        if (failed > 0) {\n          toast.warning(`${failed}/${total} episodes failed to create`);\n        }\n        return result;\n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n    } catch (error) {\n      toast.error(`Episode creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  // User Setup - handles user data storage\n  async setupUser(googleToken, userInfo) {\n    try {\n      console.log('Setting up user with n8n...');\n      const result = await this.makeRequest('user-setup', {\n        googleToken,\n        userInfo\n      });\n      if (result.success) {\n        console.log('User setup completed:', result);\n        return result;\n      } else {\n        throw new Error(result.error || 'User setup failed');\n      }\n    } catch (error) {\n      console.error('User setup failed:', error);\n      // Don't show error toast for user setup - it's background\n      throw error;\n    }\n  }\n\n  // Health check for n8n connection\n  async healthCheck() {\n    // Mock mode always returns healthy\n    if (USE_MOCK_MODE) {\n      return true;\n    }\n    try {\n      // Use production webhooks for health check\n      const webhookPath = 'webhook';\n      const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n      const healthUrl = `${baseUrl}/${webhookPath}/health`;\n      const response = await fetch(healthUrl);\n      return response.ok;\n    } catch {\n      // Fall back to mock mode if health check fails\n      return true; // Allow the app to work with mocks\n    }\n  }\n}\n\n// Export singleton instance\nexport const n8nApi = new N8nApiService();\n\n// Export individual functions for convenience\nexport const syncYouTubeChannel = (accessToken, userId) => n8nApi.syncYouTubeChannel(accessToken, userId);\nexport const createPodcast = podcastData => n8nApi.createPodcast(podcastData);\nexport const fetchEpisodes = (podcastId, userId) => n8nApi.fetchEpisodes(podcastId, userId);\nexport const createEpisodes = (podcastId, videoIds, userId) => n8nApi.createEpisodes(podcastId, videoIds, userId);\nexport const setupUser = (googleToken, userInfo) => n8nApi.setupUser(googleToken, userInfo);\nexport default n8nApi;","map":{"version":3,"names":["toast","savePodcastDetails","savePayoutDetails","N8N_BASE_URL","process","env","REACT_APP_N8N_BASE_URL","USE_TEST_WEBHOOKS","REACT_APP_USE_TEST_WEBHOOKS","DEV_MODE","REACT_APP_DEV_MODE","USE_MOCK_MODE","console","log","NODE_ENV","N8nApiService","constructor","baseURL","useTestWebhooks","makeRequest","endpoint","data","baseUrl","endsWith","slice","targetUrl","n8nBaseUrl","payload","JSON","stringify","getMockResponse","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","signal","clearTimeout","ok","errorText","text","error","status","warn","info","Error","statusText","result","json","finalResult","Array","isArray","success","channel","videos","transformYouTubeResponse","items","message","includes","name","_data$title","_data$userInfo","id","title","description","subscriberCount","videoCount","videoId","publishedAt","Date","now","toISOString","thumbnail","prefillData","subtitle","summary","author","link","language","itunesCategories","explicit","podcastType","imageFile","podcastId","podcast","primaryCategory","secondaryCategory","copyright","ownerName","ownerEmail","websiteUrl","keywords","slug","toLowerCase","replace","createdAt","feedUrl","episodeCount","episodes","duration","playCount","downloadCount","fileUrl","totalCount","videoIds","results","map","episodeId","total","length","successful","failed","userId","userInfo","rawData","_firstVideo$snippet$t","_firstVideo$snippet$t2","_firstVideo$snippet$t3","_firstVideo$snippet$t4","_firstVideo$snippet$t5","_firstVideo$snippet$t6","playlistData","firstVideo","snippet","channelId","channelTitle","pageInfo","totalResults","toString","thumbnails","high","url","medium","default","item","_item$snippet$thumbna","_item$snippet$thumbna2","_item$snippet$thumbna3","_item$snippet$thumbna4","_item$snippet$thumbna5","_item$snippet$thumbna6","_item$snippet$thumbna7","_item$snippet$thumbna8","resourceId","maxres","position","getFullYear","transformedResponse","hasPreffillData","_rawData$","_rawData$$items","syncYouTubeChannel","accessToken","substring","_result$channel","createPodcast","podcastData","podcastPayload","_result$payout","_result$ids","megaphoneResponse","ids","supabaseId","supabasePodcast","supabasePodcastId","supabaseError","airwallexError","payout","warning","payoutData","error_message","payoutSaveError","payoutSetupIncomplete","payoutError","airwallexBeneficiaryId","syncMegaphoneEpisodes","fetchEpisodes","_result$episodes","createEpisodes","setupUser","googleToken","healthCheck","webhookPath","healthUrl","n8nApi"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/n8nApi.js"],"sourcesContent":["// Clean n8n API service - replaces all direct API calls\nimport { toast } from 'react-toastify';\nimport { savePodcastDetails, savePayoutDetails } from './supabase';\n\n// n8n Configuration\nconst N8N_BASE_URL = process.env.REACT_APP_N8N_BASE_URL || 'https://n8n-6s78.onrender.com/';\nconst USE_TEST_WEBHOOKS = process.env.REACT_APP_USE_TEST_WEBHOOKS !== 'false'; // Default to true for testing\nconst DEV_MODE = process.env.REACT_APP_DEV_MODE === 'true';\n// Use mock mode only if explicitly enabled\nconst USE_MOCK_MODE = DEV_MODE;\n\nconsole.log('üîß n8n API Configuration:', {\n  N8N_BASE_URL,\n  USE_TEST_WEBHOOKS,\n  REACT_APP_DEV_MODE: process.env.REACT_APP_DEV_MODE,\n  NODE_ENV: process.env.NODE_ENV,\n  DEV_MODE,\n  USE_MOCK_MODE\n});\n\nclass N8nApiService {\n  constructor() {\n    this.baseURL = N8N_BASE_URL;\n    this.useTestWebhooks = USE_TEST_WEBHOOKS;\n  }\n\n  async makeRequest(endpoint, data) {\n    // Use direct n8n webhook URL\n    const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n    const targetUrl = `${baseUrl}/webhook/${endpoint}`;\n      \n    console.log(`üì° Making request to endpoint: ${endpoint}`, {\n      USE_MOCK_MODE,\n      DEV_MODE,\n      n8nBaseUrl: baseUrl,\n      targetUrl,\n      payload: data\n    });\n    \n    // Log the exact data being sent for debugging\n    console.log(`üîç Webhook payload for ${endpoint}:`, JSON.stringify(data, null, 2));\n    \n    // Use mock mode if explicitly enabled\n    if (USE_MOCK_MODE) {\n      console.log(`üß™ Using mock response for ${endpoint}`);\n      return this.getMockResponse(endpoint, data);\n    }\n    \n    try {\n      console.log(`üåê Calling n8n PRODUCTION webhook: ${targetUrl}`);\n      \n      // Add timeout to prevent hanging\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      const response = await fetch(targetUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`‚ùå HTTP ${response.status} error for ${endpoint}:`, errorText);\n        console.error(`üì§ Request was made to: ${targetUrl}`);\n        console.error(`üì¶ Request payload was:`, JSON.stringify(data, null, 2));\n        \n        // For 404 errors in dev mode, fall back to mock (workflow not configured)  \n        if (DEV_MODE && response.status === 404) {\n          console.warn('üîÑ n8n workflow not found, falling back to mock response');\n          toast.info('Using offline mode - n8n workflow not configured');\n          return this.getMockResponse(endpoint, data);\n        }\n        \n        // Only fall back to mock for server errors in dev mode\n        if (DEV_MODE && response.status >= 500) {\n          console.warn('Server error in dev mode, falling back to mock response');\n          return this.getMockResponse(endpoint, data);\n        }\n        \n        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log(`n8n response from ${endpoint}:`, result);\n      \n      // Handle N8N array response format\n      const finalResult = Array.isArray(result) ? result[0] : result;\n      console.log(`Processed response:`, finalResult);\n      \n      // Handle different response formats from n8n workflow\n      if (endpoint === 'youtube-sync') {\n        // Check if it's already in the expected format\n        if (finalResult.success && finalResult.channel && finalResult.videos) {\n          console.log('‚úÖ Received properly formatted YouTube sync response');\n          return finalResult;\n        }\n        \n        // Handle raw YouTube API response format\n        if (Array.isArray(finalResult) && !finalResult.success) {\n          console.warn('‚ö†Ô∏è n8n returned raw YouTube data, transforming...');\n          return this.transformYouTubeResponse(finalResult);\n        }\n        \n        // Handle single object response format\n        if (finalResult.channel || finalResult.videos || finalResult.items) {\n          console.warn('‚ö†Ô∏è n8n returned partial data format, transforming...');\n          return this.transformYouTubeResponse([finalResult]);\n        }\n      }\n      \n      return finalResult;\n    } catch (error) {\n      console.error(`n8n API error for ${endpoint}:`, error);\n      \n      // Only fall back to mock if explicitly in dev mode AND network fails\n      if (DEV_MODE && (error.message.includes('Failed to fetch') || \n          error.message.includes('NetworkError') ||\n          error.name === 'AbortError' ||\n          error.message.includes('fetch'))) {\n        console.warn('üîÑ Network/timeout error in dev mode, falling back to mock response');\n        toast.info('Using offline mode - n8n server not available');\n        return this.getMockResponse(endpoint, data);\n      }\n      \n      // Better error messages\n      if (error.message.includes('HTTP 404')) {\n        throw new Error('Workflow not found. Please ensure n8n workflows are properly set up.');\n      } else if (error.message.includes('HTTP 500')) {\n        throw new Error('Server error occurred. Please try again in a moment.');\n      } else {\n        throw new Error(`n8n workflow failed: ${error.message}`);\n      }\n    }\n  }\n  \n  // Mock responses for development\n  getMockResponse(endpoint, data) {\n    console.log(`üß™ Using mock response for ${endpoint}`);\n    \n    switch (endpoint) {\n      case 'youtube-sync':\n        return {\n          success: true,\n          channel: {\n            id: 'UC_mock_channel_id',\n            title: 'Mock YouTube Channel',\n            description: 'This is a mock YouTube channel for testing purposes.',\n            subscriberCount: '1234',\n            videoCount: '42'\n          },\n          videos: [\n            {\n              videoId: 'mock_video_1',\n              title: 'Mock Video 1: Introduction to PodPay',\n              description: 'Learn how to use PodPay to convert YouTube videos to podcasts.',\n              publishedAt: new Date(Date.now() - 86400000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/4F46E5/FFFFFF?text=Video+1'\n            },\n            {\n              videoId: 'mock_video_2', \n              title: 'Mock Video 2: Advanced Features',\n              description: 'Explore advanced features of podcast creation.',\n              publishedAt: new Date(Date.now() - 172800000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/7C3AED/FFFFFF?text=Video+2'\n            },\n            {\n              videoId: 'mock_video_3',\n              title: 'Mock Video 3: Monetization Tips',\n              description: 'Tips and tricks for monetizing your podcast.',\n              publishedAt: new Date(Date.now() - 259200000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/059669/FFFFFF?text=Video+3'\n            }\n          ],\n          message: 'Mock YouTube channel data fetched successfully - ready for podcast creation form',\n          prefillData: {\n            title: 'Mock YouTube Channel Podcast',\n            subtitle: 'Podcast created from Mock YouTube Channel',\n            summary: 'This is a mock YouTube channel for testing purposes.',\n            author: 'Mock YouTube Channel',\n            link: 'https://www.youtube.com/channel/UC_mock_channel_id',\n            language: 'en',\n            itunesCategories: ['Technology'],\n            explicit: 'clean',\n            podcastType: 'serial',\n            imageFile: 'https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Mock+Channel'\n          }\n        };\n        \n      case 'create-podcast':\n        return {\n          success: true,\n          podcastId: 'mock_podcast_' + Date.now(),\n          podcast: {\n            id: 'mock_podcast_' + Date.now(),\n            title: data.title || 'Mock Podcast',\n            description: data.description || 'Mock podcast description',\n            author: data.author || 'Mock Author',\n            language: data.language || 'en',\n            explicit: data.explicit || 'clean',\n            primaryCategory: data.primaryCategory || 'Technology',\n            secondaryCategory: data.secondaryCategory || '',\n            podcastType: data.podcastType || 'serial',\n            link: data.link || 'https://youtube.com/channel/mock',\n            copyright: data.copyright || '¬© 2024 Mock Author',\n            ownerName: data.ownerName || 'Mock Author',\n            ownerEmail: data.ownerEmail || 'mock@example.com',\n            websiteUrl: data.websiteUrl || 'https://youtube.com/channel/mock',\n            keywords: data.keywords || 'mock, podcast, youtube',\n            slug: data.title?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || 'mock-podcast',\n            createdAt: new Date().toISOString(),\n            feedUrl: `https://feeds.megaphone.fm/mock_podcast_${Date.now()}`\n          },\n          message: 'Mock podcast created successfully!'\n        };\n        \n      case 'sync-megaphone-episodes':\n        return {\n          success: true,\n          episodeCount: 0,\n          episodes: [],\n          message: 'No episodes found in Megaphone for this podcast'\n        };\n\n      case 'fetch-episodes':\n        return {\n          success: true,\n          episodes: [\n            {\n              id: 'episode_1',\n              title: 'Sample Published Episode 1',\n              summary: 'This is a sample episode summary',\n              publishedAt: '2025-01-20T10:00:00Z',\n              duration: 1800, // 30 minutes in seconds\n              status: 'published',\n              playCount: 1234,\n              downloadCount: 567,\n              fileUrl: 'https://example.com/episode1.mp3'\n            },\n            {\n              id: 'episode_2', \n              title: 'Sample Published Episode 2',\n              summary: 'This is another sample episode summary',\n              publishedAt: '2025-01-15T10:00:00Z',\n              duration: 2100, // 35 minutes in seconds\n              status: 'published',\n              playCount: 987,\n              downloadCount: 432,\n              fileUrl: 'https://example.com/episode2.mp3'\n            }\n          ],\n          totalCount: 2\n        };\n        \n      case 'create-episodes':\n        const videoIds = data.videoIds || [];\n        return {\n          success: true,\n          results: videoIds.map(videoId => ({\n            videoId,\n            episodeId: `mock_episode_${videoId}`,\n            status: 'created',\n            title: `Mock Episode for ${videoId}`\n          })),\n          summary: {\n            total: videoIds.length,\n            successful: videoIds.length,\n            failed: 0\n          }\n        };\n        \n      case 'user-setup':\n        return {\n          success: true,\n          userId: data.userInfo?.id || 'mock_user_123',\n          message: 'Mock user setup completed'\n        };\n        \n      default:\n        return {\n          success: true,\n          message: `Mock response for ${endpoint}`\n        };\n    }\n  }\n  \n  // Transform raw YouTube API response into expected format\n  transformYouTubeResponse(rawData) {\n    console.log('üîÑ Transforming raw YouTube response to expected format');\n    \n    try {\n      // Extract the first item which contains the playlist data\n      const playlistData = rawData[0];\n      \n      if (!playlistData || !playlistData.items) {\n        throw new Error('Invalid YouTube response structure');\n      }\n      \n      // Extract channel info from the first video\n      const firstVideo = playlistData.items[0];\n      if (!firstVideo) {\n        throw new Error('No videos found in playlist');\n      }\n      \n      // Create channel object\n      const channel = {\n        id: firstVideo.snippet.channelId,\n        title: firstVideo.snippet.channelTitle,\n        description: `YouTube channel with ${playlistData.pageInfo.totalResults} videos`,\n        subscriberCount: 'N/A', // Not available in playlist response\n        videoCount: playlistData.pageInfo.totalResults.toString(),\n        thumbnail: firstVideo.snippet.thumbnails?.high?.url || \n                  firstVideo.snippet.thumbnails?.medium?.url || \n                  firstVideo.snippet.thumbnails?.default?.url\n      };\n      \n      // Transform videos\n      const videos = playlistData.items.map(item => ({\n        videoId: item.snippet.resourceId.videoId,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        publishedAt: item.snippet.publishedAt,\n        thumbnail: item.snippet.thumbnails?.maxres?.url || \n                  item.snippet.thumbnails?.high?.url || \n                  item.snippet.thumbnails?.medium?.url || \n                  item.snippet.thumbnails?.default?.url,\n        position: item.snippet.position\n      }));\n      \n      // Create prefill data with Megaphone-compatible fields\n      const prefillData = {\n        title: channel.title + ' Podcast',\n        subtitle: `Podcast created from ${channel.title} YouTube channel`, // New Megaphone field\n        summary: channel.description || `Podcast created from ${channel.title} YouTube channel with ${channel.videoCount} videos.`, // Megaphone uses 'summary'\n        author: channel.title,\n        link: `https://www.youtube.com/channel/${channel.id}`,\n        language: 'en',\n        itunesCategories: ['Technology'], // Convert to iTunes categories array\n        explicit: 'clean', // Megaphone enum: no/clean/yes\n        podcastType: 'serial',\n        copyright: `¬© ${new Date().getFullYear()} ${channel.title}`,\n        ownerName: channel.title,\n        ownerEmail: '', // User will need to fill this\n        imageFile: channel.thumbnail || '', // Megaphone uses 'imageFile' instead of 'artworkUrl'\n        keywords: 'youtube, podcast, ' + channel.title.toLowerCase().replace(/\\s+/g, ', ')\n      };\n      \n      const transformedResponse = {\n        success: true,\n        channel,\n        videos,\n        message: 'YouTube channel data fetched successfully - ready for podcast creation form',\n        prefillData\n      };\n      \n      console.log('‚úÖ Successfully transformed YouTube response:', {\n        channelTitle: channel.title,\n        videoCount: videos.length,\n        hasPreffillData: !!prefillData\n      });\n      \n      return transformedResponse;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to transform YouTube response:', error);\n      \n      // Return fallback response\n      return {\n        success: true,\n        channel: {\n          id: 'unknown',\n          title: 'YouTube Channel',\n          description: 'Channel data retrieved from YouTube',\n          subscriberCount: 'N/A',\n          videoCount: Array.isArray(rawData) && rawData[0]?.items?.length ? rawData[0].items.length.toString() : '0'\n        },\n        videos: [],\n        message: 'YouTube channel data retrieved (with limited info)',\n        prefillData: {\n          title: 'My YouTube Podcast',\n          subtitle: 'Podcast created from YouTube channel',\n          summary: 'Podcast created from YouTube channel content',\n          author: 'YouTube Creator',\n          link: 'https://youtube.com',\n          language: 'en',\n          itunesCategories: ['Technology'],\n          explicit: 'clean',\n          podcastType: 'serial',\n          imageFile: ''\n        }\n      };\n    }\n  }\n\n  // YouTube Channel Sync - fetches channel data for form prefill\n  async syncYouTubeChannel(accessToken, userId) {\n    try {\n      console.log(`üéØ syncYouTubeChannel called with:`, {\n        accessToken: accessToken ? `${accessToken.substring(0, 10)}...` : 'NULL',\n        userId: userId || 'NULL'\n      });\n      \n      toast.info('Fetching your YouTube channel data...');\n      \n      const result = await this.makeRequest('youtube-sync', {\n        accessToken,\n        userId\n      });\n      \n      if (result.success) {\n        const channelTitle = result.channel?.title || 'Your Channel';\n        toast.success(`Channel \"${channelTitle}\" data fetched successfully!`);\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Channel sync failed');\n      }\n    } catch (error) {\n      console.error('YouTube channel sync failed:', error);\n      throw error;\n    }\n  }\n\n  // Create Podcast - creates podcast after user fills form\n  async createPodcast(podcastData) {\n    try {\n      toast.info('Creating your podcast...');\n      \n      // Ensure all required data is included\n      const podcastPayload = {\n        ...podcastData,\n        // Add timestamp for uniqueness\n        createdAt: new Date().toISOString(),\n        // Ensure required fields have defaults\n        language: podcastData.language || 'en',\n        explicit: podcastData.explicit || 'clean',\n        podcastType: podcastData.podcastType || 'serial',\n        primaryCategory: podcastData.primaryCategory || 'Technology'\n      };\n      \n      console.log('Creating podcast with payload:', podcastPayload);\n      \n      const result = await this.makeRequest('create-podcast', podcastPayload);\n      \n      if (result.success) {\n        // Save podcast details to Supabase (if not already saved via N8N workflow)\n        try {\n          const userId = podcastPayload.userId;\n          const megaphoneResponse = result.podcast || result.megaphoneResponse;\n          \n          // Only save to Supabase if N8N didn't already handle it\n          if (megaphoneResponse && !result.ids?.supabaseId) {\n            console.log('üíæ Saving podcast to Supabase...', megaphoneResponse);\n            const supabasePodcast = await savePodcastDetails(userId, podcastPayload, megaphoneResponse);\n            \n            // Store Supabase podcast ID for payout linking\n            result.supabasePodcastId = supabasePodcast.id;\n            result.supabasePodcast = supabasePodcast;\n            \n            console.log('‚úÖ Podcast saved to Supabase:', supabasePodcast.id);\n          } else {\n            console.log('‚úÖ Podcast already saved to Supabase via N8N workflow');\n          }\n        } catch (supabaseError) {\n          console.error('‚ùå Failed to save podcast to Supabase:', supabaseError);\n          // Continue with workflow, but log error\n        }\n\n        // Check if there were any Airwallex errors but still continue\n        if (result.airwallexError || result.payout?.status === 'incomplete') {\n          console.warn('‚ö†Ô∏è Airwallex beneficiary creation failed:', result.airwallexError);\n          toast.warning('Podcast created! Payout setup needs attention - check dashboard later.');\n          \n          // Save failed payout details to Supabase if we have podcast ID\n          if (result.supabasePodcastId && podcastPayload.payoutData) {\n            try {\n              await savePayoutDetails(\n                podcastPayload.userId, \n                result.supabasePodcastId, \n                {\n                  ...podcastPayload.payoutData,\n                  status: 'error',\n                  error_message: result.airwallexError\n                }\n              );\n            } catch (payoutSaveError) {\n              console.error('‚ùå Failed to save payout error to Supabase:', payoutSaveError);\n            }\n          }\n          \n          return {\n            ...result,\n            payoutSetupIncomplete: true,\n            payoutError: result.airwallexError\n          };\n        } else {\n          // Save successful payout details to Supabase\n          if (result.supabasePodcastId && podcastPayload.payoutData && result.airwallexBeneficiaryId) {\n            try {\n              await savePayoutDetails(\n                podcastPayload.userId, \n                result.supabasePodcastId, \n                {\n                  ...podcastPayload.payoutData,\n                  airwallexBeneficiaryId: result.airwallexBeneficiaryId,\n                  status: 'active'\n                }\n              );\n              console.log('‚úÖ Payout details saved to Supabase');\n            } catch (payoutSaveError) {\n              console.error('‚ùå Failed to save payout details to Supabase:', payoutSaveError);\n            }\n          }\n          \n          toast.success(`Podcast \"${podcastData.title}\" created successfully!`);\n        }\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Podcast creation failed');\n      }\n    } catch (error) {\n      console.error('Podcast creation failed:', error);\n      throw error;\n    }\n  }\n\n  // Episode Management Methods\n  async syncMegaphoneEpisodes(podcastId, userId) {\n    try {\n      console.log('üîÑ syncMegaphoneEpisodes called with:', { podcastId, userId });\n      \n      const result = await this.makeRequest('sync-megaphone-episodes', {\n        podcastId,\n        userId\n      });\n      \n      if (result.success) {\n        console.log(`‚úÖ Synced ${result.episodeCount || 0} episodes from Megaphone`);\n        return {\n          success: true,\n          episodes: result.episodes || [],\n          episodeCount: result.episodeCount || 0,\n          message: result.message || 'Episodes synced successfully'\n        };\n      } else {\n        throw new Error(result.error || 'Failed to sync episodes from Megaphone');\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Failed to sync Megaphone episodes:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  async fetchEpisodes(podcastId, userId) {\n    try {\n      console.log('üéØ fetchEpisodes called with:', { podcastId, userId });\n      \n      const result = await this.makeRequest('fetch-episodes', {\n        podcastId,\n        userId\n      });\n      \n      if (result.success) {\n        console.log(`‚úÖ Fetched ${result.episodes?.length || 0} episodes from Megaphone`);\n        return {\n          success: true,\n          episodes: result.episodes || [],\n          totalCount: result.totalCount || 0\n        };\n      } else {\n        throw new Error(result.error || 'Failed to fetch episodes');\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Failed to fetch episodes:', error);\n      return {\n        success: false,\n        error: error.message,\n        episodes: []\n      };\n    }\n  }\n\n  // Episode Creation - replaces Megaphone episode API calls\n  async createEpisodes(podcastId, videoIds, userId) {\n    try {\n      toast.info(`Creating ${videoIds.length} episodes...`);\n      \n      const result = await this.makeRequest('create-episodes', {\n        podcastId,\n        videoIds,\n        userId\n      });\n      \n      if (result.success) {\n        const { successful, failed, total } = result.summary;\n        \n        if (successful > 0) {\n          toast.success(`${successful}/${total} episodes created successfully!`);\n        }\n        if (failed > 0) {\n          toast.warning(`${failed}/${total} episodes failed to create`);\n        }\n        \n        return result;\n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n    } catch (error) {\n      toast.error(`Episode creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  // User Setup - handles user data storage\n  async setupUser(googleToken, userInfo) {\n    try {\n      console.log('Setting up user with n8n...');\n      \n      const result = await this.makeRequest('user-setup', {\n        googleToken,\n        userInfo\n      });\n      \n      if (result.success) {\n        console.log('User setup completed:', result);\n        return result;\n      } else {\n        throw new Error(result.error || 'User setup failed');\n      }\n    } catch (error) {\n      console.error('User setup failed:', error);\n      // Don't show error toast for user setup - it's background\n      throw error;\n    }\n  }\n\n  // Health check for n8n connection\n  async healthCheck() {\n    // Mock mode always returns healthy\n    if (USE_MOCK_MODE) {\n      return true;\n    }\n    \n    try {\n      // Use production webhooks for health check\n      const webhookPath = 'webhook';\n      const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n      const healthUrl = `${baseUrl}/${webhookPath}/health`;\n      const response = await fetch(healthUrl);\n      return response.ok;\n    } catch {\n      // Fall back to mock mode if health check fails\n      return true; // Allow the app to work with mocks\n    }\n  }\n}\n\n// Export singleton instance\nexport const n8nApi = new N8nApiService();\n\n// Export individual functions for convenience\nexport const syncYouTubeChannel = (accessToken, userId) => \n  n8nApi.syncYouTubeChannel(accessToken, userId);\n\nexport const createPodcast = (podcastData) => \n  n8nApi.createPodcast(podcastData);\n\nexport const fetchEpisodes = (podcastId, userId) => \n  n8nApi.fetchEpisodes(podcastId, userId);\nexport const createEpisodes = (podcastId, videoIds, userId) => \n  n8nApi.createEpisodes(podcastId, videoIds, userId);\n\nexport const setupUser = (googleToken, userInfo) => \n  n8nApi.setupUser(googleToken, userInfo);\n\nexport default n8nApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
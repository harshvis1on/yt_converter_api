{"ast":null,"code":"import React,{useState,useCallback}from'react';import{createEpisodes}from'../services/n8nApi';import{toast}from'react-toastify';import{safeGetItem}from'../utils/localStorage';export function useYouTubeSync(){const[state,setState]=useState({loading:false,error:null,channel:null,podcastId:null,videos:[],episodes:[],progress:0,total:0,done:false,status:''});// Load data from localStorage on mount\nReact.useEffect(()=>{const channelData=safeGetItem('channelData');const videosData=safeGetItem('videosData',[]);const podcastId=localStorage.getItem('podcastId');if(channelData||(videosData===null||videosData===void 0?void 0:videosData.length)>0||podcastId){setState(s=>({...s,channel:channelData,videos:videosData,podcastId:podcastId||null}));}},[]);// Helper: is YouTube connected?\nconst isYouTubeConnected=!!(state.channel&&state.channel.id);// Connect YouTube data is now handled by n8n in GoogleAuth\n// This hook now focuses on episode management\nconst connectYouTube=useCallback(async()=>{// Data should already be loaded from localStorage\nconst channel=safeGetItem('channelData');const videos=safeGetItem('videosData',[]);const podcastId=localStorage.getItem('podcastId');setState(s=>({...s,channel,videos,podcastId,loading:false}));return{channel,videos,podcastId,success:true};},[]);// Create episodes using n8n workflow\nconst syncToMegaphone=useCallback(async videos=>{if(!videos||videos.length===0){toast.warning('No videos to sync');return;}setState(s=>({...s,loading:true,progress:0,total:videos.length,done:false,episodes:[],status:'Creating podcast episodes...'}));const podcastId=state.podcastId||localStorage.getItem('podcastId')||'';const userInfo=safeGetItem('user_info',{});if(!podcastId){setState(s=>({...s,error:'No podcast ID found. Please reconnect your YouTube channel.',loading:false}));return;}try{// Extract video IDs for n8n workflow\nconst videoIds=videos.map(v=>v.id||v.videoId).filter(Boolean);// Call n8n episode creation workflow\nconst result=await createEpisodes(podcastId,videoIds,userInfo.id);if(result.success){const{successful,failed,total}=result.summary;// Update state with episode results\nconst episodes=result.results.map(r=>({id:r.videoId,title:r.title,publishedAt:new Date().toISOString(),mp4Url:`https://youtube.com/watch?v=${r.videoId}`,publishedToMegaphone:r.status==='created',error:r.status==='failed'?'Episode creation failed':undefined}));setState(s=>({...s,episodes,progress:total,total,done:true,loading:false,status:`Sync complete! ${successful} successful, ${failed} failed`}));}else{throw new Error(result.error||'Episode creation failed');}}catch(err){console.error('Episode creation process failed:',err);setState(s=>({...s,error:err.message,loading:false,status:''}));toast.error('Episode creation failed: '+err.message);}},[state.podcastId]);// Refresh data from localStorage\nconst refreshData=useCallback(()=>{const channel=safeGetItem('channelData');const videos=safeGetItem('videosData',[]);const podcastId=localStorage.getItem('podcastId');setState(s=>({...s,channel,videos,podcastId:podcastId||null}));},[]);return{...state,connectYouTube,syncToMegaphone,isYouTubeConnected,refreshData};}","map":{"version":3,"names":["React","useState","useCallback","createEpisodes","toast","safeGetItem","useYouTubeSync","state","setState","loading","error","channel","podcastId","videos","episodes","progress","total","done","status","useEffect","channelData","videosData","localStorage","getItem","length","s","isYouTubeConnected","id","connectYouTube","success","syncToMegaphone","warning","userInfo","videoIds","map","v","videoId","filter","Boolean","result","successful","failed","summary","results","r","title","publishedAt","Date","toISOString","mp4Url","publishedToMegaphone","undefined","Error","err","console","message","refreshData"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useYouTubeSync.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { createEpisodes } from '../services/n8nApi';\nimport { toast } from 'react-toastify';\nimport { safeGetItem } from '../utils/localStorage';\n\n\nexport function useYouTubeSync() {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    channel: null,\n    podcastId: null,\n    videos: [],\n    episodes: [],\n    progress: 0,\n    total: 0,\n    done: false,\n    status: '',\n  });\n  \n  // Load data from localStorage on mount\n  React.useEffect(() => {\n    const channelData = safeGetItem('channelData');\n    const videosData = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    \n    if (channelData || videosData?.length > 0 || podcastId) {\n      setState(s => ({\n        ...s,\n        channel: channelData,\n        videos: videosData,\n        podcastId: podcastId || null\n      }));\n    }\n  }, []);\n\n  // Helper: is YouTube connected?\n  const isYouTubeConnected = !!(state.channel && state.channel.id);\n\n  // Connect YouTube data is now handled by n8n in GoogleAuth\n  // This hook now focuses on episode management\n  const connectYouTube = useCallback(async () => {\n    // Data should already be loaded from localStorage\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    \n    setState(s => ({ ...s, channel, videos, podcastId, loading: false }));\n    \n    return { channel, videos, podcastId, success: true };\n  }, []);\n\n  // Create episodes using n8n workflow\n  const syncToMegaphone = useCallback(async (videos) => {\n    if (!videos || videos.length === 0) {\n      toast.warning('No videos to sync');\n      return;\n    }\n    \n    setState(s => ({ ...s, loading: true, progress: 0, total: videos.length, done: false, episodes: [], status: 'Creating podcast episodes...' }));\n    const podcastId = state.podcastId || localStorage.getItem('podcastId') || '';\n    const userInfo = safeGetItem('user_info', {});\n    \n    if (!podcastId) {\n      setState(s => ({ ...s, error: 'No podcast ID found. Please reconnect your YouTube channel.', loading: false }));\n      return;\n    }\n    \n    try {\n      // Extract video IDs for n8n workflow\n      const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n      \n      // Call n8n episode creation workflow\n      const result = await createEpisodes(podcastId, videoIds, userInfo.id);\n      \n      if (result.success) {\n        const { successful, failed, total } = result.summary;\n        \n        // Update state with episode results\n        const episodes = result.results.map(r => ({\n          id: r.videoId,\n          title: r.title,\n          publishedAt: new Date().toISOString(),\n          mp4Url: `https://youtube.com/watch?v=${r.videoId}`,\n          publishedToMegaphone: r.status === 'created',\n          error: r.status === 'failed' ? 'Episode creation failed' : undefined\n        }));\n        \n        setState(s => ({ \n          ...s, \n          episodes, \n          progress: total, \n          total, \n          done: true, \n          loading: false, \n          status: `Sync complete! ${successful} successful, ${failed} failed` \n        }));\n        \n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n      \n    } catch (err) {\n      console.error('Episode creation process failed:', err);\n      setState(s => ({ ...s, error: err.message, loading: false, status: '' }));\n      toast.error('Episode creation failed: ' + err.message);\n    }\n  }, [state.podcastId]);\n\n  // Refresh data from localStorage\n  const refreshData = useCallback(() => {\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    const podcastId = localStorage.getItem('podcastId');\n    \n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId: podcastId || null\n    }));\n  }, []);\n\n  return {\n    ...state,\n    connectYouTube,\n    syncToMegaphone,\n    isYouTubeConnected,\n    refreshData,\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
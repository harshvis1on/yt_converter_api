{"ast":null,"code":"// n8n Configuration Helper\n// This helps manage CORS issues and provides fallback strategies\n\nexport const N8N_CONFIG = {\n  // Primary n8n server\n  PRIMARY_URL: process.env.REACT_APP_N8N_BASE_URL || 'https://n8n-6s78.onrender.com/',\n  // Check if we're in development\n  IS_DEV: process.env.NODE_ENV === 'development',\n  // Check if we should use mock mode\n  USE_MOCKS: process.env.REACT_APP_DEV_MODE === 'true',\n  // Timeout configurations\n  TIMEOUTS: {\n    DEFAULT: 30000,\n    // 30 seconds\n    LONG_RUNNING: 180000,\n    // 3 minutes for episode creation\n    HEALTH_CHECK: 5000 // 5 seconds for health checks\n  },\n  // Endpoints that are considered long-running\n  LONG_RUNNING_ENDPOINTS: ['create-episodes', 'create-podcast', 'sync-megaphone-episodes'],\n  // Check if endpoint is long-running\n  isLongRunning: endpoint => {\n    return N8N_CONFIG.LONG_RUNNING_ENDPOINTS.includes(endpoint);\n  },\n  // Get appropriate timeout for endpoint\n  getTimeout: endpoint => {\n    return N8N_CONFIG.isLongRunning(endpoint) ? N8N_CONFIG.TIMEOUTS.LONG_RUNNING : N8N_CONFIG.TIMEOUTS.DEFAULT;\n  },\n  // Check if we should fall back to mocks for this error\n  shouldFallbackToMock: (error, endpoint, isDev = false) => {\n    // Always use mocks if explicitly enabled\n    if (N8N_CONFIG.USE_MOCKS) return true;\n\n    // For CORS/network errors in development, use mocks\n    if (isDev && (error.message.includes('Failed to fetch') || error.message.includes('CORS') || error.message.includes('NetworkError'))) {\n      return true;\n    }\n\n    // For non-critical endpoints, allow fallback\n    const criticalEndpoints = ['create-episodes', 'create-podcast'];\n    if (!criticalEndpoints.includes(endpoint) && (error.message.includes('Failed to fetch') || error.message.includes('404'))) {\n      return true;\n    }\n    return false;\n  },\n  // Get user-friendly error message\n  getUserFriendlyError: (error, endpoint) => {\n    if (error.name === 'AbortError') {\n      const timeout = N8N_CONFIG.getTimeout(endpoint);\n      const minutes = Math.ceil(timeout / 60000);\n      return `Operation timed out after ${minutes} minute${minutes > 1 ? 's' : ''}. The process may still be running in the background.`;\n    }\n    if (error.message.includes('Failed to fetch') || error.message.includes('CORS')) {\n      return 'Unable to connect to the server. Please check your internet connection.';\n    }\n    if (error.message.includes('404')) {\n      return 'Workflow not found. Please ensure your n8n workflows are properly configured.';\n    }\n    if (error.message.includes('500')) {\n      return 'Server error occurred. Please try again in a moment.';\n    }\n    return error.message || 'An unexpected error occurred.';\n  }\n};\nexport default N8N_CONFIG;","map":{"version":3,"names":["N8N_CONFIG","PRIMARY_URL","process","env","REACT_APP_N8N_BASE_URL","IS_DEV","NODE_ENV","USE_MOCKS","REACT_APP_DEV_MODE","TIMEOUTS","DEFAULT","LONG_RUNNING","HEALTH_CHECK","LONG_RUNNING_ENDPOINTS","isLongRunning","endpoint","includes","getTimeout","shouldFallbackToMock","error","isDev","message","criticalEndpoints","getUserFriendlyError","name","timeout","minutes","Math","ceil"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/utils/n8nConfig.js"],"sourcesContent":["// n8n Configuration Helper\n// This helps manage CORS issues and provides fallback strategies\n\nexport const N8N_CONFIG = {\n  // Primary n8n server\n  PRIMARY_URL: process.env.REACT_APP_N8N_BASE_URL || 'https://n8n-6s78.onrender.com/',\n  \n  // Check if we're in development\n  IS_DEV: process.env.NODE_ENV === 'development',\n  \n  // Check if we should use mock mode\n  USE_MOCKS: process.env.REACT_APP_DEV_MODE === 'true',\n  \n  // Timeout configurations\n  TIMEOUTS: {\n    DEFAULT: 30000, // 30 seconds\n    LONG_RUNNING: 180000, // 3 minutes for episode creation\n    HEALTH_CHECK: 5000 // 5 seconds for health checks\n  },\n  \n  // Endpoints that are considered long-running\n  LONG_RUNNING_ENDPOINTS: [\n    'create-episodes',\n    'create-podcast',\n    'sync-megaphone-episodes'\n  ],\n  \n  // Check if endpoint is long-running\n  isLongRunning: (endpoint) => {\n    return N8N_CONFIG.LONG_RUNNING_ENDPOINTS.includes(endpoint);\n  },\n  \n  // Get appropriate timeout for endpoint\n  getTimeout: (endpoint) => {\n    return N8N_CONFIG.isLongRunning(endpoint) \n      ? N8N_CONFIG.TIMEOUTS.LONG_RUNNING \n      : N8N_CONFIG.TIMEOUTS.DEFAULT;\n  },\n  \n  // Check if we should fall back to mocks for this error\n  shouldFallbackToMock: (error, endpoint, isDev = false) => {\n    // Always use mocks if explicitly enabled\n    if (N8N_CONFIG.USE_MOCKS) return true;\n    \n    // For CORS/network errors in development, use mocks\n    if (isDev && (\n      error.message.includes('Failed to fetch') ||\n      error.message.includes('CORS') ||\n      error.message.includes('NetworkError')\n    )) {\n      return true;\n    }\n    \n    // For non-critical endpoints, allow fallback\n    const criticalEndpoints = ['create-episodes', 'create-podcast'];\n    if (!criticalEndpoints.includes(endpoint) && (\n      error.message.includes('Failed to fetch') ||\n      error.message.includes('404')\n    )) {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  // Get user-friendly error message\n  getUserFriendlyError: (error, endpoint) => {\n    if (error.name === 'AbortError') {\n      const timeout = N8N_CONFIG.getTimeout(endpoint);\n      const minutes = Math.ceil(timeout / 60000);\n      return `Operation timed out after ${minutes} minute${minutes > 1 ? 's' : ''}. The process may still be running in the background.`;\n    }\n    \n    if (error.message.includes('Failed to fetch') || error.message.includes('CORS')) {\n      return 'Unable to connect to the server. Please check your internet connection.';\n    }\n    \n    if (error.message.includes('404')) {\n      return 'Workflow not found. Please ensure your n8n workflows are properly configured.';\n    }\n    \n    if (error.message.includes('500')) {\n      return 'Server error occurred. Please try again in a moment.';\n    }\n    \n    return error.message || 'An unexpected error occurred.';\n  }\n};\n\nexport default N8N_CONFIG;"],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,UAAU,GAAG;EACxB;EACAC,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,gCAAgC;EAEnF;EACAC,MAAM,EAAEH,OAAO,CAACC,GAAG,CAACG,QAAQ,KAAK,aAAa;EAE9C;EACAC,SAAS,EAAEL,OAAO,CAACC,GAAG,CAACK,kBAAkB,KAAK,MAAM;EAEpD;EACAC,QAAQ,EAAE;IACRC,OAAO,EAAE,KAAK;IAAE;IAChBC,YAAY,EAAE,MAAM;IAAE;IACtBC,YAAY,EAAE,IAAI,CAAC;EACrB,CAAC;EAED;EACAC,sBAAsB,EAAE,CACtB,iBAAiB,EACjB,gBAAgB,EAChB,yBAAyB,CAC1B;EAED;EACAC,aAAa,EAAGC,QAAQ,IAAK;IAC3B,OAAOf,UAAU,CAACa,sBAAsB,CAACG,QAAQ,CAACD,QAAQ,CAAC;EAC7D,CAAC;EAED;EACAE,UAAU,EAAGF,QAAQ,IAAK;IACxB,OAAOf,UAAU,CAACc,aAAa,CAACC,QAAQ,CAAC,GACrCf,UAAU,CAACS,QAAQ,CAACE,YAAY,GAChCX,UAAU,CAACS,QAAQ,CAACC,OAAO;EACjC,CAAC;EAED;EACAQ,oBAAoB,EAAEA,CAACC,KAAK,EAAEJ,QAAQ,EAAEK,KAAK,GAAG,KAAK,KAAK;IACxD;IACA,IAAIpB,UAAU,CAACO,SAAS,EAAE,OAAO,IAAI;;IAErC;IACA,IAAIa,KAAK,KACPD,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,iBAAiB,CAAC,IACzCG,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,MAAM,CAAC,IAC9BG,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,cAAc,CAAC,CACvC,EAAE;MACD,OAAO,IAAI;IACb;;IAEA;IACA,MAAMM,iBAAiB,GAAG,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IAC/D,IAAI,CAACA,iBAAiB,CAACN,QAAQ,CAACD,QAAQ,CAAC,KACvCI,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,iBAAiB,CAAC,IACzCG,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,KAAK,CAAC,CAC9B,EAAE;MACD,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd,CAAC;EAED;EACAO,oBAAoB,EAAEA,CAACJ,KAAK,EAAEJ,QAAQ,KAAK;IACzC,IAAII,KAAK,CAACK,IAAI,KAAK,YAAY,EAAE;MAC/B,MAAMC,OAAO,GAAGzB,UAAU,CAACiB,UAAU,CAACF,QAAQ,CAAC;MAC/C,MAAMW,OAAO,GAAGC,IAAI,CAACC,IAAI,CAACH,OAAO,GAAG,KAAK,CAAC;MAC1C,OAAO,6BAA6BC,OAAO,UAAUA,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,uDAAuD;IACpI;IAEA,IAAIP,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,iBAAiB,CAAC,IAAIG,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC/E,OAAO,yEAAyE;IAClF;IAEA,IAAIG,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,KAAK,CAAC,EAAE;MACjC,OAAO,+EAA+E;IACxF;IAEA,IAAIG,KAAK,CAACE,OAAO,CAACL,QAAQ,CAAC,KAAK,CAAC,EAAE;MACjC,OAAO,sDAAsD;IAC/D;IAEA,OAAOG,KAAK,CAACE,OAAO,IAAI,+BAA+B;EACzD;AACF,CAAC;AAED,eAAerB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
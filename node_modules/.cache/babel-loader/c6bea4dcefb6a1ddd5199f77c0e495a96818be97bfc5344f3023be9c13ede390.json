{"ast":null,"code":"// Clean n8n API service - replaces all direct API calls\nimport{toast}from'react-toastify';import{savePodcastDetails,savePayoutDetails}from'./supabase';// n8n Configuration\nconst N8N_BASE_URL=process.env.REACT_APP_N8N_BASE_URL||'https://n8n-6s78.onrender.com/';const USE_TEST_WEBHOOKS=process.env.REACT_APP_USE_TEST_WEBHOOKS!=='false';// Default to true for testing\nconst DEV_MODE=process.env.REACT_APP_DEV_MODE==='true';// Use mock mode only if explicitly enabled\nconst USE_MOCK_MODE=DEV_MODE;console.log('🔧 n8n API Configuration:',{N8N_BASE_URL,USE_TEST_WEBHOOKS,REACT_APP_DEV_MODE:process.env.REACT_APP_DEV_MODE,NODE_ENV:process.env.NODE_ENV,DEV_MODE,USE_MOCK_MODE});class N8nApiService{constructor(){this.baseURL=N8N_BASE_URL;this.useTestWebhooks=USE_TEST_WEBHOOKS;}async makeRequest(endpoint,data){// Use the actual n8n service URL\nconst baseUrl=this.baseURL.endsWith('/')?this.baseURL.slice(0,-1):this.baseURL;const directUrl=`${baseUrl}/webhook/${endpoint}`;const proxyUrl=`http://localhost:8000/api/n8n/${endpoint}`;console.log(`📡 Making request to endpoint: ${endpoint}`,{USE_MOCK_MODE,DEV_MODE,n8nBaseUrl:baseUrl,directUrl,proxyUrl,payload:data});// Log the exact data being sent for debugging\nconsole.log(`🔍 Webhook payload for ${endpoint}:`,JSON.stringify(data,null,2));// Use mock mode if explicitly enabled\nif(USE_MOCK_MODE){console.log(`🧪 Using mock response for ${endpoint}`);return this.getMockResponse(endpoint,data);}try{// Try proxy first to avoid CORS, then fallback to direct\nlet targetUrl=proxyUrl;let usingProxy=true;console.log(`🌐 Calling n8n via proxy: ${targetUrl}`);// Add timeout to prevent hanging\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),10000);// 10 second timeout\nlet response;try{// Try proxy first\nresponse=await fetch(targetUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data),signal:controller.signal});}catch(proxyError){if(usingProxy){console.warn('🔄 Proxy failed, trying direct n8n connection...');targetUrl=directUrl;usingProxy=false;// Try direct connection\nconst directController=new AbortController();const directTimeoutId=setTimeout(()=>directController.abort(),10000);try{response=await fetch(targetUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data),signal:directController.signal});clearTimeout(directTimeoutId);}catch(directError){clearTimeout(directTimeoutId);console.error('❌ Both proxy and direct connections failed');throw directError;}}else{throw proxyError;}}clearTimeout(timeoutId);if(!response.ok){const errorText=await response.text();console.error(`❌ HTTP ${response.status} error for ${endpoint}:`,errorText);console.error(`📤 Request was made to: ${targetUrl}`);console.error(`📦 Request payload was:`,JSON.stringify(data,null,2));// For 404 errors in dev mode, fall back to mock (workflow not configured)  \nif(DEV_MODE&&response.status===404){console.warn('🔄 n8n workflow not found, falling back to mock response');toast.info('Using offline mode - n8n workflow not configured');return this.getMockResponse(endpoint,data);}// Only fall back to mock for server errors in dev mode\nif(DEV_MODE&&response.status>=500){console.warn('Server error in dev mode, falling back to mock response');return this.getMockResponse(endpoint,data);}throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);}const result=await response.json();console.log(`n8n response from ${endpoint}:`,result);// Handle N8N array response format\nconst finalResult=Array.isArray(result)?result[0]:result;console.log(`Processed response:`,finalResult);// Handle different response formats from n8n workflow\nif(endpoint==='youtube-sync'){// Check if it's already in the expected format\nif(finalResult.success&&finalResult.channel&&finalResult.videos){console.log('✅ Received properly formatted YouTube sync response');return finalResult;}// Handle raw YouTube API response format\nif(Array.isArray(finalResult)&&!finalResult.success){console.warn('⚠️ n8n returned raw YouTube data, transforming...');return this.transformYouTubeResponse(finalResult);}// Handle single object response format\nif(finalResult.channel||finalResult.videos||finalResult.items){console.warn('⚠️ n8n returned partial data format, transforming...');return this.transformYouTubeResponse([finalResult]);}}return finalResult;}catch(error){console.error(`n8n API error for ${endpoint}:`,error);// Only fall back to mock if explicitly in dev mode AND network fails\nif(DEV_MODE&&(error.message.includes('Failed to fetch')||error.message.includes('NetworkError')||error.name==='AbortError'||error.message.includes('fetch'))){console.warn('🔄 Network/timeout error in dev mode, falling back to mock response');toast.info('Using offline mode - n8n server not available');return this.getMockResponse(endpoint,data);}// Better error messages\nif(error.message.includes('HTTP 404')){throw new Error('Workflow not found. Please ensure n8n workflows are properly set up.');}else if(error.message.includes('HTTP 500')){throw new Error('Server error occurred. Please try again in a moment.');}else{throw new Error(`n8n workflow failed: ${error.message}`);}}}// Mock responses for development\ngetMockResponse(endpoint,data){var _data$title,_data$userInfo;console.log(`🧪 Using mock response for ${endpoint}`);switch(endpoint){case'youtube-sync':return{success:true,channel:{id:'UC_mock_channel_id',title:'Mock YouTube Channel',description:'This is a mock YouTube channel for testing purposes.',subscriberCount:'1234',videoCount:'42'},videos:[{videoId:'mock_video_1',title:'Mock Video 1: Introduction to PodPay',description:'Learn how to use PodPay to convert YouTube videos to podcasts.',publishedAt:new Date(Date.now()-86400000).toISOString(),thumbnail:'https://via.placeholder.com/120x90/4F46E5/FFFFFF?text=Video+1'},{videoId:'mock_video_2',title:'Mock Video 2: Advanced Features',description:'Explore advanced features of podcast creation.',publishedAt:new Date(Date.now()-172800000).toISOString(),thumbnail:'https://via.placeholder.com/120x90/7C3AED/FFFFFF?text=Video+2'},{videoId:'mock_video_3',title:'Mock Video 3: Monetization Tips',description:'Tips and tricks for monetizing your podcast.',publishedAt:new Date(Date.now()-259200000).toISOString(),thumbnail:'https://via.placeholder.com/120x90/059669/FFFFFF?text=Video+3'}],message:'Mock YouTube channel data fetched successfully - ready for podcast creation form',prefillData:{title:'Mock YouTube Channel Podcast',subtitle:'Podcast created from Mock YouTube Channel',summary:'This is a mock YouTube channel for testing purposes.',author:'Mock YouTube Channel',link:'https://www.youtube.com/channel/UC_mock_channel_id',language:'en',itunesCategories:['Technology'],explicit:'clean',podcastType:'serial',imageFile:'https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Mock+Channel'}};case'create-podcast':return{success:true,podcastId:'mock_podcast_'+Date.now(),podcast:{id:'mock_podcast_'+Date.now(),title:data.title||'Mock Podcast',description:data.description||'Mock podcast description',author:data.author||'Mock Author',language:data.language||'en',explicit:data.explicit||'clean',primaryCategory:data.primaryCategory||'Technology',secondaryCategory:data.secondaryCategory||'',podcastType:data.podcastType||'serial',link:data.link||'https://youtube.com/channel/mock',copyright:data.copyright||'© 2024 Mock Author',ownerName:data.ownerName||'Mock Author',ownerEmail:data.ownerEmail||'mock@example.com',websiteUrl:data.websiteUrl||'https://youtube.com/channel/mock',keywords:data.keywords||'mock, podcast, youtube',slug:((_data$title=data.title)===null||_data$title===void 0?void 0:_data$title.toLowerCase().replace(/[^a-z0-9]+/g,'-'))||'mock-podcast',createdAt:new Date().toISOString(),feedUrl:`https://feeds.megaphone.fm/mock_podcast_${Date.now()}`},message:'Mock podcast created successfully!'};case'create-episodes':const videoIds=data.videoIds||[];return{success:true,results:videoIds.map(videoId=>({videoId,episodeId:`mock_episode_${videoId}`,status:'created',title:`Mock Episode for ${videoId}`})),summary:{total:videoIds.length,successful:videoIds.length,failed:0}};case'user-setup':return{success:true,userId:((_data$userInfo=data.userInfo)===null||_data$userInfo===void 0?void 0:_data$userInfo.id)||'mock_user_123',message:'Mock user setup completed'};default:return{success:true,message:`Mock response for ${endpoint}`};}}// Transform raw YouTube API response into expected format\ntransformYouTubeResponse(rawData){console.log('🔄 Transforming raw YouTube response to expected format');try{var _firstVideo$snippet$t,_firstVideo$snippet$t2,_firstVideo$snippet$t3,_firstVideo$snippet$t4,_firstVideo$snippet$t5,_firstVideo$snippet$t6;// Extract the first item which contains the playlist data\nconst playlistData=rawData[0];if(!playlistData||!playlistData.items){throw new Error('Invalid YouTube response structure');}// Extract channel info from the first video\nconst firstVideo=playlistData.items[0];if(!firstVideo){throw new Error('No videos found in playlist');}// Create channel object\nconst channel={id:firstVideo.snippet.channelId,title:firstVideo.snippet.channelTitle,description:`YouTube channel with ${playlistData.pageInfo.totalResults} videos`,subscriberCount:'N/A',// Not available in playlist response\nvideoCount:playlistData.pageInfo.totalResults.toString(),thumbnail:((_firstVideo$snippet$t=firstVideo.snippet.thumbnails)===null||_firstVideo$snippet$t===void 0?void 0:(_firstVideo$snippet$t2=_firstVideo$snippet$t.high)===null||_firstVideo$snippet$t2===void 0?void 0:_firstVideo$snippet$t2.url)||((_firstVideo$snippet$t3=firstVideo.snippet.thumbnails)===null||_firstVideo$snippet$t3===void 0?void 0:(_firstVideo$snippet$t4=_firstVideo$snippet$t3.medium)===null||_firstVideo$snippet$t4===void 0?void 0:_firstVideo$snippet$t4.url)||((_firstVideo$snippet$t5=firstVideo.snippet.thumbnails)===null||_firstVideo$snippet$t5===void 0?void 0:(_firstVideo$snippet$t6=_firstVideo$snippet$t5.default)===null||_firstVideo$snippet$t6===void 0?void 0:_firstVideo$snippet$t6.url)};// Transform videos\nconst videos=playlistData.items.map(item=>{var _item$snippet$thumbna,_item$snippet$thumbna2,_item$snippet$thumbna3,_item$snippet$thumbna4,_item$snippet$thumbna5,_item$snippet$thumbna6,_item$snippet$thumbna7,_item$snippet$thumbna8;return{videoId:item.snippet.resourceId.videoId,title:item.snippet.title,description:item.snippet.description,publishedAt:item.snippet.publishedAt,thumbnail:((_item$snippet$thumbna=item.snippet.thumbnails)===null||_item$snippet$thumbna===void 0?void 0:(_item$snippet$thumbna2=_item$snippet$thumbna.maxres)===null||_item$snippet$thumbna2===void 0?void 0:_item$snippet$thumbna2.url)||((_item$snippet$thumbna3=item.snippet.thumbnails)===null||_item$snippet$thumbna3===void 0?void 0:(_item$snippet$thumbna4=_item$snippet$thumbna3.high)===null||_item$snippet$thumbna4===void 0?void 0:_item$snippet$thumbna4.url)||((_item$snippet$thumbna5=item.snippet.thumbnails)===null||_item$snippet$thumbna5===void 0?void 0:(_item$snippet$thumbna6=_item$snippet$thumbna5.medium)===null||_item$snippet$thumbna6===void 0?void 0:_item$snippet$thumbna6.url)||((_item$snippet$thumbna7=item.snippet.thumbnails)===null||_item$snippet$thumbna7===void 0?void 0:(_item$snippet$thumbna8=_item$snippet$thumbna7.default)===null||_item$snippet$thumbna8===void 0?void 0:_item$snippet$thumbna8.url),position:item.snippet.position};});// Create prefill data with Megaphone-compatible fields\nconst prefillData={title:channel.title+' Podcast',subtitle:`Podcast created from ${channel.title} YouTube channel`,// New Megaphone field\nsummary:channel.description||`Podcast created from ${channel.title} YouTube channel with ${channel.videoCount} videos.`,// Megaphone uses 'summary'\nauthor:channel.title,link:`https://www.youtube.com/channel/${channel.id}`,language:'en',itunesCategories:['Technology'],// Convert to iTunes categories array\nexplicit:'clean',// Megaphone enum: no/clean/yes\npodcastType:'serial',copyright:`© ${new Date().getFullYear()} ${channel.title}`,ownerName:channel.title,ownerEmail:'',// User will need to fill this\nimageFile:channel.thumbnail||'',// Megaphone uses 'imageFile' instead of 'artworkUrl'\nkeywords:'youtube, podcast, '+channel.title.toLowerCase().replace(/\\s+/g,', ')};const transformedResponse={success:true,channel,videos,message:'YouTube channel data fetched successfully - ready for podcast creation form',prefillData};console.log('✅ Successfully transformed YouTube response:',{channelTitle:channel.title,videoCount:videos.length,hasPreffillData:!!prefillData});return transformedResponse;}catch(error){var _rawData$,_rawData$$items;console.error('❌ Failed to transform YouTube response:',error);// Return fallback response\nreturn{success:true,channel:{id:'unknown',title:'YouTube Channel',description:'Channel data retrieved from YouTube',subscriberCount:'N/A',videoCount:Array.isArray(rawData)&&(_rawData$=rawData[0])!==null&&_rawData$!==void 0&&(_rawData$$items=_rawData$.items)!==null&&_rawData$$items!==void 0&&_rawData$$items.length?rawData[0].items.length.toString():'0'},videos:[],message:'YouTube channel data retrieved (with limited info)',prefillData:{title:'My YouTube Podcast',subtitle:'Podcast created from YouTube channel',summary:'Podcast created from YouTube channel content',author:'YouTube Creator',link:'https://youtube.com',language:'en',itunesCategories:['Technology'],explicit:'clean',podcastType:'serial',imageFile:''}};}}// YouTube Channel Sync - fetches channel data for form prefill\nasync syncYouTubeChannel(accessToken,userId){try{console.log(`🎯 syncYouTubeChannel called with:`,{accessToken:accessToken?`${accessToken.substring(0,10)}...`:'NULL',userId:userId||'NULL'});toast.info('Fetching your YouTube channel data...');const result=await this.makeRequest('youtube-sync',{accessToken,userId});if(result.success){var _result$channel;const channelTitle=((_result$channel=result.channel)===null||_result$channel===void 0?void 0:_result$channel.title)||'Your Channel';toast.success(`Channel \"${channelTitle}\" data fetched successfully!`);return result;}else{throw new Error(result.error||result.message||'Channel sync failed');}}catch(error){console.error('YouTube channel sync failed:',error);throw error;}}// Create Podcast - creates podcast after user fills form\nasync createPodcast(podcastData){try{toast.info('Creating your podcast...');// Ensure all required data is included\nconst podcastPayload={...podcastData,// Add timestamp for uniqueness\ncreatedAt:new Date().toISOString(),// Ensure required fields have defaults\nlanguage:podcastData.language||'en',explicit:podcastData.explicit||'clean',podcastType:podcastData.podcastType||'serial',primaryCategory:podcastData.primaryCategory||'Technology'};console.log('Creating podcast with payload:',podcastPayload);const result=await this.makeRequest('create-podcast',podcastPayload);if(result.success){var _result$payout;// Save podcast details to Supabase (if not already saved via N8N workflow)\ntry{var _result$ids;const userId=podcastPayload.userId;const megaphoneResponse=result.podcast||result.megaphoneResponse;// Only save to Supabase if N8N didn't already handle it\nif(megaphoneResponse&&!((_result$ids=result.ids)!==null&&_result$ids!==void 0&&_result$ids.supabaseId)){console.log('💾 Saving podcast to Supabase...',megaphoneResponse);const supabasePodcast=await savePodcastDetails(userId,podcastPayload,megaphoneResponse);// Store Supabase podcast ID for payout linking\nresult.supabasePodcastId=supabasePodcast.id;result.supabasePodcast=supabasePodcast;console.log('✅ Podcast saved to Supabase:',supabasePodcast.id);}else{console.log('✅ Podcast already saved to Supabase via N8N workflow');}}catch(supabaseError){console.error('❌ Failed to save podcast to Supabase:',supabaseError);// Continue with workflow, but log error\n}// Check if there were any Airwallex errors but still continue\nif(result.airwallexError||((_result$payout=result.payout)===null||_result$payout===void 0?void 0:_result$payout.status)==='incomplete'){console.warn('⚠️ Airwallex beneficiary creation failed:',result.airwallexError);toast.warning('Podcast created! Payout setup needs attention - check dashboard later.');// Save failed payout details to Supabase if we have podcast ID\nif(result.supabasePodcastId&&podcastPayload.payoutData){try{await savePayoutDetails(podcastPayload.userId,result.supabasePodcastId,{...podcastPayload.payoutData,status:'error',error_message:result.airwallexError});}catch(payoutSaveError){console.error('❌ Failed to save payout error to Supabase:',payoutSaveError);}}return{...result,payoutSetupIncomplete:true,payoutError:result.airwallexError};}else{// Save successful payout details to Supabase\nif(result.supabasePodcastId&&podcastPayload.payoutData&&result.airwallexBeneficiaryId){try{await savePayoutDetails(podcastPayload.userId,result.supabasePodcastId,{...podcastPayload.payoutData,airwallexBeneficiaryId:result.airwallexBeneficiaryId,status:'active'});console.log('✅ Payout details saved to Supabase');}catch(payoutSaveError){console.error('❌ Failed to save payout details to Supabase:',payoutSaveError);}}toast.success(`Podcast \"${podcastData.title}\" created successfully!`);}return result;}else{throw new Error(result.error||result.message||'Podcast creation failed');}}catch(error){console.error('Podcast creation failed:',error);throw error;}}// Episode Creation - replaces Megaphone episode API calls\nasync createEpisodes(podcastId,videoIds,userId){try{toast.info(`Creating ${videoIds.length} episodes...`);const result=await this.makeRequest('create-episodes',{podcastId,videoIds,userId});if(result.success){const{successful,failed,total}=result.summary;if(successful>0){toast.success(`${successful}/${total} episodes created successfully!`);}if(failed>0){toast.warning(`${failed}/${total} episodes failed to create`);}return result;}else{throw new Error(result.error||'Episode creation failed');}}catch(error){toast.error(`Episode creation failed: ${error.message}`);throw error;}}// User Setup - handles user data storage\nasync setupUser(googleToken,userInfo){try{console.log('Setting up user with n8n...');const result=await this.makeRequest('user-setup',{googleToken,userInfo});if(result.success){console.log('User setup completed:',result);return result;}else{throw new Error(result.error||'User setup failed');}}catch(error){console.error('User setup failed:',error);// Don't show error toast for user setup - it's background\nthrow error;}}// Health check for n8n connection\nasync healthCheck(){// Mock mode always returns healthy\nif(USE_MOCK_MODE){return true;}try{// Use production webhooks for health check\nconst webhookPath='webhook';const baseUrl=this.baseURL.endsWith('/')?this.baseURL.slice(0,-1):this.baseURL;const healthUrl=`${baseUrl}/${webhookPath}/health`;const response=await fetch(healthUrl);return response.ok;}catch{// Fall back to mock mode if health check fails\nreturn true;// Allow the app to work with mocks\n}}}// Export singleton instance\nexport const n8nApi=new N8nApiService();// Export individual functions for convenience\nexport const syncYouTubeChannel=(accessToken,userId)=>n8nApi.syncYouTubeChannel(accessToken,userId);export const createPodcast=podcastData=>n8nApi.createPodcast(podcastData);export const createEpisodes=(podcastId,videoIds,userId)=>n8nApi.createEpisodes(podcastId,videoIds,userId);export const setupUser=(googleToken,userInfo)=>n8nApi.setupUser(googleToken,userInfo);export default n8nApi;","map":{"version":3,"names":["toast","savePodcastDetails","savePayoutDetails","N8N_BASE_URL","process","env","REACT_APP_N8N_BASE_URL","USE_TEST_WEBHOOKS","REACT_APP_USE_TEST_WEBHOOKS","DEV_MODE","REACT_APP_DEV_MODE","USE_MOCK_MODE","console","log","NODE_ENV","N8nApiService","constructor","baseURL","useTestWebhooks","makeRequest","endpoint","data","baseUrl","endsWith","slice","directUrl","proxyUrl","n8nBaseUrl","payload","JSON","stringify","getMockResponse","targetUrl","usingProxy","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","signal","proxyError","warn","directController","directTimeoutId","clearTimeout","directError","error","ok","errorText","text","status","info","Error","statusText","result","json","finalResult","Array","isArray","success","channel","videos","transformYouTubeResponse","items","message","includes","name","_data$title","_data$userInfo","id","title","description","subscriberCount","videoCount","videoId","publishedAt","Date","now","toISOString","thumbnail","prefillData","subtitle","summary","author","link","language","itunesCategories","explicit","podcastType","imageFile","podcastId","podcast","primaryCategory","secondaryCategory","copyright","ownerName","ownerEmail","websiteUrl","keywords","slug","toLowerCase","replace","createdAt","feedUrl","videoIds","results","map","episodeId","total","length","successful","failed","userId","userInfo","rawData","_firstVideo$snippet$t","_firstVideo$snippet$t2","_firstVideo$snippet$t3","_firstVideo$snippet$t4","_firstVideo$snippet$t5","_firstVideo$snippet$t6","playlistData","firstVideo","snippet","channelId","channelTitle","pageInfo","totalResults","toString","thumbnails","high","url","medium","default","item","_item$snippet$thumbna","_item$snippet$thumbna2","_item$snippet$thumbna3","_item$snippet$thumbna4","_item$snippet$thumbna5","_item$snippet$thumbna6","_item$snippet$thumbna7","_item$snippet$thumbna8","resourceId","maxres","position","getFullYear","transformedResponse","hasPreffillData","_rawData$","_rawData$$items","syncYouTubeChannel","accessToken","substring","_result$channel","createPodcast","podcastData","podcastPayload","_result$payout","_result$ids","megaphoneResponse","ids","supabaseId","supabasePodcast","supabasePodcastId","supabaseError","airwallexError","payout","warning","payoutData","error_message","payoutSaveError","payoutSetupIncomplete","payoutError","airwallexBeneficiaryId","createEpisodes","setupUser","googleToken","healthCheck","webhookPath","healthUrl","n8nApi"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/n8nApi.js"],"sourcesContent":["// Clean n8n API service - replaces all direct API calls\nimport { toast } from 'react-toastify';\nimport { savePodcastDetails, savePayoutDetails } from './supabase';\n\n// n8n Configuration\nconst N8N_BASE_URL = process.env.REACT_APP_N8N_BASE_URL || 'https://n8n-6s78.onrender.com/';\nconst USE_TEST_WEBHOOKS = process.env.REACT_APP_USE_TEST_WEBHOOKS !== 'false'; // Default to true for testing\nconst DEV_MODE = process.env.REACT_APP_DEV_MODE === 'true';\n// Use mock mode only if explicitly enabled\nconst USE_MOCK_MODE = DEV_MODE;\n\nconsole.log('🔧 n8n API Configuration:', {\n  N8N_BASE_URL,\n  USE_TEST_WEBHOOKS,\n  REACT_APP_DEV_MODE: process.env.REACT_APP_DEV_MODE,\n  NODE_ENV: process.env.NODE_ENV,\n  DEV_MODE,\n  USE_MOCK_MODE\n});\n\nclass N8nApiService {\n  constructor() {\n    this.baseURL = N8N_BASE_URL;\n    this.useTestWebhooks = USE_TEST_WEBHOOKS;\n  }\n\n  async makeRequest(endpoint, data) {\n    // Use the actual n8n service URL\n    const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n    const directUrl = `${baseUrl}/webhook/${endpoint}`;\n    const proxyUrl = `http://localhost:8000/api/n8n/${endpoint}`;\n      \n    console.log(`📡 Making request to endpoint: ${endpoint}`, {\n      USE_MOCK_MODE,\n      DEV_MODE,\n      n8nBaseUrl: baseUrl,\n      directUrl,\n      proxyUrl,\n      payload: data\n    });\n    \n    // Log the exact data being sent for debugging\n    console.log(`🔍 Webhook payload for ${endpoint}:`, JSON.stringify(data, null, 2));\n    \n    // Use mock mode if explicitly enabled\n    if (USE_MOCK_MODE) {\n      console.log(`🧪 Using mock response for ${endpoint}`);\n      return this.getMockResponse(endpoint, data);\n    }\n    \n    try {\n      // Try proxy first to avoid CORS, then fallback to direct\n      let targetUrl = proxyUrl;\n      let usingProxy = true;\n      \n      console.log(`🌐 Calling n8n via proxy: ${targetUrl}`);\n      \n      // Add timeout to prevent hanging\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      let response;\n      \n      try {\n        // Try proxy first\n        response = await fetch(targetUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n          signal: controller.signal\n        });\n      } catch (proxyError) {\n        if (usingProxy) {\n          console.warn('🔄 Proxy failed, trying direct n8n connection...');\n          targetUrl = directUrl;\n          usingProxy = false;\n          \n          // Try direct connection\n          const directController = new AbortController();\n          const directTimeoutId = setTimeout(() => directController.abort(), 10000);\n          \n          try {\n            response = await fetch(targetUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(data),\n              signal: directController.signal\n            });\n            clearTimeout(directTimeoutId);\n          } catch (directError) {\n            clearTimeout(directTimeoutId);\n            console.error('❌ Both proxy and direct connections failed');\n            throw directError;\n          }\n        } else {\n          throw proxyError;\n        }\n      }\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`❌ HTTP ${response.status} error for ${endpoint}:`, errorText);\n        console.error(`📤 Request was made to: ${targetUrl}`);\n        console.error(`📦 Request payload was:`, JSON.stringify(data, null, 2));\n        \n        // For 404 errors in dev mode, fall back to mock (workflow not configured)  \n        if (DEV_MODE && response.status === 404) {\n          console.warn('🔄 n8n workflow not found, falling back to mock response');\n          toast.info('Using offline mode - n8n workflow not configured');\n          return this.getMockResponse(endpoint, data);\n        }\n        \n        // Only fall back to mock for server errors in dev mode\n        if (DEV_MODE && response.status >= 500) {\n          console.warn('Server error in dev mode, falling back to mock response');\n          return this.getMockResponse(endpoint, data);\n        }\n        \n        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log(`n8n response from ${endpoint}:`, result);\n      \n      // Handle N8N array response format\n      const finalResult = Array.isArray(result) ? result[0] : result;\n      console.log(`Processed response:`, finalResult);\n      \n      // Handle different response formats from n8n workflow\n      if (endpoint === 'youtube-sync') {\n        // Check if it's already in the expected format\n        if (finalResult.success && finalResult.channel && finalResult.videos) {\n          console.log('✅ Received properly formatted YouTube sync response');\n          return finalResult;\n        }\n        \n        // Handle raw YouTube API response format\n        if (Array.isArray(finalResult) && !finalResult.success) {\n          console.warn('⚠️ n8n returned raw YouTube data, transforming...');\n          return this.transformYouTubeResponse(finalResult);\n        }\n        \n        // Handle single object response format\n        if (finalResult.channel || finalResult.videos || finalResult.items) {\n          console.warn('⚠️ n8n returned partial data format, transforming...');\n          return this.transformYouTubeResponse([finalResult]);\n        }\n      }\n      \n      return finalResult;\n    } catch (error) {\n      console.error(`n8n API error for ${endpoint}:`, error);\n      \n      // Only fall back to mock if explicitly in dev mode AND network fails\n      if (DEV_MODE && (error.message.includes('Failed to fetch') || \n          error.message.includes('NetworkError') ||\n          error.name === 'AbortError' ||\n          error.message.includes('fetch'))) {\n        console.warn('🔄 Network/timeout error in dev mode, falling back to mock response');\n        toast.info('Using offline mode - n8n server not available');\n        return this.getMockResponse(endpoint, data);\n      }\n      \n      // Better error messages\n      if (error.message.includes('HTTP 404')) {\n        throw new Error('Workflow not found. Please ensure n8n workflows are properly set up.');\n      } else if (error.message.includes('HTTP 500')) {\n        throw new Error('Server error occurred. Please try again in a moment.');\n      } else {\n        throw new Error(`n8n workflow failed: ${error.message}`);\n      }\n    }\n  }\n  \n  // Mock responses for development\n  getMockResponse(endpoint, data) {\n    console.log(`🧪 Using mock response for ${endpoint}`);\n    \n    switch (endpoint) {\n      case 'youtube-sync':\n        return {\n          success: true,\n          channel: {\n            id: 'UC_mock_channel_id',\n            title: 'Mock YouTube Channel',\n            description: 'This is a mock YouTube channel for testing purposes.',\n            subscriberCount: '1234',\n            videoCount: '42'\n          },\n          videos: [\n            {\n              videoId: 'mock_video_1',\n              title: 'Mock Video 1: Introduction to PodPay',\n              description: 'Learn how to use PodPay to convert YouTube videos to podcasts.',\n              publishedAt: new Date(Date.now() - 86400000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/4F46E5/FFFFFF?text=Video+1'\n            },\n            {\n              videoId: 'mock_video_2', \n              title: 'Mock Video 2: Advanced Features',\n              description: 'Explore advanced features of podcast creation.',\n              publishedAt: new Date(Date.now() - 172800000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/7C3AED/FFFFFF?text=Video+2'\n            },\n            {\n              videoId: 'mock_video_3',\n              title: 'Mock Video 3: Monetization Tips',\n              description: 'Tips and tricks for monetizing your podcast.',\n              publishedAt: new Date(Date.now() - 259200000).toISOString(),\n              thumbnail: 'https://via.placeholder.com/120x90/059669/FFFFFF?text=Video+3'\n            }\n          ],\n          message: 'Mock YouTube channel data fetched successfully - ready for podcast creation form',\n          prefillData: {\n            title: 'Mock YouTube Channel Podcast',\n            subtitle: 'Podcast created from Mock YouTube Channel',\n            summary: 'This is a mock YouTube channel for testing purposes.',\n            author: 'Mock YouTube Channel',\n            link: 'https://www.youtube.com/channel/UC_mock_channel_id',\n            language: 'en',\n            itunesCategories: ['Technology'],\n            explicit: 'clean',\n            podcastType: 'serial',\n            imageFile: 'https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Mock+Channel'\n          }\n        };\n        \n      case 'create-podcast':\n        return {\n          success: true,\n          podcastId: 'mock_podcast_' + Date.now(),\n          podcast: {\n            id: 'mock_podcast_' + Date.now(),\n            title: data.title || 'Mock Podcast',\n            description: data.description || 'Mock podcast description',\n            author: data.author || 'Mock Author',\n            language: data.language || 'en',\n            explicit: data.explicit || 'clean',\n            primaryCategory: data.primaryCategory || 'Technology',\n            secondaryCategory: data.secondaryCategory || '',\n            podcastType: data.podcastType || 'serial',\n            link: data.link || 'https://youtube.com/channel/mock',\n            copyright: data.copyright || '© 2024 Mock Author',\n            ownerName: data.ownerName || 'Mock Author',\n            ownerEmail: data.ownerEmail || 'mock@example.com',\n            websiteUrl: data.websiteUrl || 'https://youtube.com/channel/mock',\n            keywords: data.keywords || 'mock, podcast, youtube',\n            slug: data.title?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || 'mock-podcast',\n            createdAt: new Date().toISOString(),\n            feedUrl: `https://feeds.megaphone.fm/mock_podcast_${Date.now()}`\n          },\n          message: 'Mock podcast created successfully!'\n        };\n        \n      case 'create-episodes':\n        const videoIds = data.videoIds || [];\n        return {\n          success: true,\n          results: videoIds.map(videoId => ({\n            videoId,\n            episodeId: `mock_episode_${videoId}`,\n            status: 'created',\n            title: `Mock Episode for ${videoId}`\n          })),\n          summary: {\n            total: videoIds.length,\n            successful: videoIds.length,\n            failed: 0\n          }\n        };\n        \n      case 'user-setup':\n        return {\n          success: true,\n          userId: data.userInfo?.id || 'mock_user_123',\n          message: 'Mock user setup completed'\n        };\n        \n      default:\n        return {\n          success: true,\n          message: `Mock response for ${endpoint}`\n        };\n    }\n  }\n  \n  // Transform raw YouTube API response into expected format\n  transformYouTubeResponse(rawData) {\n    console.log('🔄 Transforming raw YouTube response to expected format');\n    \n    try {\n      // Extract the first item which contains the playlist data\n      const playlistData = rawData[0];\n      \n      if (!playlistData || !playlistData.items) {\n        throw new Error('Invalid YouTube response structure');\n      }\n      \n      // Extract channel info from the first video\n      const firstVideo = playlistData.items[0];\n      if (!firstVideo) {\n        throw new Error('No videos found in playlist');\n      }\n      \n      // Create channel object\n      const channel = {\n        id: firstVideo.snippet.channelId,\n        title: firstVideo.snippet.channelTitle,\n        description: `YouTube channel with ${playlistData.pageInfo.totalResults} videos`,\n        subscriberCount: 'N/A', // Not available in playlist response\n        videoCount: playlistData.pageInfo.totalResults.toString(),\n        thumbnail: firstVideo.snippet.thumbnails?.high?.url || \n                  firstVideo.snippet.thumbnails?.medium?.url || \n                  firstVideo.snippet.thumbnails?.default?.url\n      };\n      \n      // Transform videos\n      const videos = playlistData.items.map(item => ({\n        videoId: item.snippet.resourceId.videoId,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        publishedAt: item.snippet.publishedAt,\n        thumbnail: item.snippet.thumbnails?.maxres?.url || \n                  item.snippet.thumbnails?.high?.url || \n                  item.snippet.thumbnails?.medium?.url || \n                  item.snippet.thumbnails?.default?.url,\n        position: item.snippet.position\n      }));\n      \n      // Create prefill data with Megaphone-compatible fields\n      const prefillData = {\n        title: channel.title + ' Podcast',\n        subtitle: `Podcast created from ${channel.title} YouTube channel`, // New Megaphone field\n        summary: channel.description || `Podcast created from ${channel.title} YouTube channel with ${channel.videoCount} videos.`, // Megaphone uses 'summary'\n        author: channel.title,\n        link: `https://www.youtube.com/channel/${channel.id}`,\n        language: 'en',\n        itunesCategories: ['Technology'], // Convert to iTunes categories array\n        explicit: 'clean', // Megaphone enum: no/clean/yes\n        podcastType: 'serial',\n        copyright: `© ${new Date().getFullYear()} ${channel.title}`,\n        ownerName: channel.title,\n        ownerEmail: '', // User will need to fill this\n        imageFile: channel.thumbnail || '', // Megaphone uses 'imageFile' instead of 'artworkUrl'\n        keywords: 'youtube, podcast, ' + channel.title.toLowerCase().replace(/\\s+/g, ', ')\n      };\n      \n      const transformedResponse = {\n        success: true,\n        channel,\n        videos,\n        message: 'YouTube channel data fetched successfully - ready for podcast creation form',\n        prefillData\n      };\n      \n      console.log('✅ Successfully transformed YouTube response:', {\n        channelTitle: channel.title,\n        videoCount: videos.length,\n        hasPreffillData: !!prefillData\n      });\n      \n      return transformedResponse;\n      \n    } catch (error) {\n      console.error('❌ Failed to transform YouTube response:', error);\n      \n      // Return fallback response\n      return {\n        success: true,\n        channel: {\n          id: 'unknown',\n          title: 'YouTube Channel',\n          description: 'Channel data retrieved from YouTube',\n          subscriberCount: 'N/A',\n          videoCount: Array.isArray(rawData) && rawData[0]?.items?.length ? rawData[0].items.length.toString() : '0'\n        },\n        videos: [],\n        message: 'YouTube channel data retrieved (with limited info)',\n        prefillData: {\n          title: 'My YouTube Podcast',\n          subtitle: 'Podcast created from YouTube channel',\n          summary: 'Podcast created from YouTube channel content',\n          author: 'YouTube Creator',\n          link: 'https://youtube.com',\n          language: 'en',\n          itunesCategories: ['Technology'],\n          explicit: 'clean',\n          podcastType: 'serial',\n          imageFile: ''\n        }\n      };\n    }\n  }\n\n  // YouTube Channel Sync - fetches channel data for form prefill\n  async syncYouTubeChannel(accessToken, userId) {\n    try {\n      console.log(`🎯 syncYouTubeChannel called with:`, {\n        accessToken: accessToken ? `${accessToken.substring(0, 10)}...` : 'NULL',\n        userId: userId || 'NULL'\n      });\n      \n      toast.info('Fetching your YouTube channel data...');\n      \n      const result = await this.makeRequest('youtube-sync', {\n        accessToken,\n        userId\n      });\n      \n      if (result.success) {\n        const channelTitle = result.channel?.title || 'Your Channel';\n        toast.success(`Channel \"${channelTitle}\" data fetched successfully!`);\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Channel sync failed');\n      }\n    } catch (error) {\n      console.error('YouTube channel sync failed:', error);\n      throw error;\n    }\n  }\n\n  // Create Podcast - creates podcast after user fills form\n  async createPodcast(podcastData) {\n    try {\n      toast.info('Creating your podcast...');\n      \n      // Ensure all required data is included\n      const podcastPayload = {\n        ...podcastData,\n        // Add timestamp for uniqueness\n        createdAt: new Date().toISOString(),\n        // Ensure required fields have defaults\n        language: podcastData.language || 'en',\n        explicit: podcastData.explicit || 'clean',\n        podcastType: podcastData.podcastType || 'serial',\n        primaryCategory: podcastData.primaryCategory || 'Technology'\n      };\n      \n      console.log('Creating podcast with payload:', podcastPayload);\n      \n      const result = await this.makeRequest('create-podcast', podcastPayload);\n      \n      if (result.success) {\n        // Save podcast details to Supabase (if not already saved via N8N workflow)\n        try {\n          const userId = podcastPayload.userId;\n          const megaphoneResponse = result.podcast || result.megaphoneResponse;\n          \n          // Only save to Supabase if N8N didn't already handle it\n          if (megaphoneResponse && !result.ids?.supabaseId) {\n            console.log('💾 Saving podcast to Supabase...', megaphoneResponse);\n            const supabasePodcast = await savePodcastDetails(userId, podcastPayload, megaphoneResponse);\n            \n            // Store Supabase podcast ID for payout linking\n            result.supabasePodcastId = supabasePodcast.id;\n            result.supabasePodcast = supabasePodcast;\n            \n            console.log('✅ Podcast saved to Supabase:', supabasePodcast.id);\n          } else {\n            console.log('✅ Podcast already saved to Supabase via N8N workflow');\n          }\n        } catch (supabaseError) {\n          console.error('❌ Failed to save podcast to Supabase:', supabaseError);\n          // Continue with workflow, but log error\n        }\n\n        // Check if there were any Airwallex errors but still continue\n        if (result.airwallexError || result.payout?.status === 'incomplete') {\n          console.warn('⚠️ Airwallex beneficiary creation failed:', result.airwallexError);\n          toast.warning('Podcast created! Payout setup needs attention - check dashboard later.');\n          \n          // Save failed payout details to Supabase if we have podcast ID\n          if (result.supabasePodcastId && podcastPayload.payoutData) {\n            try {\n              await savePayoutDetails(\n                podcastPayload.userId, \n                result.supabasePodcastId, \n                {\n                  ...podcastPayload.payoutData,\n                  status: 'error',\n                  error_message: result.airwallexError\n                }\n              );\n            } catch (payoutSaveError) {\n              console.error('❌ Failed to save payout error to Supabase:', payoutSaveError);\n            }\n          }\n          \n          return {\n            ...result,\n            payoutSetupIncomplete: true,\n            payoutError: result.airwallexError\n          };\n        } else {\n          // Save successful payout details to Supabase\n          if (result.supabasePodcastId && podcastPayload.payoutData && result.airwallexBeneficiaryId) {\n            try {\n              await savePayoutDetails(\n                podcastPayload.userId, \n                result.supabasePodcastId, \n                {\n                  ...podcastPayload.payoutData,\n                  airwallexBeneficiaryId: result.airwallexBeneficiaryId,\n                  status: 'active'\n                }\n              );\n              console.log('✅ Payout details saved to Supabase');\n            } catch (payoutSaveError) {\n              console.error('❌ Failed to save payout details to Supabase:', payoutSaveError);\n            }\n          }\n          \n          toast.success(`Podcast \"${podcastData.title}\" created successfully!`);\n        }\n        return result;\n      } else {\n        throw new Error(result.error || result.message || 'Podcast creation failed');\n      }\n    } catch (error) {\n      console.error('Podcast creation failed:', error);\n      throw error;\n    }\n  }\n\n  // Episode Creation - replaces Megaphone episode API calls\n  async createEpisodes(podcastId, videoIds, userId) {\n    try {\n      toast.info(`Creating ${videoIds.length} episodes...`);\n      \n      const result = await this.makeRequest('create-episodes', {\n        podcastId,\n        videoIds,\n        userId\n      });\n      \n      if (result.success) {\n        const { successful, failed, total } = result.summary;\n        \n        if (successful > 0) {\n          toast.success(`${successful}/${total} episodes created successfully!`);\n        }\n        if (failed > 0) {\n          toast.warning(`${failed}/${total} episodes failed to create`);\n        }\n        \n        return result;\n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n    } catch (error) {\n      toast.error(`Episode creation failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  // User Setup - handles user data storage\n  async setupUser(googleToken, userInfo) {\n    try {\n      console.log('Setting up user with n8n...');\n      \n      const result = await this.makeRequest('user-setup', {\n        googleToken,\n        userInfo\n      });\n      \n      if (result.success) {\n        console.log('User setup completed:', result);\n        return result;\n      } else {\n        throw new Error(result.error || 'User setup failed');\n      }\n    } catch (error) {\n      console.error('User setup failed:', error);\n      // Don't show error toast for user setup - it's background\n      throw error;\n    }\n  }\n\n  // Health check for n8n connection\n  async healthCheck() {\n    // Mock mode always returns healthy\n    if (USE_MOCK_MODE) {\n      return true;\n    }\n    \n    try {\n      // Use production webhooks for health check\n      const webhookPath = 'webhook';\n      const baseUrl = this.baseURL.endsWith('/') ? this.baseURL.slice(0, -1) : this.baseURL;\n      const healthUrl = `${baseUrl}/${webhookPath}/health`;\n      const response = await fetch(healthUrl);\n      return response.ok;\n    } catch {\n      // Fall back to mock mode if health check fails\n      return true; // Allow the app to work with mocks\n    }\n  }\n}\n\n// Export singleton instance\nexport const n8nApi = new N8nApiService();\n\n// Export individual functions for convenience\nexport const syncYouTubeChannel = (accessToken, userId) => \n  n8nApi.syncYouTubeChannel(accessToken, userId);\n\nexport const createPodcast = (podcastData) => \n  n8nApi.createPodcast(podcastData);\n\nexport const createEpisodes = (podcastId, videoIds, userId) => \n  n8nApi.createEpisodes(podcastId, videoIds, userId);\n\nexport const setupUser = (googleToken, userInfo) => \n  n8nApi.setupUser(googleToken, userInfo);\n\nexport default n8nApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
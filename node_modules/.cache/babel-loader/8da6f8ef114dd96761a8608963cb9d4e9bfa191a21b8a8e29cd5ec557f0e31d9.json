{"ast":null,"code":"// Megaphone API Service for fetching episode status and data\n\nclass MegaphoneApiService {\n  constructor() {\n    this.apiToken = process.env.REACT_APP_MEGAPHONE_API_TOKEN;\n    this.networkId = process.env.REACT_APP_MEGAPHONE_NETWORK_ID;\n    this.baseUrl = 'https://cms.megaphone.fm/api';\n  }\n\n  // Get headers for Megaphone API requests\n  getHeaders() {\n    return {\n      'Authorization': `Token token=\"${this.apiToken}\"`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  // Fetch episode details from Megaphone API\n  async getEpisodeStatus(podcastId, episodeId) {\n    if (!this.apiToken || !this.networkId) {\n      console.warn('⚠️ Megaphone API credentials not configured');\n      return null;\n    }\n    try {\n      console.log(`🎧 Fetching episode status from Megaphone API:`, {\n        podcastId,\n        episodeId\n      });\n      const url = `${this.baseUrl}/podcasts/${podcastId}/episodes/${episodeId}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(`📻 Episode ${episodeId} not found in Megaphone`);\n          return null;\n        }\n        throw new Error(`Megaphone API error: ${response.status} - ${response.statusText}`);\n      }\n      const episodeData = await response.json();\n      console.log(`✅ Retrieved episode data from Megaphone:`, episodeData);\n\n      // Transform Megaphone status to our UI status\n      const status = this.transformMegaphoneStatus(episodeData.status);\n      return {\n        status,\n        originalStatus: episodeData.status,\n        publishedAt: episodeData.published_at,\n        createdAt: episodeData.created_at,\n        updatedAt: episodeData.updated_at,\n        title: episodeData.title,\n        summary: episodeData.summary,\n        uid: episodeData.uid,\n        rawData: episodeData\n      };\n    } catch (error) {\n      console.error(`❌ Failed to fetch episode status from Megaphone:`, error);\n      return null;\n    }\n  }\n\n  // Transform Megaphone status to UI-friendly status\n  transformMegaphoneStatus(megaphoneStatus) {\n    if (!megaphoneStatus) return 'Processing';\n    switch (megaphoneStatus.toLowerCase()) {\n      case 'published':\n        return 'Live';\n      case 'scheduled':\n        return 'Scheduled';\n      case 'draft':\n        return 'Draft';\n      case 'processing':\n        return 'Processing';\n      default:\n        console.log(`🔍 Unknown Megaphone status: \"${megaphoneStatus}\"`);\n        return 'Processing';\n    }\n  }\n\n  // Fetch multiple episodes status in parallel\n  async getMultipleEpisodeStatus(episodes) {\n    if (!episodes || episodes.length === 0) return [];\n    console.log(`🎧 Fetching status for ${episodes.length} episodes from Megaphone API`);\n    const statusPromises = episodes.map(async episode => {\n      if (!episode.megaphoneEpisodeId || !episode.podcastId) {\n        console.warn(`⚠️ Missing IDs for episode ${episode.id}:`, {\n          megaphoneEpisodeId: episode.megaphoneEpisodeId,\n          podcastId: episode.podcastId\n        });\n        return {\n          ...episode,\n          megaphoneStatus: null\n        };\n      }\n      const statusData = await this.getEpisodeStatus(episode.podcastId, episode.megaphoneEpisodeId);\n      return {\n        ...episode,\n        megaphoneStatus: statusData\n      };\n    });\n    try {\n      const results = await Promise.allSettled(statusPromises);\n      return results.map((result, index) => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          console.error(`❌ Failed to fetch status for episode ${episodes[index].id}:`, result.reason);\n          return {\n            ...episodes[index],\n            megaphoneStatus: null\n          };\n        }\n      });\n    } catch (error) {\n      console.error('❌ Error in batch episode status fetch:', error);\n      return episodes.map(episode => ({\n        ...episode,\n        megaphoneStatus: null\n      }));\n    }\n  }\n}\nexport const megaphoneApiService = new MegaphoneApiService();\nexport default megaphoneApiService;","map":{"version":3,"names":["MegaphoneApiService","constructor","apiToken","process","env","REACT_APP_MEGAPHONE_API_TOKEN","networkId","REACT_APP_MEGAPHONE_NETWORK_ID","baseUrl","getHeaders","getEpisodeStatus","podcastId","episodeId","console","warn","log","url","response","fetch","method","headers","ok","status","Error","statusText","episodeData","json","transformMegaphoneStatus","originalStatus","publishedAt","published_at","createdAt","created_at","updatedAt","updated_at","title","summary","uid","rawData","error","megaphoneStatus","toLowerCase","getMultipleEpisodeStatus","episodes","length","statusPromises","map","episode","megaphoneEpisodeId","id","statusData","results","Promise","allSettled","result","index","value","reason","megaphoneApiService"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/services/megaphoneApi.js"],"sourcesContent":["// Megaphone API Service for fetching episode status and data\n\nclass MegaphoneApiService {\n  constructor() {\n    this.apiToken = process.env.REACT_APP_MEGAPHONE_API_TOKEN;\n    this.networkId = process.env.REACT_APP_MEGAPHONE_NETWORK_ID;\n    this.baseUrl = 'https://cms.megaphone.fm/api';\n  }\n\n  // Get headers for Megaphone API requests\n  getHeaders() {\n    return {\n      'Authorization': `Token token=\"${this.apiToken}\"`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  // Fetch episode details from Megaphone API\n  async getEpisodeStatus(podcastId, episodeId) {\n    if (!this.apiToken || !this.networkId) {\n      console.warn('⚠️ Megaphone API credentials not configured');\n      return null;\n    }\n\n    try {\n      console.log(`🎧 Fetching episode status from Megaphone API:`, { podcastId, episodeId });\n      \n      const url = `${this.baseUrl}/podcasts/${podcastId}/episodes/${episodeId}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(`📻 Episode ${episodeId} not found in Megaphone`);\n          return null;\n        }\n        throw new Error(`Megaphone API error: ${response.status} - ${response.statusText}`);\n      }\n\n      const episodeData = await response.json();\n      console.log(`✅ Retrieved episode data from Megaphone:`, episodeData);\n\n      // Transform Megaphone status to our UI status\n      const status = this.transformMegaphoneStatus(episodeData.status);\n      \n      return {\n        status,\n        originalStatus: episodeData.status,\n        publishedAt: episodeData.published_at,\n        createdAt: episodeData.created_at,\n        updatedAt: episodeData.updated_at,\n        title: episodeData.title,\n        summary: episodeData.summary,\n        uid: episodeData.uid,\n        rawData: episodeData\n      };\n\n    } catch (error) {\n      console.error(`❌ Failed to fetch episode status from Megaphone:`, error);\n      return null;\n    }\n  }\n\n  // Transform Megaphone status to UI-friendly status\n  transformMegaphoneStatus(megaphoneStatus) {\n    if (!megaphoneStatus) return 'Processing';\n    \n    switch (megaphoneStatus.toLowerCase()) {\n      case 'published':\n        return 'Live';\n      case 'scheduled':\n        return 'Scheduled';\n      case 'draft':\n        return 'Draft';\n      case 'processing':\n        return 'Processing';\n      default:\n        console.log(`🔍 Unknown Megaphone status: \"${megaphoneStatus}\"`);\n        return 'Processing';\n    }\n  }\n\n  // Fetch multiple episodes status in parallel\n  async getMultipleEpisodeStatus(episodes) {\n    if (!episodes || episodes.length === 0) return [];\n\n    console.log(`🎧 Fetching status for ${episodes.length} episodes from Megaphone API`);\n    \n    const statusPromises = episodes.map(async (episode) => {\n      if (!episode.megaphoneEpisodeId || !episode.podcastId) {\n        console.warn(`⚠️ Missing IDs for episode ${episode.id}:`, { \n          megaphoneEpisodeId: episode.megaphoneEpisodeId, \n          podcastId: episode.podcastId \n        });\n        return { ...episode, megaphoneStatus: null };\n      }\n\n      const statusData = await this.getEpisodeStatus(episode.podcastId, episode.megaphoneEpisodeId);\n      return {\n        ...episode,\n        megaphoneStatus: statusData\n      };\n    });\n\n    try {\n      const results = await Promise.allSettled(statusPromises);\n      return results.map((result, index) => {\n        if (result.status === 'fulfilled') {\n          return result.value;\n        } else {\n          console.error(`❌ Failed to fetch status for episode ${episodes[index].id}:`, result.reason);\n          return { ...episodes[index], megaphoneStatus: null };\n        }\n      });\n    } catch (error) {\n      console.error('❌ Error in batch episode status fetch:', error);\n      return episodes.map(episode => ({ ...episode, megaphoneStatus: null }));\n    }\n  }\n}\n\nexport const megaphoneApiService = new MegaphoneApiService();\nexport default megaphoneApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
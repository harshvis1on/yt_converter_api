{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{toast}from'react-toastify';import PodcastOnboardingWizard from'./PodcastOnboardingWizard';import{createPodcast}from'../services/n8nApi';import{getUserPodcasts}from'../services/supabase';import{safeGetItem}from'../utils/localStorage';import{markOnboardingCompleted}from'../utils/onboarding';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function PodcastCreationFlow(){const navigate=useNavigate();const[loading,setLoading]=useState(false);const[channelData,setChannelData]=useState(null);const[prefillData,setPrefillData]=useState(null);const[checkingExistingPodcast,setCheckingExistingPodcast]=useState(true);// Check for existing podcasts and validate user access\nuseEffect(()=>{const checkUserPodcastStatus=async()=>{try{// Get user info from localStorage\nconst userInfo=safeGetItem('user_info');if(!userInfo||!userInfo.id){toast.error('User information not found. Please sign in again.');navigate('/auth',{replace:true});return;}console.log('🔍 Checking if user already has a podcast...');// Check if user already has a podcast\nconst existingPodcasts=await getUserPodcasts(userInfo.id);if(existingPodcasts&&existingPodcasts.length>0){console.log('⚠️ User already has a podcast, redirecting to dashboard');toast.info(`You already have a podcast: \"${existingPodcasts[0].title}\". Redirecting to dashboard.`);// Mark onboarding as complete and set current podcast\nlocalStorage.setItem('currentPodcast',JSON.stringify(existingPodcasts[0]));localStorage.setItem('onboardingCompleted','true');setTimeout(()=>{navigate('/dashboard',{replace:true});},2000);return;}console.log('✅ No existing podcast found, user can create new one');// Load channel data and validate\nconst storedChannelData=safeGetItem('channelData');const storedPrefillData=safeGetItem('prefillData');setChannelData(storedChannelData);setPrefillData(storedPrefillData);setCheckingExistingPodcast(false);// Redirect if no channel data after check\nif(!storedChannelData){console.log('No channel data found, redirecting to auth');toast.error('No channel data found. Please start over.');setTimeout(()=>{navigate('/auth',{replace:true});},1000);}}catch(error){console.error('❌ Error checking podcast status:',error);toast.error('Error checking your account status. Please try again.');setCheckingExistingPodcast(false);}};checkUserPodcastStatus();},[navigate]);const handleFormSubmit=async formData=>{setLoading(true);try{// Double-check that user doesn't already have a podcast (safety measure)\nconst userInfo=safeGetItem('user_info');if(userInfo&&userInfo.id){console.log('🛡️ Final check: Ensuring user can create podcast...');const existingPodcasts=await getUserPodcasts(userInfo.id);if(existingPodcasts&&existingPodcasts.length>0){console.log('🚫 User already has a podcast, blocking creation');toast.error(`You already have a podcast: \"${existingPodcasts[0].title}\". Cannot create another.`);setLoading(false);navigate('/dashboard',{replace:true});return;}}console.log('✅ User verified to create podcast, proceeding...');const result=await createPodcast(formData);if(result&&result.success){// Mark onboarding as completed using utility\nmarkOnboardingCompleted(result.podcastId,result.podcast);// Clean up temporary data\nlocalStorage.removeItem('prefillData');localStorage.removeItem('channelData');localStorage.removeItem('videosData');// Show success message\ntoast.success(`🎉 Podcast \"${formData.title}\" created successfully!`);// Navigate to dashboard\nsetTimeout(()=>{navigate('/dashboard',{replace:true});},2000);}else{throw new Error((result===null||result===void 0?void 0:result.message)||'Podcast creation failed');}}catch(error){console.error('Podcast creation error:',error);toast.error('Failed to create podcast: '+error.message);setLoading(false);}};const handleCancel=()=>{// Clean up stored data and redirect back to auth\nlocalStorage.removeItem('channelData');localStorage.removeItem('videosData');localStorage.removeItem('prefillData');toast.info('Podcast creation cancelled');navigate('/auth',{replace:true});};// Show loading while checking existing podcasts or loading data\nif(checkingExistingPodcast||!channelData||!prefillData){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center bg-gray-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500 mx-auto mb-4\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",children:checkingExistingPodcast?'Checking your account status...':'Loading channel data...'})]})});}return/*#__PURE__*/_jsx(PodcastOnboardingWizard,{channelData:channelData,prefillData:prefillData,onSubmit:handleFormSubmit,onCancel:handleCancel,loading:loading});}","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","PodcastOnboardingWizard","createPodcast","getUserPodcasts","safeGetItem","markOnboardingCompleted","jsx","_jsx","jsxs","_jsxs","PodcastCreationFlow","navigate","loading","setLoading","channelData","setChannelData","prefillData","setPrefillData","checkingExistingPodcast","setCheckingExistingPodcast","checkUserPodcastStatus","userInfo","id","error","replace","console","log","existingPodcasts","length","info","title","localStorage","setItem","JSON","stringify","setTimeout","storedChannelData","storedPrefillData","handleFormSubmit","formData","result","success","podcastId","podcast","removeItem","Error","message","handleCancel","className","children","onSubmit","onCancel"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/components/PodcastCreationFlow.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PodcastOnboardingWizard from './PodcastOnboardingWizard';\nimport { createPodcast } from '../services/n8nApi';\nimport { getUserPodcasts } from '../services/supabase';\nimport { safeGetItem } from '../utils/localStorage';\nimport { markOnboardingCompleted } from '../utils/onboarding';\n\nexport default function PodcastCreationFlow() {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [channelData, setChannelData] = useState(null);\n  const [prefillData, setPrefillData] = useState(null);\n  const [checkingExistingPodcast, setCheckingExistingPodcast] = useState(true);\n\n  // Check for existing podcasts and validate user access\n  useEffect(() => {\n    const checkUserPodcastStatus = async () => {\n      try {\n        // Get user info from localStorage\n        const userInfo = safeGetItem('user_info');\n        if (!userInfo || !userInfo.id) {\n          toast.error('User information not found. Please sign in again.');\n          navigate('/auth', { replace: true });\n          return;\n        }\n\n        console.log('🔍 Checking if user already has a podcast...');\n        \n        // Check if user already has a podcast\n        const existingPodcasts = await getUserPodcasts(userInfo.id);\n        \n        if (existingPodcasts && existingPodcasts.length > 0) {\n          console.log('⚠️ User already has a podcast, redirecting to dashboard');\n          toast.info(`You already have a podcast: \"${existingPodcasts[0].title}\". Redirecting to dashboard.`);\n          \n          // Mark onboarding as complete and set current podcast\n          localStorage.setItem('currentPodcast', JSON.stringify(existingPodcasts[0]));\n          localStorage.setItem('onboardingCompleted', 'true');\n          \n          setTimeout(() => {\n            navigate('/dashboard', { replace: true });\n          }, 2000);\n          return;\n        }\n\n        console.log('✅ No existing podcast found, user can create new one');\n        \n        // Load channel data and validate\n        const storedChannelData = safeGetItem('channelData');\n        const storedPrefillData = safeGetItem('prefillData');\n        \n        setChannelData(storedChannelData);\n        setPrefillData(storedPrefillData);\n        setCheckingExistingPodcast(false);\n        \n        // Redirect if no channel data after check\n        if (!storedChannelData) {\n          console.log('No channel data found, redirecting to auth');\n          toast.error('No channel data found. Please start over.');\n          setTimeout(() => {\n            navigate('/auth', { replace: true });\n          }, 1000);\n        }\n        \n      } catch (error) {\n        console.error('❌ Error checking podcast status:', error);\n        toast.error('Error checking your account status. Please try again.');\n        setCheckingExistingPodcast(false);\n      }\n    };\n\n    checkUserPodcastStatus();\n  }, [navigate]);\n\n  const handleFormSubmit = async (formData) => {\n    setLoading(true);\n    \n    try {\n      // Double-check that user doesn't already have a podcast (safety measure)\n      const userInfo = safeGetItem('user_info');\n      if (userInfo && userInfo.id) {\n        console.log('🛡️ Final check: Ensuring user can create podcast...');\n        const existingPodcasts = await getUserPodcasts(userInfo.id);\n        \n        if (existingPodcasts && existingPodcasts.length > 0) {\n          console.log('🚫 User already has a podcast, blocking creation');\n          toast.error(`You already have a podcast: \"${existingPodcasts[0].title}\". Cannot create another.`);\n          setLoading(false);\n          navigate('/dashboard', { replace: true });\n          return;\n        }\n      }\n\n      console.log('✅ User verified to create podcast, proceeding...');\n      const result = await createPodcast(formData);\n      \n      if (result && result.success) {\n        // Mark onboarding as completed using utility\n        markOnboardingCompleted(result.podcastId, result.podcast);\n        \n        // Clean up temporary data\n        localStorage.removeItem('prefillData');\n        localStorage.removeItem('channelData');\n        localStorage.removeItem('videosData');\n        \n        // Show success message\n        toast.success(`🎉 Podcast \"${formData.title}\" created successfully!`);\n        \n        // Navigate to dashboard\n        setTimeout(() => {\n          navigate('/dashboard', { replace: true });\n        }, 2000);\n        \n      } else {\n        throw new Error(result?.message || 'Podcast creation failed');\n      }\n    } catch (error) {\n      console.error('Podcast creation error:', error);\n      toast.error('Failed to create podcast: ' + error.message);\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    // Clean up stored data and redirect back to auth\n    localStorage.removeItem('channelData');\n    localStorage.removeItem('videosData');\n    localStorage.removeItem('prefillData');\n    \n    toast.info('Podcast creation cancelled');\n    navigate('/auth', { replace: true });\n  };\n\n  // Show loading while checking existing podcasts or loading data\n  if (checkingExistingPodcast || !channelData || !prefillData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">\n            {checkingExistingPodcast ? 'Checking your account status...' : 'Loading channel data...'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <PodcastOnboardingWizard\n      channelData={channelData}\n      prefillData={prefillData}\n      onSubmit={handleFormSubmit}\n      onCancel={handleCancel}\n      loading={loading}\n    />\n  );\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,KAAK,KAAQ,gBAAgB,CACtC,MAAO,CAAAC,uBAAuB,KAAM,2BAA2B,CAC/D,OAASC,aAAa,KAAQ,oBAAoB,CAClD,OAASC,eAAe,KAAQ,sBAAsB,CACtD,OAASC,WAAW,KAAQ,uBAAuB,CACnD,OAASC,uBAAuB,KAAQ,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE9D,cAAe,SAAS,CAAAC,mBAAmBA,CAAA,CAAG,CAC5C,KAAM,CAAAC,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACiB,WAAW,CAAEC,cAAc,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACmB,WAAW,CAAEC,cAAc,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACqB,uBAAuB,CAAEC,0BAA0B,CAAC,CAAGtB,QAAQ,CAAC,IAAI,CAAC,CAE5E;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsB,sBAAsB,CAAG,KAAAA,CAAA,GAAY,CACzC,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAGjB,WAAW,CAAC,WAAW,CAAC,CACzC,GAAI,CAACiB,QAAQ,EAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,CAC7BtB,KAAK,CAACuB,KAAK,CAAC,mDAAmD,CAAC,CAChEZ,QAAQ,CAAC,OAAO,CAAE,CAAEa,OAAO,CAAE,IAAK,CAAC,CAAC,CACpC,OACF,CAEAC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAE3D;AACA,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAxB,eAAe,CAACkB,QAAQ,CAACC,EAAE,CAAC,CAE3D,GAAIK,gBAAgB,EAAIA,gBAAgB,CAACC,MAAM,CAAG,CAAC,CAAE,CACnDH,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC,CACtE1B,KAAK,CAAC6B,IAAI,CAAC,gCAAgCF,gBAAgB,CAAC,CAAC,CAAC,CAACG,KAAK,8BAA8B,CAAC,CAEnG;AACAC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAEC,IAAI,CAACC,SAAS,CAACP,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3EI,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAEnDG,UAAU,CAAC,IAAM,CACfxB,QAAQ,CAAC,YAAY,CAAE,CAAEa,OAAO,CAAE,IAAK,CAAC,CAAC,CAC3C,CAAC,CAAE,IAAI,CAAC,CACR,OACF,CAEAC,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CAEnE;AACA,KAAM,CAAAU,iBAAiB,CAAGhC,WAAW,CAAC,aAAa,CAAC,CACpD,KAAM,CAAAiC,iBAAiB,CAAGjC,WAAW,CAAC,aAAa,CAAC,CAEpDW,cAAc,CAACqB,iBAAiB,CAAC,CACjCnB,cAAc,CAACoB,iBAAiB,CAAC,CACjClB,0BAA0B,CAAC,KAAK,CAAC,CAEjC;AACA,GAAI,CAACiB,iBAAiB,CAAE,CACtBX,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CACzD1B,KAAK,CAACuB,KAAK,CAAC,2CAA2C,CAAC,CACxDY,UAAU,CAAC,IAAM,CACfxB,QAAQ,CAAC,OAAO,CAAE,CAAEa,OAAO,CAAE,IAAK,CAAC,CAAC,CACtC,CAAC,CAAE,IAAI,CAAC,CACV,CAEF,CAAE,MAAOD,KAAK,CAAE,CACdE,OAAO,CAACF,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxDvB,KAAK,CAACuB,KAAK,CAAC,uDAAuD,CAAC,CACpEJ,0BAA0B,CAAC,KAAK,CAAC,CACnC,CACF,CAAC,CAEDC,sBAAsB,CAAC,CAAC,CAC1B,CAAC,CAAE,CAACT,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAA2B,gBAAgB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC3C1B,UAAU,CAAC,IAAI,CAAC,CAEhB,GAAI,CACF;AACA,KAAM,CAAAQ,QAAQ,CAAGjB,WAAW,CAAC,WAAW,CAAC,CACzC,GAAIiB,QAAQ,EAAIA,QAAQ,CAACC,EAAE,CAAE,CAC3BG,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACnE,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAxB,eAAe,CAACkB,QAAQ,CAACC,EAAE,CAAC,CAE3D,GAAIK,gBAAgB,EAAIA,gBAAgB,CAACC,MAAM,CAAG,CAAC,CAAE,CACnDH,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAC/D1B,KAAK,CAACuB,KAAK,CAAC,gCAAgCI,gBAAgB,CAAC,CAAC,CAAC,CAACG,KAAK,2BAA2B,CAAC,CACjGjB,UAAU,CAAC,KAAK,CAAC,CACjBF,QAAQ,CAAC,YAAY,CAAE,CAAEa,OAAO,CAAE,IAAK,CAAC,CAAC,CACzC,OACF,CACF,CAEAC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAC/D,KAAM,CAAAc,MAAM,CAAG,KAAM,CAAAtC,aAAa,CAACqC,QAAQ,CAAC,CAE5C,GAAIC,MAAM,EAAIA,MAAM,CAACC,OAAO,CAAE,CAC5B;AACApC,uBAAuB,CAACmC,MAAM,CAACE,SAAS,CAAEF,MAAM,CAACG,OAAO,CAAC,CAEzD;AACAZ,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC,CACtCb,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC,CACtCb,YAAY,CAACa,UAAU,CAAC,YAAY,CAAC,CAErC;AACA5C,KAAK,CAACyC,OAAO,CAAC,eAAeF,QAAQ,CAACT,KAAK,yBAAyB,CAAC,CAErE;AACAK,UAAU,CAAC,IAAM,CACfxB,QAAQ,CAAC,YAAY,CAAE,CAAEa,OAAO,CAAE,IAAK,CAAC,CAAC,CAC3C,CAAC,CAAE,IAAI,CAAC,CAEV,CAAC,IAAM,CACL,KAAM,IAAI,CAAAqB,KAAK,CAAC,CAAAL,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEM,OAAO,GAAI,yBAAyB,CAAC,CAC/D,CACF,CAAE,MAAOvB,KAAK,CAAE,CACdE,OAAO,CAACF,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/CvB,KAAK,CAACuB,KAAK,CAAC,4BAA4B,CAAGA,KAAK,CAACuB,OAAO,CAAC,CACzDjC,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAkC,YAAY,CAAGA,CAAA,GAAM,CACzB;AACAhB,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC,CACtCb,YAAY,CAACa,UAAU,CAAC,YAAY,CAAC,CACrCb,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC,CAEtC5C,KAAK,CAAC6B,IAAI,CAAC,4BAA4B,CAAC,CACxClB,QAAQ,CAAC,OAAO,CAAE,CAAEa,OAAO,CAAE,IAAK,CAAC,CAAC,CACtC,CAAC,CAED;AACA,GAAIN,uBAAuB,EAAI,CAACJ,WAAW,EAAI,CAACE,WAAW,CAAE,CAC3D,mBACET,IAAA,QAAKyC,SAAS,CAAC,0DAA0D,CAAAC,QAAA,cACvExC,KAAA,QAAKuC,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B1C,IAAA,QAAKyC,SAAS,CAAC,+EAA+E,CAAM,CAAC,cACrGzC,IAAA,MAAGyC,SAAS,CAAC,eAAe,CAAAC,QAAA,CACzB/B,uBAAuB,CAAG,iCAAiC,CAAG,yBAAyB,CACvF,CAAC,EACD,CAAC,CACH,CAAC,CAEV,CAEA,mBACEX,IAAA,CAACN,uBAAuB,EACtBa,WAAW,CAAEA,WAAY,CACzBE,WAAW,CAAEA,WAAY,CACzBkC,QAAQ,CAAEZ,gBAAiB,CAC3Ba,QAAQ,CAAEJ,YAAa,CACvBnC,OAAO,CAAEA,OAAQ,CAClB,CAAC,CAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
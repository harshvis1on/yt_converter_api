{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\nexport function useEpisodes(megaphoneId) {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0,\n    n8nEpisodes: [] // Track n8n episodes separately\n  });\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({\n        ...s,\n        loading: true,\n        error: null\n      }));\n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n\n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      if (result.success) {\n        const transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        setState(s => ({\n          ...s,\n          episodes: transformedEpisodes,\n          totalCount: result.totalCount,\n          loading: false\n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({\n        ...s,\n        error: error.message,\n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n  const refreshEpisodes = () => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  };\n\n  // Add newly created episodes from n8n workflow results\n  const addN8nEpisodes = n8nResults => {\n    console.log('📺 Adding n8n episodes to display:', n8nResults);\n    if (!n8nResults || !Array.isArray(n8nResults)) {\n      console.warn('Invalid n8n results provided:', n8nResults);\n      return;\n    }\n\n    // Transform n8n data for display\n    const transformedN8nEpisodes = episodeService.transformN8nEpisodeData(n8nResults);\n    setState(s => {\n      // Remove any existing n8n episodes with same IDs to avoid duplicates\n      const existingEpisodes = s.episodes.filter(ep => ep.source !== 'n8n');\n      const combinedEpisodes = [...transformedN8nEpisodes, ...existingEpisodes];\n      console.log(`✅ Added ${transformedN8nEpisodes.length} n8n episodes to display`);\n      return {\n        ...s,\n        episodes: combinedEpisodes,\n        n8nEpisodes: transformedN8nEpisodes,\n        totalCount: combinedEpisodes.length\n      };\n    });\n\n    // Refresh from Supabase after a delay to get the persisted data\n    setTimeout(() => {\n      console.log('🔄 Refreshing episodes from Supabase after n8n creation...');\n      refreshEpisodes();\n    }, 3000);\n  };\n\n  // Clear n8n episodes (when they've been persisted to Supabase)\n  const clearN8nEpisodes = () => {\n    setState(s => ({\n      ...s,\n      n8nEpisodes: [],\n      episodes: s.episodes.filter(ep => ep.source !== 'n8n')\n    }));\n  };\n  return {\n    ...state,\n    refreshEpisodes,\n    addN8nEpisodes,\n    clearN8nEpisodes\n  };\n}\n_s(useEpisodes, \"lQQLJ/8lL6T0PT/shlfZISENTmw=\");","map":{"version":3,"names":["useState","useEffect","episodeService","useEpisodes","megaphoneId","_s","state","setState","loading","error","episodes","totalCount","n8nEpisodes","loadEpisodes","s","console","log","podcastId","getPodcastIdFromMegaphoneId","Error","result","getEpisodesFromSupabase","success","transformedEpisodes","transformEpisodeData","length","message","refreshEpisodes","addN8nEpisodes","n8nResults","Array","isArray","warn","transformedN8nEpisodes","transformN8nEpisodeData","existingEpisodes","filter","ep","source","combinedEpisodes","setTimeout","clearN8nEpisodes"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useEpisodes.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { episodeService } from '../services/episodeService';\n\nexport function useEpisodes(megaphoneId) {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    episodes: [],\n    totalCount: 0,\n    n8nEpisodes: [] // Track n8n episodes separately\n  });\n\n  useEffect(() => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  }, [megaphoneId]);\n\n  const loadEpisodes = async () => {\n    try {\n      setState(s => ({ ...s, loading: true, error: null }));\n      \n      console.log('📻 Loading episodes from Supabase for Megaphone ID:', megaphoneId);\n      \n      // First get the podcast ID from the megaphone ID\n      const podcastId = await episodeService.getPodcastIdFromMegaphoneId(megaphoneId);\n      if (!podcastId) {\n        throw new Error('Podcast not found in database');\n      }\n\n      // Then get episodes from Supabase\n      const result = await episodeService.getEpisodesFromSupabase(podcastId);\n      \n      if (result.success) {\n        const transformedEpisodes = episodeService.transformEpisodeData(result.episodes);\n        setState(s => ({ \n          ...s, \n          episodes: transformedEpisodes, \n          totalCount: result.totalCount,\n          loading: false \n        }));\n        console.log(`✅ Loaded ${transformedEpisodes.length} episodes from Supabase`);\n      } else {\n        throw new Error(result.error || 'Failed to load episodes');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load episodes:', error);\n      setState(s => ({ \n        ...s, \n        error: error.message, \n        loading: false,\n        episodes: [],\n        totalCount: 0\n      }));\n    }\n  };\n\n  const refreshEpisodes = () => {\n    if (megaphoneId) {\n      loadEpisodes();\n    }\n  };\n\n  // Add newly created episodes from n8n workflow results\n  const addN8nEpisodes = (n8nResults) => {\n    console.log('📺 Adding n8n episodes to display:', n8nResults);\n    \n    if (!n8nResults || !Array.isArray(n8nResults)) {\n      console.warn('Invalid n8n results provided:', n8nResults);\n      return;\n    }\n\n    // Transform n8n data for display\n    const transformedN8nEpisodes = episodeService.transformN8nEpisodeData(n8nResults);\n    \n    setState(s => {\n      // Remove any existing n8n episodes with same IDs to avoid duplicates\n      const existingEpisodes = s.episodes.filter(ep => ep.source !== 'n8n');\n      const combinedEpisodes = [...transformedN8nEpisodes, ...existingEpisodes];\n      \n      console.log(`✅ Added ${transformedN8nEpisodes.length} n8n episodes to display`);\n      \n      return {\n        ...s,\n        episodes: combinedEpisodes,\n        n8nEpisodes: transformedN8nEpisodes,\n        totalCount: combinedEpisodes.length\n      };\n    });\n\n    // Refresh from Supabase after a delay to get the persisted data\n    setTimeout(() => {\n      console.log('🔄 Refreshing episodes from Supabase after n8n creation...');\n      refreshEpisodes();\n    }, 3000);\n  };\n\n  // Clear n8n episodes (when they've been persisted to Supabase)\n  const clearN8nEpisodes = () => {\n    setState(s => ({\n      ...s,\n      n8nEpisodes: [],\n      episodes: s.episodes.filter(ep => ep.source !== 'n8n')\n    }));\n  };\n\n  return {\n    ...state,\n    refreshEpisodes,\n    addN8nEpisodes,\n    clearN8nEpisodes\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
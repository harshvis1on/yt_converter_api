{"ast":null,"code":"// Utility functions for onboarding state management\n\nexport const isOnboardingCompleted = () => {\n  const podcastId = localStorage.getItem('podcastId');\n  const onboardingCompleted = localStorage.getItem('onboardingCompleted');\n  const podcastData = localStorage.getItem('podcastData');\n\n  // Check multiple indicators for robust onboarding completion detection\n  const hasRequiredData = podcastId && (onboardingCompleted === 'true' || podcastData);\n  console.log('🔍 Onboarding completion check:', {\n    podcastId: podcastId ? 'EXISTS' : 'NULL',\n    onboardingCompleted,\n    podcastData: podcastData ? 'EXISTS' : 'NULL',\n    hasRequiredData\n  });\n  return hasRequiredData;\n};\nexport const markOnboardingCompleted = (podcastId, podcastData) => {\n  localStorage.setItem('podcastId', podcastId);\n  localStorage.setItem('podcastData', JSON.stringify(podcastData));\n  localStorage.setItem('onboardingCompleted', 'true');\n  localStorage.setItem('onboardingCompletedAt', new Date().toISOString());\n  console.log('✅ Onboarding marked as completed:', {\n    podcastId,\n    timestamp: new Date().toISOString()\n  });\n};\nexport const clearOnboardingData = () => {\n  const keysToRemove = ['podcastId', 'podcastData', 'channelData', 'videosData', 'prefillData', 'onboardingCompleted', 'onboardingCompletedAt'];\n  keysToRemove.forEach(key => localStorage.removeItem(key));\n  console.log('🧹 Onboarding data cleared');\n};\nexport const getOnboardingStatus = () => {\n  const podcastId = localStorage.getItem('podcastId');\n  const onboardingCompleted = localStorage.getItem('onboardingCompleted');\n  const completedAt = localStorage.getItem('onboardingCompletedAt');\n  return {\n    isCompleted: isOnboardingCompleted(),\n    podcastId,\n    onboardingCompleted: onboardingCompleted === 'true',\n    completedAt: completedAt ? new Date(completedAt) : null\n  };\n};","map":{"version":3,"names":["isOnboardingCompleted","podcastId","localStorage","getItem","onboardingCompleted","podcastData","hasRequiredData","console","log","markOnboardingCompleted","setItem","JSON","stringify","Date","toISOString","timestamp","clearOnboardingData","keysToRemove","forEach","key","removeItem","getOnboardingStatus","completedAt","isCompleted"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/utils/onboarding.js"],"sourcesContent":["// Utility functions for onboarding state management\n\nexport const isOnboardingCompleted = () => {\n  const podcastId = localStorage.getItem('podcastId');\n  const onboardingCompleted = localStorage.getItem('onboardingCompleted');\n  const podcastData = localStorage.getItem('podcastData');\n  \n  // Check multiple indicators for robust onboarding completion detection\n  const hasRequiredData = podcastId && (onboardingCompleted === 'true' || podcastData);\n  \n  console.log('🔍 Onboarding completion check:', {\n    podcastId: podcastId ? 'EXISTS' : 'NULL',\n    onboardingCompleted,\n    podcastData: podcastData ? 'EXISTS' : 'NULL',\n    hasRequiredData\n  });\n  \n  return hasRequiredData;\n};\n\nexport const markOnboardingCompleted = (podcastId, podcastData) => {\n  localStorage.setItem('podcastId', podcastId);\n  localStorage.setItem('podcastData', JSON.stringify(podcastData));\n  localStorage.setItem('onboardingCompleted', 'true');\n  localStorage.setItem('onboardingCompletedAt', new Date().toISOString());\n  \n  console.log('✅ Onboarding marked as completed:', {\n    podcastId,\n    timestamp: new Date().toISOString()\n  });\n};\n\nexport const clearOnboardingData = () => {\n  const keysToRemove = [\n    'podcastId',\n    'podcastData', \n    'channelData',\n    'videosData',\n    'prefillData',\n    'onboardingCompleted',\n    'onboardingCompletedAt'\n  ];\n  \n  keysToRemove.forEach(key => localStorage.removeItem(key));\n  \n  console.log('🧹 Onboarding data cleared');\n};\n\nexport const getOnboardingStatus = () => {\n  const podcastId = localStorage.getItem('podcastId');\n  const onboardingCompleted = localStorage.getItem('onboardingCompleted');\n  const completedAt = localStorage.getItem('onboardingCompletedAt');\n  \n  return {\n    isCompleted: isOnboardingCompleted(),\n    podcastId,\n    onboardingCompleted: onboardingCompleted === 'true',\n    completedAt: completedAt ? new Date(completedAt) : null\n  };\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD,MAAMC,mBAAmB,GAAGF,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;EACvE,MAAME,WAAW,GAAGH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;;EAEvD;EACA,MAAMG,eAAe,GAAGL,SAAS,KAAKG,mBAAmB,KAAK,MAAM,IAAIC,WAAW,CAAC;EAEpFE,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE;IAC7CP,SAAS,EAAEA,SAAS,GAAG,QAAQ,GAAG,MAAM;IACxCG,mBAAmB;IACnBC,WAAW,EAAEA,WAAW,GAAG,QAAQ,GAAG,MAAM;IAC5CC;EACF,CAAC,CAAC;EAEF,OAAOA,eAAe;AACxB,CAAC;AAED,OAAO,MAAMG,uBAAuB,GAAGA,CAACR,SAAS,EAAEI,WAAW,KAAK;EACjEH,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAET,SAAS,CAAC;EAC5CC,YAAY,CAACQ,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC,CAAC;EAChEH,YAAY,CAACQ,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;EACnDR,YAAY,CAACQ,OAAO,CAAC,uBAAuB,EAAE,IAAIG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;EAEvEP,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE;IAC/CP,SAAS;IACTc,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAGA,CAAA,KAAM;EACvC,MAAMC,YAAY,GAAG,CACnB,WAAW,EACX,aAAa,EACb,aAAa,EACb,YAAY,EACZ,aAAa,EACb,qBAAqB,EACrB,uBAAuB,CACxB;EAEDA,YAAY,CAACC,OAAO,CAACC,GAAG,IAAIjB,YAAY,CAACkB,UAAU,CAACD,GAAG,CAAC,CAAC;EAEzDZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMa,mBAAmB,GAAGA,CAAA,KAAM;EACvC,MAAMpB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD,MAAMC,mBAAmB,GAAGF,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;EACvE,MAAMmB,WAAW,GAAGpB,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;EAEjE,OAAO;IACLoB,WAAW,EAAEvB,qBAAqB,CAAC,CAAC;IACpCC,SAAS;IACTG,mBAAmB,EAAEA,mBAAmB,KAAK,MAAM;IACnDkB,WAAW,EAAEA,WAAW,GAAG,IAAIT,IAAI,CAACS,WAAW,CAAC,GAAG;EACrD,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
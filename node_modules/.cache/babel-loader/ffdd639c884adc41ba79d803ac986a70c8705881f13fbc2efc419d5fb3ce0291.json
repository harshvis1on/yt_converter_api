{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { createEpisodes } from '../services/n8nApi';\nimport { toast } from 'react-toastify';\nimport { safeGetItem } from '../utils/localStorage';\nexport function useYouTubeSync() {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    channel: null,\n    podcastId: null,\n    videos: [],\n    episodes: [],\n    progress: 0,\n    total: 0,\n    done: false,\n    status: '',\n    selectedVideos: []\n  });\n\n  // Load data from localStorage on mount\n  React.useEffect(() => {\n    const channelData = safeGetItem('channelData');\n    const videosData = safeGetItem('videosData', []);\n\n    // Try multiple sources for podcast ID\n    let podcastId = localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.id) || (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.megaphone_id);\n    }\n    if (channelData || (videosData === null || videosData === void 0 ? void 0 : videosData.length) > 0 || podcastId) {\n      setState(s => ({\n        ...s,\n        channel: channelData,\n        videos: videosData,\n        podcastId: podcastId || null\n      }));\n    }\n  }, []);\n\n  // Helper: is YouTube connected?\n  const isYouTubeConnected = !!(state.channel && state.channel.id);\n\n  // Connect YouTube data - re-fetch if not available\n  const connectYouTube = useCallback(async () => {\n    setState(s => ({\n      ...s,\n      loading: true,\n      error: null\n    }));\n    try {\n      // First check if data already exists in localStorage\n      let channel = safeGetItem('channelData');\n      let videos = safeGetItem('videosData', []);\n      const podcastId = localStorage.getItem('podcastId');\n\n      // If no YouTube data exists, we need to re-authenticate\n      if (!channel || !videos || videos.length === 0) {\n        console.log('🔄 No YouTube data found, need to re-authenticate...');\n\n        // Check if we have a Google token\n        const googleToken = localStorage.getItem('google_token');\n        if (!googleToken) {\n          throw new Error('No Google authentication found. Please sign in again.');\n        }\n\n        // Re-fetch YouTube data using existing token\n        const userInfo = safeGetItem('user_info', {});\n        if (!userInfo.id) {\n          throw new Error('User information not found. Please sign in again.');\n        }\n        console.log('🔄 Re-fetching YouTube data with existing token...');\n        const {\n          syncYouTubeChannel\n        } = await import('../services/n8nApi');\n        const result = await syncYouTubeChannel(googleToken, userInfo.id);\n        if (result && result.success) {\n          // Store the fetched data\n          localStorage.setItem('channelData', JSON.stringify(result.channel));\n          localStorage.setItem('videosData', JSON.stringify(result.videos));\n          channel = result.channel;\n          videos = result.videos;\n          console.log('✅ YouTube data re-fetched successfully');\n        } else {\n          // Check if it's a token expiry issue\n          const errorMsg = (result === null || result === void 0 ? void 0 : result.message) || 'Failed to fetch YouTube data';\n          if (errorMsg.includes('401') || errorMsg.includes('Unauthorized') || errorMsg.includes('token') || errorMsg.includes('auth')) {\n            throw new Error('Google authentication expired. Please sign out and sign in again to refresh your YouTube connection.');\n          }\n          throw new Error(errorMsg);\n        }\n      }\n\n      // Try multiple sources for podcast ID\n      let finalPodcastId = podcastId || localStorage.getItem('podcastId');\n      if (!finalPodcastId) {\n        const currentPodcast = safeGetItem('currentPodcast');\n        finalPodcastId = (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.id) || (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.megaphone_id);\n      }\n      setState(s => ({\n        ...s,\n        channel,\n        videos,\n        podcastId: finalPodcastId || null,\n        loading: false\n      }));\n      return {\n        channel,\n        videos,\n        podcastId,\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Failed to connect YouTube:', error);\n      setState(s => ({\n        ...s,\n        error: error.message,\n        loading: false\n      }));\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }, []);\n\n  // Create episodes using n8n workflow\n  const syncToMegaphone = useCallback(async videos => {\n    if (!videos || videos.length === 0) {\n      toast.warning('No videos to sync');\n      return;\n    }\n    setState(s => ({\n      ...s,\n      loading: true,\n      progress: 0,\n      total: videos.length,\n      done: false,\n      episodes: [],\n      status: 'Creating podcast episodes...'\n    }));\n\n    // Try multiple sources for podcast ID\n    let podcastId = state.podcastId || localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.id) || (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.megaphone_id);\n    }\n    const userInfo = safeGetItem('user_info', {});\n    if (!podcastId) {\n      setState(s => ({\n        ...s,\n        error: 'No podcast ID found. Please ensure your podcast is properly set up.',\n        loading: false\n      }));\n      return;\n    }\n    try {\n      // Extract video IDs for n8n workflow\n      const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n      console.log('🎥 Creating episodes for videos:', videoIds);\n      console.log('📋 Using podcast ID:', podcastId);\n      console.log('👤 Using user ID:', userInfo.id);\n\n      // Call n8n episode creation workflow\n      const result = await createEpisodes(podcastId, videoIds, userInfo.id);\n      console.log('📤 createEpisodes result:', result);\n      if (result && result.success) {\n        const {\n          successful,\n          failed,\n          total\n        } = result.summary;\n\n        // Update state with episode results\n        const episodes = result.results.map(r => ({\n          id: r.videoId,\n          title: r.title,\n          publishedAt: new Date().toISOString(),\n          mp4Url: `https://youtube.com/watch?v=${r.videoId}`,\n          publishedToMegaphone: r.status === 'created',\n          error: r.status === 'failed' ? 'Episode creation failed' : undefined\n        }));\n        setState(s => ({\n          ...s,\n          episodes,\n          progress: total,\n          total,\n          done: true,\n          loading: false,\n          status: `Sync complete! ${successful} successful, ${failed} failed`\n        }));\n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n    } catch (err) {\n      console.error('Episode creation process failed:', err);\n      setState(s => ({\n        ...s,\n        error: err.message,\n        loading: false,\n        status: ''\n      }));\n      toast.error('Episode creation failed: ' + err.message);\n    }\n  }, [state.podcastId]);\n\n  // Video selection methods\n  const selectVideo = useCallback(videoId => {\n    setState(s => ({\n      ...s,\n      selectedVideos: [...new Set([...(s.selectedVideos || []), videoId])] // Prevent duplicates\n    }));\n  }, []);\n  const deselectVideo = useCallback(videoId => {\n    setState(s => ({\n      ...s,\n      selectedVideos: (s.selectedVideos || []).filter(id => id !== videoId)\n    }));\n  }, []);\n  const selectAllVideos = useCallback(videos => {\n    const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n    setState(s => ({\n      ...s,\n      selectedVideos: [...new Set([...(s.selectedVideos || []), ...videoIds])]\n    }));\n  }, []);\n  const deselectAllVideos = useCallback(() => {\n    setState(s => ({\n      ...s,\n      selectedVideos: []\n    }));\n  }, []);\n  const isVideoSelected = useCallback(videoId => {\n    return (state.selectedVideos || []).includes(videoId);\n  }, [state.selectedVideos]);\n  const createEpisodes = useCallback(() => {\n    const selectedVideoObjects = state.videos.filter(v => {\n      const videoId = v.id || v.videoId;\n      return state.selectedVideos.includes(videoId);\n    });\n    syncToMegaphone(selectedVideoObjects);\n  }, [state.videos, state.selectedVideos, syncToMegaphone]);\n\n  // Refresh data from localStorage\n  const refreshData = useCallback(() => {\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n\n    // Try multiple sources for podcast ID\n    let podcastId = localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.id) || (currentPodcast === null || currentPodcast === void 0 ? void 0 : currentPodcast.megaphone_id);\n    }\n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId: podcastId || null\n    }));\n  }, []);\n  return {\n    ...state,\n    connectYouTube,\n    syncToMegaphone,\n    isYouTubeConnected,\n    refreshData,\n    selectVideo,\n    deselectVideo,\n    selectAllVideos,\n    deselectAllVideos,\n    isVideoSelected,\n    createEpisodes\n  };\n}\n_s(useYouTubeSync, \"akLAlFD0RMYi80nwdQd+0yFVJM4=\");","map":{"version":3,"names":["React","useState","useCallback","createEpisodes","toast","safeGetItem","useYouTubeSync","_s","state","setState","loading","error","channel","podcastId","videos","episodes","progress","total","done","status","selectedVideos","useEffect","channelData","videosData","localStorage","getItem","currentPodcast","id","megaphone_id","length","s","isYouTubeConnected","connectYouTube","console","log","googleToken","Error","userInfo","syncYouTubeChannel","result","success","setItem","JSON","stringify","errorMsg","message","includes","finalPodcastId","syncToMegaphone","warning","videoIds","map","v","videoId","filter","Boolean","successful","failed","summary","results","r","title","publishedAt","Date","toISOString","mp4Url","publishedToMegaphone","undefined","err","selectVideo","Set","deselectVideo","selectAllVideos","deselectAllVideos","isVideoSelected","selectedVideoObjects","refreshData"],"sources":["/Users/harshdeshmukh/YouTube To Mp4 Links/src/hooks/useYouTubeSync.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { createEpisodes } from '../services/n8nApi';\nimport { toast } from 'react-toastify';\nimport { safeGetItem } from '../utils/localStorage';\n\n\nexport function useYouTubeSync() {\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    channel: null,\n    podcastId: null,\n    videos: [],\n    episodes: [],\n    progress: 0,\n    total: 0,\n    done: false,\n    status: '',\n    selectedVideos: [],\n  });\n  \n  // Load data from localStorage on mount\n  React.useEffect(() => {\n    const channelData = safeGetItem('channelData');\n    const videosData = safeGetItem('videosData', []);\n    \n    // Try multiple sources for podcast ID\n    let podcastId = localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = currentPodcast?.id || currentPodcast?.megaphone_id;\n    }\n    \n    if (channelData || videosData?.length > 0 || podcastId) {\n      setState(s => ({\n        ...s,\n        channel: channelData,\n        videos: videosData,\n        podcastId: podcastId || null\n      }));\n    }\n  }, []);\n\n  // Helper: is YouTube connected?\n  const isYouTubeConnected = !!(state.channel && state.channel.id);\n\n  // Connect YouTube data - re-fetch if not available\n  const connectYouTube = useCallback(async () => {\n    setState(s => ({ ...s, loading: true, error: null }));\n    \n    try {\n      // First check if data already exists in localStorage\n      let channel = safeGetItem('channelData');\n      let videos = safeGetItem('videosData', []);\n      const podcastId = localStorage.getItem('podcastId');\n      \n      // If no YouTube data exists, we need to re-authenticate\n      if (!channel || !videos || videos.length === 0) {\n        console.log('🔄 No YouTube data found, need to re-authenticate...');\n        \n        // Check if we have a Google token\n        const googleToken = localStorage.getItem('google_token');\n        if (!googleToken) {\n          throw new Error('No Google authentication found. Please sign in again.');\n        }\n        \n        // Re-fetch YouTube data using existing token\n        const userInfo = safeGetItem('user_info', {});\n        if (!userInfo.id) {\n          throw new Error('User information not found. Please sign in again.');\n        }\n        \n        console.log('🔄 Re-fetching YouTube data with existing token...');\n        const { syncYouTubeChannel } = await import('../services/n8nApi');\n        const result = await syncYouTubeChannel(googleToken, userInfo.id);\n        \n        if (result && result.success) {\n          // Store the fetched data\n          localStorage.setItem('channelData', JSON.stringify(result.channel));\n          localStorage.setItem('videosData', JSON.stringify(result.videos));\n          \n          channel = result.channel;\n          videos = result.videos;\n          \n          console.log('✅ YouTube data re-fetched successfully');\n        } else {\n          // Check if it's a token expiry issue\n          const errorMsg = result?.message || 'Failed to fetch YouTube data';\n          if (errorMsg.includes('401') || errorMsg.includes('Unauthorized') || \n              errorMsg.includes('token') || errorMsg.includes('auth')) {\n            throw new Error('Google authentication expired. Please sign out and sign in again to refresh your YouTube connection.');\n          }\n          throw new Error(errorMsg);\n        }\n      }\n      \n      // Try multiple sources for podcast ID\n      let finalPodcastId = podcastId || localStorage.getItem('podcastId');\n      if (!finalPodcastId) {\n        const currentPodcast = safeGetItem('currentPodcast');\n        finalPodcastId = currentPodcast?.id || currentPodcast?.megaphone_id;\n      }\n      \n      setState(s => ({ \n        ...s, \n        channel, \n        videos, \n        podcastId: finalPodcastId || null, \n        loading: false \n      }));\n      \n      return { channel, videos, podcastId, success: true };\n      \n    } catch (error) {\n      console.error('❌ Failed to connect YouTube:', error);\n      setState(s => ({ \n        ...s, \n        error: error.message, \n        loading: false \n      }));\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  // Create episodes using n8n workflow\n  const syncToMegaphone = useCallback(async (videos) => {\n    if (!videos || videos.length === 0) {\n      toast.warning('No videos to sync');\n      return;\n    }\n    \n    setState(s => ({ ...s, loading: true, progress: 0, total: videos.length, done: false, episodes: [], status: 'Creating podcast episodes...' }));\n    \n    // Try multiple sources for podcast ID\n    let podcastId = state.podcastId || localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = currentPodcast?.id || currentPodcast?.megaphone_id;\n    }\n    \n    const userInfo = safeGetItem('user_info', {});\n    \n    if (!podcastId) {\n      setState(s => ({ ...s, error: 'No podcast ID found. Please ensure your podcast is properly set up.', loading: false }));\n      return;\n    }\n    \n    try {\n      // Extract video IDs for n8n workflow\n      const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n      \n      console.log('🎥 Creating episodes for videos:', videoIds);\n      console.log('📋 Using podcast ID:', podcastId);\n      console.log('👤 Using user ID:', userInfo.id);\n      \n      // Call n8n episode creation workflow\n      const result = await createEpisodes(podcastId, videoIds, userInfo.id);\n      \n      console.log('📤 createEpisodes result:', result);\n      \n      if (result && result.success) {\n        const { successful, failed, total } = result.summary;\n        \n        // Update state with episode results\n        const episodes = result.results.map(r => ({\n          id: r.videoId,\n          title: r.title,\n          publishedAt: new Date().toISOString(),\n          mp4Url: `https://youtube.com/watch?v=${r.videoId}`,\n          publishedToMegaphone: r.status === 'created',\n          error: r.status === 'failed' ? 'Episode creation failed' : undefined\n        }));\n        \n        setState(s => ({ \n          ...s, \n          episodes, \n          progress: total, \n          total, \n          done: true, \n          loading: false, \n          status: `Sync complete! ${successful} successful, ${failed} failed` \n        }));\n        \n      } else {\n        throw new Error(result.error || 'Episode creation failed');\n      }\n      \n    } catch (err) {\n      console.error('Episode creation process failed:', err);\n      setState(s => ({ ...s, error: err.message, loading: false, status: '' }));\n      toast.error('Episode creation failed: ' + err.message);\n    }\n  }, [state.podcastId]);\n\n  // Video selection methods\n  const selectVideo = useCallback((videoId) => {\n    setState(s => ({\n      ...s,\n      selectedVideos: [...new Set([...(s.selectedVideos || []), videoId])] // Prevent duplicates\n    }));\n  }, []);\n\n  const deselectVideo = useCallback((videoId) => {\n    setState(s => ({\n      ...s,\n      selectedVideos: (s.selectedVideos || []).filter(id => id !== videoId)\n    }));\n  }, []);\n\n  const selectAllVideos = useCallback((videos) => {\n    const videoIds = videos.map(v => v.id || v.videoId).filter(Boolean);\n    setState(s => ({\n      ...s,\n      selectedVideos: [...new Set([...(s.selectedVideos || []), ...videoIds])]\n    }));\n  }, []);\n\n  const deselectAllVideos = useCallback(() => {\n    setState(s => ({\n      ...s,\n      selectedVideos: []\n    }));\n  }, []);\n\n  const isVideoSelected = useCallback((videoId) => {\n    return (state.selectedVideos || []).includes(videoId);\n  }, [state.selectedVideos]);\n\n  const createEpisodes = useCallback(() => {\n    const selectedVideoObjects = state.videos.filter(v => {\n      const videoId = v.id || v.videoId;\n      return state.selectedVideos.includes(videoId);\n    });\n    syncToMegaphone(selectedVideoObjects);\n  }, [state.videos, state.selectedVideos, syncToMegaphone]);\n\n  // Refresh data from localStorage\n  const refreshData = useCallback(() => {\n    const channel = safeGetItem('channelData');\n    const videos = safeGetItem('videosData', []);\n    \n    // Try multiple sources for podcast ID\n    let podcastId = localStorage.getItem('podcastId');\n    if (!podcastId) {\n      const currentPodcast = safeGetItem('currentPodcast');\n      podcastId = currentPodcast?.id || currentPodcast?.megaphone_id;\n    }\n    \n    setState(s => ({\n      ...s,\n      channel,\n      videos,\n      podcastId: podcastId || null\n    }));\n  }, []);\n\n  return {\n    ...state,\n    connectYouTube,\n    syncToMegaphone,\n    isYouTubeConnected,\n    refreshData,\n    selectVideo,\n    deselectVideo,\n    selectAllVideos,\n    deselectAllVideos,\n    isVideoSelected,\n    createEpisodes,\n  };\n} "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,uBAAuB;AAGnD,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC;IACjCS,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE,IAAI;IACbC,SAAS,EAAE,IAAI;IACfC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,CAAC;IACXC,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE,KAAK;IACXC,MAAM,EAAE,EAAE;IACVC,cAAc,EAAE;EAClB,CAAC,CAAC;;EAEF;EACApB,KAAK,CAACqB,SAAS,CAAC,MAAM;IACpB,MAAMC,WAAW,GAAGjB,WAAW,CAAC,aAAa,CAAC;IAC9C,MAAMkB,UAAU,GAAGlB,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC;;IAEhD;IACA,IAAIQ,SAAS,GAAGW,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACjD,IAAI,CAACZ,SAAS,EAAE;MACd,MAAMa,cAAc,GAAGrB,WAAW,CAAC,gBAAgB,CAAC;MACpDQ,SAAS,GAAG,CAAAa,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,EAAE,MAAID,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,YAAY;IAChE;IAEA,IAAIN,WAAW,IAAI,CAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEM,MAAM,IAAG,CAAC,IAAIhB,SAAS,EAAE;MACtDJ,QAAQ,CAACqB,CAAC,KAAK;QACb,GAAGA,CAAC;QACJlB,OAAO,EAAEU,WAAW;QACpBR,MAAM,EAAES,UAAU;QAClBV,SAAS,EAAEA,SAAS,IAAI;MAC1B,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMkB,kBAAkB,GAAG,CAAC,EAAEvB,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACI,OAAO,CAACe,EAAE,CAAC;;EAEhE;EACA,MAAMK,cAAc,GAAG9B,WAAW,CAAC,YAAY;IAC7CO,QAAQ,CAACqB,CAAC,KAAK;MAAE,GAAGA,CAAC;MAAEpB,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAErD,IAAI;MACF;MACA,IAAIC,OAAO,GAAGP,WAAW,CAAC,aAAa,CAAC;MACxC,IAAIS,MAAM,GAAGT,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC;MAC1C,MAAMQ,SAAS,GAAGW,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;MAEnD;MACA,IAAI,CAACb,OAAO,IAAI,CAACE,MAAM,IAAIA,MAAM,CAACe,MAAM,KAAK,CAAC,EAAE;QAC9CI,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;;QAEnE;QACA,MAAMC,WAAW,GAAGX,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;QACxD,IAAI,CAACU,WAAW,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;QAC1E;;QAEA;QACA,MAAMC,QAAQ,GAAGhC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACgC,QAAQ,CAACV,EAAE,EAAE;UAChB,MAAM,IAAIS,KAAK,CAAC,mDAAmD,CAAC;QACtE;QAEAH,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjE,MAAM;UAAEI;QAAmB,CAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;QACjE,MAAMC,MAAM,GAAG,MAAMD,kBAAkB,CAACH,WAAW,EAAEE,QAAQ,CAACV,EAAE,CAAC;QAEjE,IAAIY,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;UAC5B;UACAhB,YAAY,CAACiB,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC3B,OAAO,CAAC,CAAC;UACnEY,YAAY,CAACiB,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAACzB,MAAM,CAAC,CAAC;UAEjEF,OAAO,GAAG2B,MAAM,CAAC3B,OAAO;UACxBE,MAAM,GAAGyB,MAAM,CAACzB,MAAM;UAEtBmB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACvD,CAAC,MAAM;UACL;UACA,MAAMU,QAAQ,GAAG,CAAAL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,OAAO,KAAI,8BAA8B;UAClE,IAAID,QAAQ,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,cAAc,CAAC,IAC7DF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC3D,MAAM,IAAIV,KAAK,CAAC,sGAAsG,CAAC;UACzH;UACA,MAAM,IAAIA,KAAK,CAACQ,QAAQ,CAAC;QAC3B;MACF;;MAEA;MACA,IAAIG,cAAc,GAAGlC,SAAS,IAAIW,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnE,IAAI,CAACsB,cAAc,EAAE;QACnB,MAAMrB,cAAc,GAAGrB,WAAW,CAAC,gBAAgB,CAAC;QACpD0C,cAAc,GAAG,CAAArB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,EAAE,MAAID,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,YAAY;MACrE;MAEAnB,QAAQ,CAACqB,CAAC,KAAK;QACb,GAAGA,CAAC;QACJlB,OAAO;QACPE,MAAM;QACND,SAAS,EAAEkC,cAAc,IAAI,IAAI;QACjCrC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;MAEH,OAAO;QAAEE,OAAO;QAAEE,MAAM;QAAED,SAAS;QAAE2B,OAAO,EAAE;MAAK,CAAC;IAEtD,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDF,QAAQ,CAACqB,CAAC,KAAK;QACb,GAAGA,CAAC;QACJnB,KAAK,EAAEA,KAAK,CAACkC,OAAO;QACpBnC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;MACH,OAAO;QAAE8B,OAAO,EAAE,KAAK;QAAE7B,KAAK,EAAEA,KAAK,CAACkC;MAAQ,CAAC;IACjD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,eAAe,GAAG9C,WAAW,CAAC,MAAOY,MAAM,IAAK;IACpD,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACe,MAAM,KAAK,CAAC,EAAE;MAClCzB,KAAK,CAAC6C,OAAO,CAAC,mBAAmB,CAAC;MAClC;IACF;IAEAxC,QAAQ,CAACqB,CAAC,KAAK;MAAE,GAAGA,CAAC;MAAEpB,OAAO,EAAE,IAAI;MAAEM,QAAQ,EAAE,CAAC;MAAEC,KAAK,EAAEH,MAAM,CAACe,MAAM;MAAEX,IAAI,EAAE,KAAK;MAAEH,QAAQ,EAAE,EAAE;MAAEI,MAAM,EAAE;IAA+B,CAAC,CAAC,CAAC;;IAE9I;IACA,IAAIN,SAAS,GAAGL,KAAK,CAACK,SAAS,IAAIW,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACpE,IAAI,CAACZ,SAAS,EAAE;MACd,MAAMa,cAAc,GAAGrB,WAAW,CAAC,gBAAgB,CAAC;MACpDQ,SAAS,GAAG,CAAAa,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,EAAE,MAAID,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,YAAY;IAChE;IAEA,MAAMS,QAAQ,GAAGhC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAE7C,IAAI,CAACQ,SAAS,EAAE;MACdJ,QAAQ,CAACqB,CAAC,KAAK;QAAE,GAAGA,CAAC;QAAEnB,KAAK,EAAE,qEAAqE;QAAED,OAAO,EAAE;MAAM,CAAC,CAAC,CAAC;MACvH;IACF;IAEA,IAAI;MACF;MACA,MAAMwC,QAAQ,GAAGpC,MAAM,CAACqC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACzB,EAAE,IAAIyB,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;MAEnEtB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEgB,QAAQ,CAAC;MACzDjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAErB,SAAS,CAAC;MAC9CoB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,QAAQ,CAACV,EAAE,CAAC;;MAE7C;MACA,MAAMY,MAAM,GAAG,MAAMpC,cAAc,CAACU,SAAS,EAAEqC,QAAQ,EAAEb,QAAQ,CAACV,EAAE,CAAC;MAErEM,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEK,MAAM,CAAC;MAEhD,IAAIA,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;QAC5B,MAAM;UAAEgB,UAAU;UAAEC,MAAM;UAAExC;QAAM,CAAC,GAAGsB,MAAM,CAACmB,OAAO;;QAEpD;QACA,MAAM3C,QAAQ,GAAGwB,MAAM,CAACoB,OAAO,CAACR,GAAG,CAACS,CAAC,KAAK;UACxCjC,EAAE,EAAEiC,CAAC,CAACP,OAAO;UACbQ,KAAK,EAAED,CAAC,CAACC,KAAK;UACdC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UACrCC,MAAM,EAAE,+BAA+BL,CAAC,CAACP,OAAO,EAAE;UAClDa,oBAAoB,EAAEN,CAAC,CAACzC,MAAM,KAAK,SAAS;UAC5CR,KAAK,EAAEiD,CAAC,CAACzC,MAAM,KAAK,QAAQ,GAAG,yBAAyB,GAAGgD;QAC7D,CAAC,CAAC,CAAC;QAEH1D,QAAQ,CAACqB,CAAC,KAAK;UACb,GAAGA,CAAC;UACJf,QAAQ;UACRC,QAAQ,EAAEC,KAAK;UACfA,KAAK;UACLC,IAAI,EAAE,IAAI;UACVR,OAAO,EAAE,KAAK;UACdS,MAAM,EAAE,kBAAkBqC,UAAU,gBAAgBC,MAAM;QAC5D,CAAC,CAAC,CAAC;MAEL,CAAC,MAAM;QACL,MAAM,IAAIrB,KAAK,CAACG,MAAM,CAAC5B,KAAK,IAAI,yBAAyB,CAAC;MAC5D;IAEF,CAAC,CAAC,OAAOyD,GAAG,EAAE;MACZnC,OAAO,CAACtB,KAAK,CAAC,kCAAkC,EAAEyD,GAAG,CAAC;MACtD3D,QAAQ,CAACqB,CAAC,KAAK;QAAE,GAAGA,CAAC;QAAEnB,KAAK,EAAEyD,GAAG,CAACvB,OAAO;QAAEnC,OAAO,EAAE,KAAK;QAAES,MAAM,EAAE;MAAG,CAAC,CAAC,CAAC;MACzEf,KAAK,CAACO,KAAK,CAAC,2BAA2B,GAAGyD,GAAG,CAACvB,OAAO,CAAC;IACxD;EACF,CAAC,EAAE,CAACrC,KAAK,CAACK,SAAS,CAAC,CAAC;;EAErB;EACA,MAAMwD,WAAW,GAAGnE,WAAW,CAAEmD,OAAO,IAAK;IAC3C5C,QAAQ,CAACqB,CAAC,KAAK;MACb,GAAGA,CAAC;MACJV,cAAc,EAAE,CAAC,GAAG,IAAIkD,GAAG,CAAC,CAAC,IAAIxC,CAAC,CAACV,cAAc,IAAI,EAAE,CAAC,EAAEiC,OAAO,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,aAAa,GAAGrE,WAAW,CAAEmD,OAAO,IAAK;IAC7C5C,QAAQ,CAACqB,CAAC,KAAK;MACb,GAAGA,CAAC;MACJV,cAAc,EAAE,CAACU,CAAC,CAACV,cAAc,IAAI,EAAE,EAAEkC,MAAM,CAAC3B,EAAE,IAAIA,EAAE,KAAK0B,OAAO;IACtE,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,eAAe,GAAGtE,WAAW,CAAEY,MAAM,IAAK;IAC9C,MAAMoC,QAAQ,GAAGpC,MAAM,CAACqC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACzB,EAAE,IAAIyB,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;IACnE9C,QAAQ,CAACqB,CAAC,KAAK;MACb,GAAGA,CAAC;MACJV,cAAc,EAAE,CAAC,GAAG,IAAIkD,GAAG,CAAC,CAAC,IAAIxC,CAAC,CAACV,cAAc,IAAI,EAAE,CAAC,EAAE,GAAG8B,QAAQ,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuB,iBAAiB,GAAGvE,WAAW,CAAC,MAAM;IAC1CO,QAAQ,CAACqB,CAAC,KAAK;MACb,GAAGA,CAAC;MACJV,cAAc,EAAE;IAClB,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsD,eAAe,GAAGxE,WAAW,CAAEmD,OAAO,IAAK;IAC/C,OAAO,CAAC7C,KAAK,CAACY,cAAc,IAAI,EAAE,EAAE0B,QAAQ,CAACO,OAAO,CAAC;EACvD,CAAC,EAAE,CAAC7C,KAAK,CAACY,cAAc,CAAC,CAAC;EAE1B,MAAMjB,cAAc,GAAGD,WAAW,CAAC,MAAM;IACvC,MAAMyE,oBAAoB,GAAGnE,KAAK,CAACM,MAAM,CAACwC,MAAM,CAACF,CAAC,IAAI;MACpD,MAAMC,OAAO,GAAGD,CAAC,CAACzB,EAAE,IAAIyB,CAAC,CAACC,OAAO;MACjC,OAAO7C,KAAK,CAACY,cAAc,CAAC0B,QAAQ,CAACO,OAAO,CAAC;IAC/C,CAAC,CAAC;IACFL,eAAe,CAAC2B,oBAAoB,CAAC;EACvC,CAAC,EAAE,CAACnE,KAAK,CAACM,MAAM,EAAEN,KAAK,CAACY,cAAc,EAAE4B,eAAe,CAAC,CAAC;;EAEzD;EACA,MAAM4B,WAAW,GAAG1E,WAAW,CAAC,MAAM;IACpC,MAAMU,OAAO,GAAGP,WAAW,CAAC,aAAa,CAAC;IAC1C,MAAMS,MAAM,GAAGT,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC;;IAE5C;IACA,IAAIQ,SAAS,GAAGW,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACjD,IAAI,CAACZ,SAAS,EAAE;MACd,MAAMa,cAAc,GAAGrB,WAAW,CAAC,gBAAgB,CAAC;MACpDQ,SAAS,GAAG,CAAAa,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,EAAE,MAAID,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,YAAY;IAChE;IAEAnB,QAAQ,CAACqB,CAAC,KAAK;MACb,GAAGA,CAAC;MACJlB,OAAO;MACPE,MAAM;MACND,SAAS,EAAEA,SAAS,IAAI;IAC1B,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACL,GAAGL,KAAK;IACRwB,cAAc;IACdgB,eAAe;IACfjB,kBAAkB;IAClB6C,WAAW;IACXP,WAAW;IACXE,aAAa;IACbC,eAAe;IACfC,iBAAiB;IACjBC,eAAe;IACfvE;EACF,CAAC;AACH;AAACI,EAAA,CAvQeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}